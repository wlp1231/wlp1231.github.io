<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wlp1231.cn</id>
    <title>随笔</title>
    <subtitle></subtitle>
    <icon>https://wlp1231.cn/images/favicon.ico</icon>
    <link href="https://wlp1231.cn" />
    <author>
      <name>wlp</name>
    </author>
    <updated>2025-08-15T01:32:34.649Z</updated>
    <category term="随笔" />
    <category term="wlp" />
    <entry>
        <id>https://wlp1231.cn/embedded/esp32/ESP32-S3/</id>
        <title>ESP32-S3</title>
        <link rel="alternate" href="https://wlp1231.cn/embedded/esp32/ESP32-S3/"/>
        <content type="html">&lt;h3 align = center&gt;ESP32-S3&lt;/h3&gt;
&lt;h4 id=&#34;资料整理自正点原子自用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资料整理自正点原子自用&#34;&gt;#&lt;/a&gt; 资料整理自正点原子，自用&lt;/h4&gt;
&lt;h4 id=&#34;开发环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发环境&#34;&gt;#&lt;/a&gt; 开发环境：&lt;/h4&gt;
&lt;p&gt;vscode + platformio + arduino + esp32&lt;/p&gt;
&lt;h4 id=&#34;arduino-语言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arduino-语言&#34;&gt;#&lt;/a&gt; Arduino 语言&lt;/h4&gt;
&lt;p&gt;Arduino 语言是指的是 Arduino 核心库文件提供的各种应用程序编程接口 (API) 集合。这些 API 是对更底层的单片机支持库进行二次封装。使用 C 和 C++ 混合编写。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145418526.png&#34; alt=&#34;image-20250814145418526&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;gpio-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gpio-函数&#34;&gt;#&lt;/a&gt; GPIO 函数&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145757131.png&#34; alt=&#34;image-20250814145757131&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145836371.png&#34; alt=&#34;image-20250814145836371&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145911441.png&#34; alt=&#34;image-20250814145911441&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145944036.png&#34; alt=&#34;image-20250814145944036&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150013506.png&#34; alt=&#34;image-20250814150013506&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150032446.png&#34; alt=&#34;image-20250814150032446&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;外部中断函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部中断函数&#34;&gt;#&lt;/a&gt; 外部中断函数&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150902033.png&#34; alt=&#34;image-20250814150902033&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150916136.png&#34; alt=&#34;image-20250814150916136&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814151007813.png&#34; alt=&#34;image-20250814151007813&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814151109846.png&#34; alt=&#34;image-20250814151109846&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;串口函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串口函数&#34;&gt;#&lt;/a&gt; 串口函数&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814152433030.png&#34; alt=&#34;image-20250814152433030&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814152553861.png&#34; alt=&#34;image-20250814152553861&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814152940239.png&#34; alt=&#34;image-20250814152940239&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153038674.png&#34; alt=&#34;image-20250814153038674&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153102472.png&#34; alt=&#34;image-20250814153102472&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153259882.png&#34; alt=&#34;image-20250814153259882&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153336514.png&#34; alt=&#34;image-20250814153336514&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153353471.png&#34; alt=&#34;image-20250814153353471&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153500947.png&#34; alt=&#34;image-20250814153500947&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153527610.png&#34; alt=&#34;image-20250814153527610&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;定时器函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器函数&#34;&gt;#&lt;/a&gt; 定时器函数&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153829790.png&#34; alt=&#34;image-20250814153829790&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153846878.png&#34; alt=&#34;image-20250814153846878&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153940630.png&#34; alt=&#34;image-20250814153940630&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153959322.png&#34; alt=&#34;image-20250814153959322&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154022182.png&#34; alt=&#34;image-20250814154022182&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154107107.png&#34; alt=&#34;image-20250814154107107&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;pwm-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwm-函数&#34;&gt;#&lt;/a&gt; PWM 函数&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154530885.png&#34; alt=&#34;image-20250814154530885&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154809968.png&#34; alt=&#34;image-20250814154809968&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;led-pwm-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led-pwm-函数&#34;&gt;#&lt;/a&gt; LED-PWM 函数&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172633922.png&#34; alt=&#34;image-20250814172633922&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172654096.png&#34; alt=&#34;image-20250814172654096&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172854454.png&#34; alt=&#34;image-20250814172854454&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172921172.png&#34; alt=&#34;image-20250814172921172&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;adc-模拟数字转换器函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adc-模拟数字转换器函数&#34;&gt;#&lt;/a&gt; ADC 模拟数字转换器函数&lt;/h4&gt;
&lt;p&gt;模拟 - 数字转换器，可将模拟信号转换为数字信号。&lt;/p&gt;
&lt;p&gt;模拟信号：模拟信号是连续的信号，其数值在一定范围内可取任意值。&lt;/p&gt;
&lt;p&gt;数字信号：数字信号是离散的信号，其数值只能取有限的离散值。通常用二进制表示，包含 0 和 1 两种状态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814173848747.png&#34; alt=&#34;image-20250814173848747&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174359447.png&#34; alt=&#34;image-20250814174359447&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174429637.png&#34; alt=&#34;image-20250814174429637&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174450142.png&#34; alt=&#34;image-20250814174450142&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174509803.png&#34; alt=&#34;image-20250814174509803&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;iic-串行通信协议函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iic-串行通信协议函数&#34;&gt;#&lt;/a&gt; IIC 串行通信协议函数&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174956132.png&#34; alt=&#34;image-20250814174956132&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175322989.png&#34; alt=&#34;image-20250814175322989&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175421839.png&#34; alt=&#34;image-20250814175421839&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175733437.png&#34; alt=&#34;image-20250814175733437&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175850127.png&#34; alt=&#34;image-20250814175850127&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175917833.png&#34; alt=&#34;image-20250814175917833&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175942311.png&#34; alt=&#34;image-20250814175942311&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175958788.png&#34; alt=&#34;image-20250814175958788&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;rtc-实时时钟函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rtc-实时时钟函数&#34;&gt;#&lt;/a&gt; RTC 实时时钟函数&lt;/h4&gt;
&lt;p&gt;ESP32Time 库：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250815091644636.png&#34; alt=&#34;image-20250815091644636&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250815091743578.png&#34; alt=&#34;image-20250815091743578&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250815091848815.png&#34; alt=&#34;image-20250815091848815&#34; /&gt;&lt;/p&gt;
</content>
        <category term="嵌入式" scheme="https://wlp1231.cn/categories/embedded/" />
        <category term="编程" scheme="https://wlp1231.cn/categories/embedded/programming/" />
        <category term="socket" scheme="https://wlp1231.cn/tags/socket/" />
        <category term="esp32" scheme="https://wlp1231.cn/tags/esp32/" />
        <updated>2025-08-15T01:32:34.649Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/note/typora%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</id>
        <title></title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/note/typora%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
        <content type="html">&lt;h3 id=&#34;typora&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typora&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT10eXBvcmEmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw&#34;&gt;typora&lt;/span&gt; 快捷键大全&lt;/h3&gt;
&lt;h3 id=&#34;一菜单栏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一菜单栏&#34;&gt;#&lt;/a&gt; 一：菜单栏&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;文件：alt+F&lt;/li&gt;
&lt;li&gt;编辑：alt+E&lt;/li&gt;
&lt;li&gt;段落：alt+P&lt;/li&gt;
&lt;li&gt;格式：alt+O&lt;/li&gt;
&lt;li&gt;视图：alt+V&lt;/li&gt;
&lt;li&gt;主题：alt+T&lt;/li&gt;
&lt;li&gt;帮助：alt+H&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二文件&#34;&gt;#&lt;/a&gt; 二：文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新建：Ctrl+N&lt;/li&gt;
&lt;li&gt;新建窗口：Ctrl+Shift+N&lt;/li&gt;
&lt;li&gt;打开：Ctrl+O&lt;/li&gt;
&lt;li&gt;快速打开：Ctrl+P&lt;/li&gt;
&lt;li&gt;保存：Ctrl+S&lt;/li&gt;
&lt;li&gt;另存为：Ctrl+Shift+S&lt;/li&gt;
&lt;li&gt;偏好：Ctrl+,&lt;/li&gt;
&lt;li&gt;关闭：Ctrl+W&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三编辑&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三编辑&#34;&gt;#&lt;/a&gt; 三：编辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;撤销：Ctrl+Z&lt;/li&gt;
&lt;li&gt;重做：Ctrl+Y&lt;/li&gt;
&lt;li&gt;剪切：Ctrl+X&lt;/li&gt;
&lt;li&gt;复制：Ctrl+C&lt;/li&gt;
&lt;li&gt;粘贴：Ctrl+V&lt;/li&gt;
&lt;li&gt;复制为 MarkDown：Ctrl+Shift+C&lt;/li&gt;
&lt;li&gt;粘贴为纯文本：Ctrl+Shift+V&lt;/li&gt;
&lt;li&gt;全选：Ctrl+A&lt;/li&gt;
&lt;li&gt;选中当前行 / 句：Ctrl+L&lt;/li&gt;
&lt;li&gt;选中当前格式文本：Ctrl+E&lt;/li&gt;
&lt;li&gt;选中当前词：Ctrl+D&lt;/li&gt;
&lt;li&gt;跳转到文首：Ctrl+Home&lt;/li&gt;
&lt;li&gt;跳转到所选内容：Ctrl+J&lt;/li&gt;
&lt;li&gt;跳转到文末：Ctrl+End&lt;/li&gt;
&lt;li&gt;查找：Ctrl+F&lt;/li&gt;
&lt;li&gt;查找下一个：F3&lt;/li&gt;
&lt;li&gt;查找上一个：Shift+F3&lt;/li&gt;
&lt;li&gt;替换：Ctrl+H&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四段落&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四段落&#34;&gt;#&lt;/a&gt; 四：段落&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;标题：Ctrl+1/2/3/4/5&lt;/li&gt;
&lt;li&gt;段落：Ctrl+0&lt;/li&gt;
&lt;li&gt;增大标题级别：Ctrl+=&lt;/li&gt;
&lt;li&gt;减少标题级别：Ctrl±&lt;/li&gt;
&lt;li&gt;表格：Ctrl+T&lt;/li&gt;
&lt;li&gt;代码块：Ctrl+Shift+K&lt;/li&gt;
&lt;li&gt;公式块：Ctrl+Shift+M&lt;/li&gt;
&lt;li&gt;引用：Ctrl+Shift+Q&lt;/li&gt;
&lt;li&gt;有序列表：Ctrl+Shift+[&lt;/li&gt;
&lt;li&gt;无序列表：Ctrl+Shift+]&lt;/li&gt;
&lt;li&gt;增加缩进：Ctrl+]&lt;/li&gt;
&lt;li&gt;减少缩进：Ctrl+[&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五格式&#34;&gt;#&lt;/a&gt; 五：格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;加粗：Ctrl+B&lt;/li&gt;
&lt;li&gt;斜体：Ctrl+I&lt;/li&gt;
&lt;li&gt;下划线：Ctrl+U&lt;/li&gt;
&lt;li&gt;代码：Ctrl+Shift+`&lt;/li&gt;
&lt;li&gt;删除线：Alt+Shift+5&lt;/li&gt;
&lt;li&gt;超链接：Ctrl+K&lt;/li&gt;
&lt;li&gt;图像：Ctrl+Shift+I&lt;/li&gt;
&lt;li&gt;清除样式：Ctrl+&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;六视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六视图&#34;&gt;#&lt;/a&gt; 六：视图&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;显示隐藏侧边栏：Ctrl+Shift+L&lt;/li&gt;
&lt;li&gt;大纲视图：Ctrl+Shift+1&lt;/li&gt;
&lt;li&gt;文档列表视图：Ctrl+Shift+2&lt;/li&gt;
&lt;li&gt;文件树视图：Ctrl+Shift+3&lt;/li&gt;
&lt;li&gt;源代码模式：Ctrl+/&lt;/li&gt;
&lt;li&gt;专注模式：F8&lt;/li&gt;
&lt;li&gt;打字机模式：F9&lt;/li&gt;
&lt;li&gt;切换全屏：F11&lt;/li&gt;
&lt;li&gt;实际大小：Ctrl+Shift+0&lt;/li&gt;
&lt;li&gt;放大：Ctrl+Shift+=&lt;/li&gt;
&lt;li&gt;缩小：Ctrl+Shift±&lt;/li&gt;
&lt;li&gt;应用内窗口切换：Ctrl+Tab&lt;/li&gt;
&lt;li&gt;打开 DevTools：Shift+F12&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他特殊用法&lt;br /&gt;
 1、按一下回车，&lt;strong&gt;取消之前的有序无序标志&lt;/strong&gt;&lt;/p&gt;
</content>
        <updated>2023-10-20T13:57:23.405Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Ubuntu/%E5%AE%9A%E7%82%B9%E8%B7%91%E5%8A%A8/</id>
        <title>定点跑动</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Ubuntu/%E5%AE%9A%E7%82%B9%E8%B7%91%E5%8A%A8/"/>
        <content type="html">&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Import the ROS libraries, and load the manifest file which through &amp;lt;depend package=... /&gt; will give us access to the project dependencies&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; aifc &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Aifc_read&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; operator &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; contains&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; roslib&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; rospy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; math&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; serial&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; time&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; geometry_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Twist  	 &lt;span class=&#34;token comment&#34;&gt;# for sending commands to the drone&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; std_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Empty       	 &lt;span class=&#34;token comment&#34;&gt;# for land/takeoff/emergency&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; std_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Header  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; std_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; String &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; nav_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Odometry&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; geometry_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; PoseStamped&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; geometry_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Point&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ROBOT_MAX_LIN_VEL &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ROBOT_MAX_ANG_VEL &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.82&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FLAG &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FLAGZ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ser &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; serial&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Serial&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;com_vel_callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flushInput&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    vx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    vy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    vz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# print(vx, vy, vz)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bytearray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    counter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x57&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vx &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vx &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vx &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; vx &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; vy &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; vz &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xFF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flushInput&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# rospy.sleep(0.01)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rosSerial_init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; baud&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;port &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;baudrate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; baud&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;timeout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; serial&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SerialException&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;logerr&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Unable to open port&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_open&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loginfo&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Serial Port initialized&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;constrain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; low&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; high&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; low&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; low&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; high&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; high&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RobotInterface&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; navdata_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; cmd_topic_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_p_xy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_d_xy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_yaw &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;limit_cmd_xy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Odometry&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;move_cmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sub_pose &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Subscriber&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;navdata_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Odometry&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;callback_pose&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pub_move_cmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Publisher&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd_topic_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; queue_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;on_shutdown&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Reset&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;shutting down the ros...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;callback_pose&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;move_cmd_send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; move_cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pub_move_cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;publish&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;move_cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;set_target_point&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; point&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; point&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;quat2eul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; orientation&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; orientation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; orientation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; orientation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; orientation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;w&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t0 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; z &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; w &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; z &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; w &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; z &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; w &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        euler_angle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Point&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        euler_angle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;asin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        euler_angle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;atan2&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t3&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        euler_angle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;atan2&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t0&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; euler_angle&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;global&lt;/span&gt; FLAG&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;global&lt;/span&gt; FLAGZ&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            err_x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;position&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            err_y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;position&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            euler_angle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;quat2eul&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;orientation&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;# print(self.state.pose.pose.position.x, self.state.pose.pose.position.y, euler_angle.z)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            yaw &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; euler_angle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;# print(yaw)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constrain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_p_xy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err_x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cos&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; err_y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constrain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_p_xy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; err_x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; err_y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cos&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;149&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constrain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_yaw &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ROBOT_MAX_ANG_VEL&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ROBOT_MAX_ANG_VEL&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;150&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.003&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;151&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;152&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.003&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;153&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;154&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.003&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;155&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;156&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; FLAGZ&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;157&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;158&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;159&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;160&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        com_vel_callback&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;161&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;move_cmd_send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;162&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;163&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;164&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           FLAGZ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;165&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;166&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# print(cmd.linear.x,cmd.linear.y,cmd.angular.z)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;167&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;168&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            FLAG &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;169&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;170&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;171&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;172&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;173&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;174&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;init_node&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;CarMecanum&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;175&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# rospy.init_node(&#34;serial_example_node&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;176&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    car_mecanum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; RobotInterface&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/camera/odom/sample&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/cmd_vel&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;177&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;178&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# write_sub = rospy.Subscriber(&#34;/cmd_vel&#34;, Twist, com_vel_callback)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;179&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;180&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; rosSerial_init&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/dev/ttyUSB0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;115200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;181&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        exit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;182&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;183&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;184&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Rate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;185&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    t_start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;186&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;187&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;188&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 90 --&gt; 1.583&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;189&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;190&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goal &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.52&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.87&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.86&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.86&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.86&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.583&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;191&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# goal = [[0, 0, 0.2], [0, 0, 0],[0, -1.583, -1.583]]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;192&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;193&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goalx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;194&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goaly &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;195&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goalz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;196&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;197&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;198&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;199&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;200&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.05&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;201&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;202&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;203&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_shutdown&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;204&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# print(FLAG)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;205&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; FLAG&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;206&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;207&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            FLAG &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;208&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            FLAGZ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;209&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            i &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;210&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;211&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            goalx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;212&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            goaly &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;213&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            goalz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;214&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;215&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# if FLAGZ:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;216&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;#      goalz = goal[2][i]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;217&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;218&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goalx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;219&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goaly&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;220&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goalz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;221&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        car_mecanum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_target_point&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;222&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        car_mecanum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;run&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;223&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        rate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;解释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解释&#34;&gt;#&lt;/a&gt; 解释&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个常见的行，指示操作系统使用 Python 来执行这个脚本。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; aifc &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Aifc_read&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; operator &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; contains&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里导入了一些模块，但是在代码中并没有使用它们，可能是不必要的导入。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; roslib&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; rospy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; math&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; serial&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; time&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这些是导入了一些重要的 Python 库和模块，包括 ROS 的库（ &lt;code&gt;roslib&lt;/code&gt;  和 &lt;code&gt;rospy&lt;/code&gt; ）、数学库（ &lt;code&gt;math&lt;/code&gt; ）、串口通信库（ &lt;code&gt;serial&lt;/code&gt; ）以及时间库（ &lt;code&gt;time&lt;/code&gt; ）。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; geometry_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Twist    &lt;span class=&#34;token comment&#34;&gt;# 用于发送控制机器人的命令&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; std_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Empty         &lt;span class=&#34;token comment&#34;&gt;# 用于控制机器人的起飞、降落、紧急停止等&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; std_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Header&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; std_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; String&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; nav_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Odometry&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; geometry_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; PoseStamped&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; geometry_msgs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msg &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Point&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这些是 ROS 消息类型，用于通过 ROS 话题进行数据传输。每个消息类型都有特定的结构和字段，这些字段可以包含有关机器人状态、命令和传感器数据的信息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ROBOT_MAX_LIN_VEL &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ROBOT_MAX_ANG_VEL &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.82&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FLAG &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FLAGZ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里定义了一些全局变量，包括机器人的最大线性速度和最大角速度，以及两个布尔变量  &lt;code&gt;FLAG&lt;/code&gt;  和  &lt;code&gt;FLAGZ&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ser &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; serial&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Serial&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个串行通信对象，稍后将用于与机器人的串行端口通信。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;com_vel_callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个回调函数，它用于处理来自 ROS 话题  &lt;code&gt;/cmd_vel&lt;/code&gt;  的消息。这个消息通常包含控制机器人的线性速度和角速度。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flushInput&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里清空了串口输入缓冲区。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;vz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里从接收到的消息中提取了线性速度（vx、vy）和角速度（vz）。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bytearray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;counter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x57&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里创建了一个字节数组  &lt;code&gt;data_tem&lt;/code&gt;  和一个计数器  &lt;code&gt;counter&lt;/code&gt; ，并将字节  &lt;code&gt;0x57&lt;/code&gt;  存储在  &lt;code&gt;data_tem&lt;/code&gt;  的第一个位置。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vx &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vx &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vx &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里将线性速度  &lt;code&gt;vx&lt;/code&gt;  的各个位数存储在  &lt;code&gt;data_tem&lt;/code&gt;  中，通过将速度乘以不同的因子来实现。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; vx &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里将一个表示速度方向的位存储在  &lt;code&gt;data_tem&lt;/code&gt;  中，如果  &lt;code&gt;vx&lt;/code&gt;  大于等于 0，表示正方向，否则是负方向。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里将线性速度  &lt;code&gt;vy&lt;/code&gt;  的各个位数以及速度方向存储在  &lt;code&gt;data_tem&lt;/code&gt;  中。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; vy &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里存储  &lt;code&gt;vy&lt;/code&gt;  的方向信息，与  &lt;code&gt;vx&lt;/code&gt;  类似。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里将角速度  &lt;code&gt;vz&lt;/code&gt;  的各个位数存储在  &lt;code&gt;data_tem&lt;/code&gt;  中，同时也存储了方向信息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; vz &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里存储  &lt;code&gt;vz&lt;/code&gt;  的方向信息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xFF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data_tem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;counter &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flushInput&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里将一个结束标志（ &lt;code&gt;0xFF&lt;/code&gt; ）存储在  &lt;code&gt;data_tem&lt;/code&gt;  中，并将整个数据包写入串口。然后清空了串口输入缓冲区。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rosSerial_init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; baud&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是初始化串口通信的函数，接受串口名称和波特率作为参数。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;port &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;baudrate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; baud&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;timeout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; serial&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SerialException&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;logerr&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Unable to open port&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在这里，尝试将串口对象的属性设置为传入的串口名称和波特率，并打开串口。如果出现串口打开失败的异常，将记录错误消息并返回 - 1。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; ser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_open&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loginfo&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Serial Port initialized&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果串口成功打开，将记录初始化成功的信息。&lt;/p&gt;
&lt;p&gt;继续解释代码：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;constrain&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; low&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; high&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; low&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; low&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; high&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; high&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个限制输入值在指定范围内的函数。如果输入值小于最小值  &lt;code&gt;low&lt;/code&gt; ，则将输入值设置为  &lt;code&gt;low&lt;/code&gt; ；如果输入值大于最大值  &lt;code&gt;high&lt;/code&gt; ，则将输入值设置为  &lt;code&gt;high&lt;/code&gt; ；否则，保持输入值不变，然后返回最终结果。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RobotInterface&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个自定义的类  &lt;code&gt;RobotInterface&lt;/code&gt;  的定义，它包含了一些机器人控制相关的方法和属性。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; navdata_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; cmd_topic_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是  &lt;code&gt;RobotInterface&lt;/code&gt;  类的构造函数，它在创建类的实例时被调用。它接受两个参数  &lt;code&gt;navdata_name&lt;/code&gt;  和  &lt;code&gt;cmd_topic_name&lt;/code&gt; ，这些参数可能是用于指定 ROS 话题名称的。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_p_xy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_d_xy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_yaw &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;limit_cmd_xy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Odometry&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;move_cmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在构造函数中，初始化了一些属性，包括控制器的一些参数（如  &lt;code&gt;k_p_xy&lt;/code&gt; 、 &lt;code&gt;k_d_xy&lt;/code&gt; 、 &lt;code&gt;k_yaw&lt;/code&gt; 、 &lt;code&gt;limit_cmd_xy&lt;/code&gt; ）、目标点  &lt;code&gt;target_point&lt;/code&gt; 、机器人状态  &lt;code&gt;state&lt;/code&gt; 、移动命令  &lt;code&gt;move_cmd&lt;/code&gt;  和一个标志  &lt;code&gt;get_target&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sub_pose &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Subscriber&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;navdata_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Odometry&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;callback_pose&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pub_move_cmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Publisher&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd_topic_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; queue_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;on_shutdown&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Reset&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在构造函数中还创建了 ROS 的订阅者和发布者对象，用于接收机器人状态信息和发送移动命令。同时，在 ROS 节点关闭时，会执行  &lt;code&gt;self.Reset&lt;/code&gt;  方法。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;shutting down the ros...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个类方法  &lt;code&gt;Reset&lt;/code&gt; ，在 ROS 节点关闭时被调用。它简单地打印一条消息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;callback_pose&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; msg&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个回调函数  &lt;code&gt;callback_pose&lt;/code&gt; ，它用于处理来自 ROS 话题的机器人状态信息，并将其存储在类属性  &lt;code&gt;self.state&lt;/code&gt;  中。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;move_cmd_send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; move_cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pub_move_cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;publish&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;move_cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个方法  &lt;code&gt;move_cmd_send&lt;/code&gt; ，它用于发布机器人的移动命令到 ROS 话题，以实现机器人的运动控制。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;set_target_point&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; point&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; point&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个方法  &lt;code&gt;set_target_point&lt;/code&gt; ，它接受一个目标点  &lt;code&gt;point&lt;/code&gt; ，并将其存储在类属性  &lt;code&gt;self.target_point&lt;/code&gt;  中，同时将标志  &lt;code&gt;self.get_target&lt;/code&gt;  设置为  &lt;code&gt;True&lt;/code&gt; ，表示已经设置了目标点。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;quat2eul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; orientation&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个方法  &lt;code&gt;quat2eul&lt;/code&gt; ，用于将四元数表示的姿态信息转换为欧拉角（Euler angles）表示的姿态信息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个方法  &lt;code&gt;run&lt;/code&gt; ，它实现了机器人的运动控制逻辑。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;global&lt;/span&gt; FLAG&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;global&lt;/span&gt; FLAGZ&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在  &lt;code&gt;run&lt;/code&gt;  方法中，首先声明了全局变量  &lt;code&gt;FLAG&lt;/code&gt;  和  &lt;code&gt;FLAGZ&lt;/code&gt; ，然后创建了一个空的  &lt;code&gt;Twist&lt;/code&gt;  类型的消息对象  &lt;code&gt;cmd&lt;/code&gt; 。接着检查  &lt;code&gt;self.get_target&lt;/code&gt;  标志，如果为  &lt;code&gt;True&lt;/code&gt; ，表示已经设置了目标点，就执行下面的运动控制逻辑。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;err_x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;position&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;err_y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;position&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;euler_angle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;quat2eul&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pose&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;orientation&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在运动控制逻辑中，计算了当前机器人位置与目标点之间的误差，包括线性坐标  &lt;code&gt;err_x&lt;/code&gt;  和  &lt;code&gt;err_y&lt;/code&gt; ，以及姿态角度  &lt;code&gt;euler_angle&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yaw &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; euler_angle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constrain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_p_xy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err_x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cos&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; err_y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constrain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_p_xy &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; err_x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; err_y &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cos&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ROBOT_MAX_LIN_VEL&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constrain&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;k_yaw &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target_point&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; yaw&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ROBOT_MAX_ANG_VEL&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ROBOT_MAX_ANG_VEL&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;根据误差和一些控制参数，计算出新的线性速度和角速度命令  &lt;code&gt;cmd&lt;/code&gt; 。这里使用了  &lt;code&gt;constrain&lt;/code&gt;  函数来确保速度命令不超过最大值。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.003&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.003&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.003&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里进一步处理线性速度和角速度命令，将非常小的值（小于 0.003）设为 0，以避免微小的速度命令。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; FLAGZ&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果  &lt;code&gt;FLAGZ&lt;/code&gt;  标志为  &lt;code&gt;True&lt;/code&gt; ，表示需要停止机器人的线性运动。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;com_vel_callback&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;move_cmd_send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;调用  &lt;code&gt;com_vel_callback&lt;/code&gt;  函数将命令  &lt;code&gt;cmd&lt;/code&gt;  发送给机器人，然后使用  &lt;code&gt;self.move_cmd_send(cmd)&lt;/code&gt;  发布命令到 ROS 话题。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   FLAGZ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里检查如果机器人的线性速度  &lt;code&gt;cmd.linear.x&lt;/code&gt;  和  &lt;code&gt;cmd.linear.y&lt;/code&gt;  都为零，就将  &lt;code&gt;FLAGZ&lt;/code&gt;  设置为  &lt;code&gt;True&lt;/code&gt; ，表示机器人的线性运动已经停止。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    FLAG &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里检查如果机器人的角速度  &lt;code&gt;cmd.angular.z&lt;/code&gt;  和线性速度  &lt;code&gt;cmd.linear.x&lt;/code&gt;  以及  &lt;code&gt;cmd.linear.y&lt;/code&gt;  都为零，就将  &lt;code&gt;FLAG&lt;/code&gt;  设置为  &lt;code&gt;True&lt;/code&gt; ，表示机器人的运动已经停止。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是 Python 中的一个惯用用法，表示如果这个脚本被直接运行而不是被导入为模块时，才执行以下代码块。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;init_node&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;CarMecanum&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里初始化了一个 ROS 节点，节点名称为  &lt;code&gt;&#39;CarMecanum&#39;&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;car_mecanum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; RobotInterface&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/camera/odom/sample&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/cmd_vel&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建了一个  &lt;code&gt;RobotInterface&lt;/code&gt;  类的实例  &lt;code&gt;car_mecanum&lt;/code&gt; ，并传入了两个参数，分别是机器人状态话题名称和移动命令话题名称。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; rosSerial_init&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/dev/ttyUSB0&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;115200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;调用  &lt;code&gt;rosSerial_init&lt;/code&gt;  函数，初始化串行通信，如果初始化失败则退出脚本。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Rate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建一个 ROS 的速率控制对象，设置为 100Hz，即每秒循环 100 次。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;t_start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Twist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;获取当前时间，并创建一个空的  &lt;code&gt;Twist&lt;/code&gt;  类型的消息对象  &lt;code&gt;target&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;goal &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.52&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.87&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.86&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.86&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.86&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.583&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;定义了一个目标点列表  &lt;code&gt;goal&lt;/code&gt; ，它包含了三个子列表，每个子列表表示一个目标点的线性速度和角速度信息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;goalx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;goaly &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;goalz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.05&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;初始化了一些变量，包括索引  &lt;code&gt;i&lt;/code&gt; ，以及目标点的初始值。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; rospy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_shutdown&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这是一个 ROS 节点的主循环，只要 ROS 节点没有被关闭，就会一直执行以下代码块。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; FLAG&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    FLAG &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    FLAGZ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    i &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goalx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goaly &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goalz &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goal&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果  &lt;code&gt;FLAG&lt;/code&gt;  为  &lt;code&gt;True&lt;/code&gt; ，表示当前目标点已经达到，程序会休眠 2 秒，然后将  &lt;code&gt;FLAG&lt;/code&gt;  和  &lt;code&gt;FLAGZ&lt;/code&gt;  重置为  &lt;code&gt;False&lt;/code&gt; ，并切换到下一个目标点。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goalx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goaly&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;angular&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goalz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将计算好的目标点的线性速度和角速度信息存储在  &lt;code&gt;target&lt;/code&gt;  中。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;car_mecanum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_target_point&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;car_mecanum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;run&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过  &lt;code&gt;car_mecanum&lt;/code&gt;  对象的方法设置目标点，然后调用  &lt;code&gt;run&lt;/code&gt;  方法执行机器人的运动控制，最后使用速率控制对象  &lt;code&gt;rate&lt;/code&gt;  控制循环的频率。&lt;/p&gt;
&lt;p&gt;这就是代码的主要逻辑和功能。它是一个 ROS 控制机器人运动的程序，根据一系列预定义的目标点来控制机器人的运动。当达到一个目标点后，会等待一段时间然后切换到下一个目标点。同时，通过串口通信将机器人的速度命令发送给机器人。&lt;/p&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="note" scheme="https://wlp1231.cn/tags/note/" />
        <updated>2023-09-25T07:40:47.950Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/note/oj%E5%88%A4%E9%A2%98%E7%B3%BB%E7%BB%9F/</id>
        <title>OJ 判题</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/note/oj%E5%88%A4%E9%A2%98%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h3 id=&#34;oj判题系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oj判题系统&#34;&gt;#&lt;/a&gt; oj 判题系统&lt;/h3&gt;
&lt;h4 id=&#34;项目介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目介绍&#34;&gt;#&lt;/a&gt; 项目介绍&lt;/h4&gt;
&lt;p&gt;OJ = onlone judge 在线判题评测系统&lt;/p&gt;
&lt;p&gt;用户可以选择题目，在线做题，编写代码并提交代码；系统会对用户提交的代码，根据出题人设置的答案，来判断用户提交的代码是否正确。&lt;/p&gt;
&lt;p&gt;ACM：程序设计竞赛&lt;/p&gt;
&lt;p&gt;OJ 系统难题：判题系统&lt;/p&gt;
&lt;p&gt;用于在线评测编程题目代码的系统，能够根据用户提交的代码，使用出题人预先设定的输入和输出进行编译、运行&lt;/p&gt;
&lt;p&gt;判题系统作为一个 API&lt;/p&gt;
&lt;h4 id=&#34;oj-系统属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oj-系统属性&#34;&gt;#&lt;/a&gt; OJ 系统属性&lt;/h4&gt;
&lt;p&gt;题目限制：时间、内存&lt;/p&gt;
&lt;p&gt;题目介绍&lt;/p&gt;
&lt;p&gt;题目输入&lt;/p&gt;
&lt;p&gt;题目输出&lt;/p&gt;
&lt;p&gt;输入样例&lt;/p&gt;
&lt;p&gt;输出样例&lt;/p&gt;
&lt;p&gt;其他限制：不能随便引入包、随便历遍、暴力破解 =&amp;gt; 安全性&lt;/p&gt;
&lt;p&gt;判题过程是异步的 =&amp;gt;  异步化&lt;/p&gt;
&lt;p&gt;提交后会生成提交记录，有结果和运行信息&lt;/p&gt;
&lt;p&gt;普通测评：管理员设置题日的输入和输出用例，比如我输入 1，你要输出 2 才是正确的；交给判题机去执行用户&lt;br /&gt;
的代码，给用户的代码喂输入用例，比如 1，看用户程序的执行结果是否和标准答案的输出一致。&lt;br /&gt;
(比对用例文件)&lt;/p&gt;
&lt;p&gt;特殊测评 (SPJ): 管理员设置题日的输入和输出，比如我输入 1，用户的答案只要是 &amp;gt; 0 或 &amp;lt; 2 都是正确的；特判程序，不是通过对比用例文件是否一致这种死板的程序来检验，而是要专门根据这道题目写一个特殊的判断程&lt;br /&gt;
序，程序接收题目的输入 (1)、标准输出用例 (2)、用户的结果 (1.5)，特判程序根据这些值来比较是否正确。&lt;/p&gt;
&lt;p&gt;交互测评：让用户输入一个例子，就给一个输出结果，交互比较灵活，没办法通过简单的、死板的输入输&lt;br /&gt;
出文件来搞定&lt;/p&gt;
&lt;h4 id=&#34;做项目的原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#做项目的原因&#34;&gt;#&lt;/a&gt; 做项目的原因&lt;/h4&gt;
&lt;p&gt;CRUD，更多是编程思想、计算机基础、结构设计、可拓展性强&lt;/p&gt;
&lt;h4 id=&#34;做项目的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#做项目的流程&#34;&gt;#&lt;/a&gt; 做项目的流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;项目介绍、项目调研、需求分析&lt;/li&gt;
&lt;li&gt;核心业务流程 =&amp;gt; 这个项目最核心的功能&lt;/li&gt;
&lt;li&gt;项目要做的功能（功能模块）&lt;/li&gt;
&lt;li&gt;技术选型（技术预研）&lt;/li&gt;
&lt;li&gt;项目初始化&lt;/li&gt;
&lt;li&gt;项目开发&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;优化&lt;/li&gt;
&lt;li&gt;代码提交、代码审核&lt;/li&gt;
&lt;li&gt;产品验收&lt;/li&gt;
&lt;li&gt;上线&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写文档、持续调研、持续记录总结&lt;/p&gt;
&lt;h4 id=&#34;现有系统调研&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现有系统调研&#34;&gt;#&lt;/a&gt; 现有系统调研&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0hpbWl0WkgvSE9KKCVFOSU4MCU4MiVFNSU5MCU4OCVFNSVBRCVBNiVFNCVCOSVBMCk=&#34;&gt;https://github.com/HimitZH/HOJ (适合学习)&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1FpbmdkYW9VL09ubGluZUp1ZGdlKHB5dGhvbiwlRTQlQjglOEQlRTUlQTUlQkQlRTUlQUQlQTYlRUYlQkMlOEMlRTUlQkUlODglRTYlODglOTAlRTclODYlOUYp&#34;&gt; https://github.com/QingdaoU/OnlineJudge (python, 不好学，很成熟)&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2h6eGllL3ZvaiglRTYlOTglOUYlRTYlOTglOUYlRTYlQjIlQTElRTklODIlQTMlRTQlQjklODglRTUlQTQlOUElRUYlQkMlOEMlRTYlQjIlQTElRTklODIlQTMlRTQlQjklODglRTYlODglOTAlRTclODYlOUYlRUYlQkMlOEMlRTQlQkQlODYlRTclOUIlQjglRTUlQUYlQjklRTUlQTUlQkQlRTUlQUQlQTYp&#34;&gt; https://github.com/hzxie/voj (星星没那么多，没那么成熟，但相对好学)&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ZmbGVha2luZy4vdW9qKHBocCVFNSVBRSU5RSVFNyU4RSVCMCVFNyU5QSU4NCk=&#34;&gt; https://github.com/vfleaking./uoj (php 实现的)&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3poYmx1ZS9odXN0b2ooJUU2JTg4JTkwJUU3JTg2JTlGJUVGJUJDJThDJUU0JUJEJTg2JUU2JTk4JUFGcGhwKQ==&#34;&gt; https://github.com/zhblue/hustoj (成熟，但是 php)&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2h5ZHJvLWRldi9IeWRybyglRTUlOEElOUYlRTglODMlQkQlRTUlQkMlQkElRTUlQTQlQTclRUYlQkMlOENOb2RlLmpzJUU1JUFFJTlFJUU3JThFJUIwKQ==&#34;&gt; https://github.com/hydro-dev/Hydro (功能强大，Node.js 实现)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;实现核心&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现核心&#34;&gt;#&lt;/a&gt; 实现核心&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;权限校验&lt;/p&gt;
&lt;p&gt;谁能提交代码、查看代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码沙箱（安全沙箱）&lt;/p&gt;
&lt;p&gt;防止用户代码藏毒：写个木马文件、修改系统权限&lt;/p&gt;
&lt;p&gt;沙箱：隔离的、安全的环境，用户的代码不会影响到沙箱之外的系统运行&lt;/p&gt;
&lt;p&gt;资源分配：限制用户程序的占用资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判题的规则&lt;/p&gt;
&lt;p&gt;题目用例的对比、结果验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任务调度&lt;/p&gt;
&lt;p&gt;服务器资源有限，用户需要排队，依次判题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;核心业务流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心业务流程&#34;&gt;#&lt;/a&gt; 核心业务流程&lt;/h4&gt;
&lt;p&gt;用户  =&amp;gt; 浏览题目 =&amp;gt; 提交题目代码  =&amp;gt; 业务后端  =&amp;gt;  数据库 =&amp;gt; 检查用户是否登录  =&amp;gt; 题目是否存在  =&amp;gt; 得到题目信息  =&amp;gt; 返回给业务后端  =&amp;gt;   提交代码和用例  =&amp;gt; 判题模块  =&amp;gt; 编译执行  =&amp;gt; 返回结果  =&amp;gt; 业务后端  =&amp;gt; 用户&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1693758500624.png&#34; alt=&#34;1693758500624&#34; /&gt;&lt;/p&gt;
&lt;p&gt;时序图&lt;/p&gt;
&lt;p&gt;用户    前端页面     后端主业务    消息队列    判题服务    代码沙箱    数据库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694096473472.png&#34; alt=&#34;1694096473472&#34; /&gt;&lt;/p&gt;
&lt;p&gt;判题服务：获取题目信息、预计的输入输出结果，返回给主业务后端：用户答案是否正确&lt;/p&gt;
&lt;p&gt;代码沙箱：只负责运行代码，给出结果，不负责判断结果是否正确&lt;/p&gt;
&lt;p&gt;实现解耦&lt;/p&gt;
&lt;h4 id=&#34;功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能&#34;&gt;#&lt;/a&gt; 功能&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;题目模块
&lt;ul&gt;
&lt;li&gt;创建题目&lt;/li&gt;
&lt;li&gt;删除题目&lt;/li&gt;
&lt;li&gt;修改题目&lt;/li&gt;
&lt;li&gt;搜索题目&lt;/li&gt;
&lt;li&gt;在线做题&lt;/li&gt;
&lt;li&gt;提交代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户模块
&lt;ul&gt;
&lt;li&gt;注册&lt;/li&gt;
&lt;li&gt;登录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判题模块
&lt;ul&gt;
&lt;li&gt;提交判题（结果是否正确）&lt;/li&gt;
&lt;li&gt;错误处理（内存溢出、超时、安全性）&lt;/li&gt;
&lt;li&gt;自主实现（代码沙箱）&lt;/li&gt;
&lt;li&gt;开放接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在线做题、在线提交&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;拓展思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拓展思路&#34;&gt;#&lt;/a&gt; 拓展思路&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;支持多种语言&lt;/li&gt;
&lt;li&gt;remote judge&lt;/li&gt;
&lt;li&gt;完善的评测功能：普通评测、特殊评测、交互评测、在线自测、子任务分组评测、文件 io&lt;/li&gt;
&lt;li&gt;统计分析用户判题记录&lt;/li&gt;
&lt;li&gt;权限校验&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技术选型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术选型&#34;&gt;#&lt;/a&gt; 技术选型&lt;/h4&gt;
&lt;p&gt;前端：Vue3、Acro Design 组件库 在线代码编辑器、在线文档浏览&lt;/p&gt;
&lt;p&gt;Java 进程控制、Java 安全管理器、部分 JVM 知识点&lt;/p&gt;
&lt;p&gt;虚拟机（云服务器）、Docker（代码沙箱实现）&lt;/p&gt;
&lt;p&gt;Spring Cloud 微服务、消息队列、多种设计模式&lt;/p&gt;
&lt;h4 id=&#34;架构设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构设计&#34;&gt;#&lt;/a&gt; 架构设计&lt;/h4&gt;
&lt;p&gt;分层架构&lt;/p&gt;
&lt;p&gt;用户层    app   pc 端    移动端&lt;/p&gt;
&lt;p&gt;接入层    Nginx    API 网关    负载均衡项目&lt;/p&gt;
&lt;p&gt;业务层&lt;/p&gt;
&lt;p&gt;服务层&lt;/p&gt;
&lt;p&gt;存储层&lt;/p&gt;
&lt;p&gt;资源层&lt;/p&gt;
&lt;h4 id=&#34;主流-oj-系统实现方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主流-oj-系统实现方案&#34;&gt;#&lt;/a&gt; 主流 OJ 系统实现方案&lt;/h4&gt;
&lt;p&gt;开发原则：能复用就复用&lt;/p&gt;
&lt;h5 id=&#34;1-使用现成的-oj-系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-使用现成的-oj-系统&#34;&gt;#&lt;/a&gt; 1. 使用现成的 OJ 系统&lt;/h5&gt;
&lt;p&gt;judge0，这是一个非常成熟的商业 OJ 项目，支持 60 多种编程语言&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2p1ZGdlMC9qdWRnZTA=&#34;&gt;https://github.com/judge0/judge0&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-使用现成的服务其他人实现了的代码沙箱-判题系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-使用现成的服务其他人实现了的代码沙箱-判题系统&#34;&gt;#&lt;/a&gt; 2. 使用现成的服务 —— 其他人实现了的代码沙箱、判题系统&lt;/h5&gt;
&lt;p&gt;judge0 提供了判题 API&lt;/p&gt;
&lt;p&gt;Judge0 API 地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yYXBpZGFwaS5jb20vanVkZ2UwLW9mZmljaWFsL2FwaS9qdWRnZTAtY2U=&#34;&gt;https://rapidapi.com/judge0-official/api/judge0-ce&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;官方文档： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jZS5qdWRnZTAuY29tLyNzdWJtaXNzaW9ucy1zdWJtaXNzaW9uLXBvc3Q=&#34;&gt;https://ce.judge0.com/#submissions-submission-post&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;3-自主开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-自主开发&#34;&gt;#&lt;/a&gt; 3. 自主开发&lt;/h5&gt;
&lt;p&gt;适合学习，但不适合商用&lt;/p&gt;
&lt;h5 id=&#34;4-把-ai-当作代码沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-把-ai-当作代码沙箱&#34;&gt;#&lt;/a&gt; 4. 把 AI 当作代码沙箱&lt;/h5&gt;
&lt;h5 id=&#34;5-模拟浏览器远程使用其他人的-oj-系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-模拟浏览器远程使用其他人的-oj-系统&#34;&gt;#&lt;/a&gt; 5. 模拟浏览器远程使用其他人的 OJ 系统&lt;/h5&gt;
&lt;h4 id=&#34;前端项目初始化创建一个通用模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端项目初始化创建一个通用模板&#34;&gt;#&lt;/a&gt; 前端项目初始化 —— 创建一个通用模板&lt;/h4&gt;
&lt;h5 id=&#34;1-确认环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-确认环境&#34;&gt;#&lt;/a&gt; 1. 确认环境&lt;/h5&gt;
&lt;p&gt;nodejs =&amp;gt; v18 or 14&lt;/p&gt;
&lt;p&gt;npm v8 以上&lt;/p&gt;
&lt;h5 id=&#34;2-初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-初始化&#34;&gt;#&lt;/a&gt; 2. 初始化&lt;/h5&gt;
&lt;p&gt;使用 vue-cli 脚手架&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g @vue/cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检测安装是否成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vue -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建新的 vue 项目&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;vue create project-name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;选择组件库：Babel、TypeScript、Router、Vuex、Linter/Formatter&lt;/p&gt;
&lt;p&gt;运行项目，project.json&lt;/p&gt;
&lt;h5 id=&#34;3-前端工程配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-前端工程配置&#34;&gt;#&lt;/a&gt; 3. 前端工程配置&lt;/h5&gt;
&lt;p&gt;插件：vue.js    prettier&lt;/p&gt;
&lt;p&gt;自己整合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码规范 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lc2xpbnQub3JnL2RvY3MvbGF0ZXN0L3VzZS9nZXR0aW5nLXN0YXJ0ZWQ=&#34;&gt;https://eslint.org/docs/latest/use/getting-started&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;代码美化 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wcmV0dGllci5pby9kb2NzL2VuL2luc3RhbGwuaHRtbA==&#34;&gt;https://prettier.io/docs/en/install.html&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;直接整合 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL2VzbGludC1wbHVnaW4tcHJldHRpZXIjcmVjb21tZW5kZWQtY29uZmlndXJhdGlvbg==&#34;&gt;https://github.com/prettier/eslint-plugin-prettier#recommended-configuration&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;4-引入组件-arco-design-vue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-引入组件-arco-design-vue&#34;&gt;#&lt;/a&gt; 4. 引入组件 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hcmNvLmRlc2lnbi92dWUvZG9jcy9zdGFydA==&#34;&gt;Arco Design Vue&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;p&gt;···&lt;/p&gt;
&lt;p&gt;按照快速入门&lt;/p&gt;
&lt;p&gt;改变 main.js&lt;/p&gt;
&lt;h4 id=&#34;项目通用布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目通用布局&#34;&gt;#&lt;/a&gt; 项目通用布局&lt;/h4&gt;
&lt;p&gt;新建布局文件 layouts/BasicLayout.vue&lt;/p&gt;
&lt;p&gt;在 app.vue 中引入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;BasicLayout /&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;布局 —— 上中下布局&lt;/p&gt;
&lt;p&gt;导航栏（菜单） —— 设置为全局 components/GlobalHeader.vue&lt;/p&gt;
&lt;p&gt;菜单设置根据路由文件动态生成 router/index.ts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提取通用路由文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;菜单组件读取路由，动态渲染菜单项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绑点跳转事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步路由到菜单项&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;const router = useRouter();

// 默认主页
const selectedKeys = ref([&amp;quot;/&amp;quot;]);

// 路由跳转时，更新选中的菜单项
router.afterEach((to, from, failure) =&amp;gt; &amp;#123;
  selectedKeys.value = [to.path];
&amp;#125;);

// 点击菜单项更新路由
const doMenuClick = (key: string) =&amp;gt; &amp;#123;
  router.push(&amp;#123;
    path: key,
  &amp;#125;);
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;思路：点击菜单项 =&amp;gt; 触发点击事件 =&amp;gt; 跳转并更新路由 =&amp;gt; 更新菜单项选中状态&lt;/p&gt;
&lt;h4 id=&#34;全局状态管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局状态管理&#34;&gt;#&lt;/a&gt; 全局状态管理&lt;/h4&gt;
&lt;p&gt;Vuex 提供了一套增删改查全局变量的 API&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1693883335730.png&#34; alt=&#34;1693883335730&#34; /&gt;&lt;/p&gt;
&lt;p&gt;所有页面全局共享的变量&lt;/p&gt;
&lt;p&gt;适合作为全局状态的数据：已登录用户信息&lt;/p&gt;
&lt;p&gt;使用 vuex&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS8=&#34;&gt; 开始 | Vuex (vuejs.org)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;state：存储状态信息&lt;/p&gt;
&lt;p&gt;mutation：要求尽量同步，定义了对变量的增删改方法&lt;/p&gt;
&lt;p&gt;actions：执行异步操作，触发 mutation 的更改，即 actions 调用 mutation&lt;/p&gt;
&lt;p&gt;modules：模块，把一个大的 state 划分为多个小模块&lt;/p&gt;
&lt;p&gt;使用思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 store 目录下新建模块，如 user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 store 目录下的 index.ts 中引入 user 模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 vue 页面中获取 user 信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;const store = useStore();
store.state.user?.userInfo
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 vue 页面中使用 dispatch 调用 actions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;store.dispatch(&amp;quot;模块名/actions里的方法名&amp;quot;,&amp;#123;传入的参数&amp;#125;)
如：
store.dispatch(&amp;quot;userr/getUserInfo&amp;quot;&amp;#123;userInfo: &amp;quot;xxx&amp;quot;&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h4&gt;
&lt;h4 id=&#34;全局权限管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局权限管理&#34;&gt;#&lt;/a&gt; 全局权限管理&lt;/h4&gt;
&lt;p&gt;目的：能够通用地定义哪个页面需要什么权限&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在路由配置文件中定义某个路由的访问权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在全局页面组件 app.vue 中，绑定一个全局路由监听，每次访问页面前，根据用户信息判断用户是否有权限访问该页面&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;router.beforeEach((to, from, next) =&amp;gt; &amp;#123;
  if (to.meta?.access === &amp;quot;canAdmin&amp;quot;) &amp;#123;
    if (store.state.user.loginUser?.role !== &amp;quot;admin&amp;quot;) &amp;#123;
      next(&amp;quot;/noAuth&amp;quot;);
      return;
    &amp;#125;
  &amp;#125;
  next();
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to 的信息为路由信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据配置控制菜单项的显隐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;routes.ts 给路由新增一个标志位，根据标志位过滤&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;const visibleRoutes = routes.filter((item, index) =&amp;gt; &amp;#123;
  if (item.meta?.hideInMenu) &amp;#123;
    return false;
  &amp;#125;
  return true;
&amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据权限隐藏菜单项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用计算属性，当登录用户信息发生变更时，触发菜单栏的重新渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;全局项目入口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局项目入口&#34;&gt;#&lt;/a&gt; 全局项目入口&lt;/h4&gt;
&lt;h4 id=&#34;后端项目初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后端项目初始化&#34;&gt;#&lt;/a&gt; 后端项目初始化&lt;/h4&gt;
&lt;p&gt;构建通用后端框架&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZlcmRpa29vbWVuL29wZW5hcGktdHlwZXNjcmlwdC1jb2RlZ2Vu&#34;&gt;https://github.com/ferdikoomen/openapi-typescript-codegen&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;AOP：面向切面思想&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694098554332.png&#34; alt=&#34;1694098554332&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694098572227.png&#34; alt=&#34;1694098572227&#34; /&gt;&lt;/p&gt;
&lt;p&gt;AOP 需要做的三件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在哪里切入，也就是权限校验和日志记录在哪些代码里执行&lt;/li&gt;
&lt;li&gt;在什么时候切入，即在业务代码执行前还是执行后&lt;/li&gt;
&lt;li&gt;切入后做什么事，如权限校验或日志记录等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;引入依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AOP 切面类添加 @Aspect 注解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AOP 切面类添加 @Componet 注解，将该类交给 Spring 管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在该类中实现 Advice，即&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;token namespace&#34;&gt;cn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;wideth&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;aop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;aspectj&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Aspect&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;aspectj&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Before&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;aspectj&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;annotation&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Pointcut&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;springframework&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stereotype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Aspect&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Component&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;LogAdvice&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 定义一个切点：所有被 GetMapping 注解修饰的方法会织入 advice&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Pointcut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;@annotation(org.springframework.web.bind.annotation.GetMapping)&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;logAdvicePointcut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// Before 表示 logAdvice 将在目标方法执行前执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Before&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;logAdvicePointcut()&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;logAdvice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 这里只是一个示例，你可以写任何处理逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;get请求的advice触发了&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;package cn.wideth.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(value = &amp;quot;/aop&amp;quot;)
public class AopController &amp;#123;

    @GetMapping(value = &amp;quot;/getTest&amp;quot;)
    public JSONObject aopTest() &amp;#123;
        return JSON.parseObject(&amp;quot;&amp;#123;\&amp;quot;message\&amp;quot;:\&amp;quot;SUCCESS\&amp;quot;,\&amp;quot;code\&amp;quot;:200&amp;#125;&amp;quot;);
    &amp;#125;

    @PostMapping(value = &amp;quot;/postTest&amp;quot;)
    @ApiOperation(value = &amp;quot;aop测试信息&amp;quot;)
    public JSONObject aopTest2(@RequestParam(&amp;quot;id&amp;quot;) String id) &amp;#123;
        return JSON.parseObject(&amp;quot;&amp;#123;\&amp;quot;message\&amp;quot;:\&amp;quot;SUCCESS\&amp;quot;,\&amp;quot;code\&amp;quot;:200&amp;#125;&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相关注解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@Pointcut 注解，用来定义一个切面，即上文中所关注的某件事情的入口，切入点定义了事件触发时机。&lt;/p&gt;
&lt;p&gt;定义需要拦截的东西，两个常用的表达式：一个是使用 execution ()，另一个是使用 annotation ()。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;execution(* com.mutest.controller..*.*(..))&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;第一个 * 号的位置：表示返回值类型，* 表示所有类型。&lt;/li&gt;
&lt;li&gt;包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，在本例中指 com.mutest.controller 包、子包下所有类的方法。&lt;/li&gt;
&lt;li&gt;第二个 * 号的位置：表示类名，* 表示所有类。&lt;/li&gt;
&lt;li&gt;*(…)：这个星号表示方法名， * 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;annotation () 方式是针对某个注解来定义切面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Around 注解用于修饰 Around 增强处理&lt;/p&gt;
&lt;p&gt;@Around 可以自由选择增强动作与目标方法的执行顺序，调用 ProceedingJoinPoint 参数的 procedd () 方法才会执行目标方法。&lt;/p&gt;
&lt;p&gt;@Around 可以改变执行目标方法的参数值，也可以改变执行目标方法之后的返回值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Before 注解指定的方法在切面切入目标方法之前执行，可以做一些 Log 处理，也可以做一些信息的统计，比如获取用户的请求 URL 以及用户的 IP 地址等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@After 注解和 @Before 注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 Log 处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@AfterReturning 注解和 @After 有些类似，区别在于 @AfterReturning 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当被切方法执行过程中抛出异常时，会进入 @AfterThrowing 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;前后端联调&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前后端联调&#34;&gt;#&lt;/a&gt; 前后端联调&lt;/h4&gt;
&lt;p&gt;前端发送请求调用后端接口&lt;/p&gt;
&lt;h5 id=&#34;使用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用工具&#34;&gt;#&lt;/a&gt; 使用工具&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Axios&lt;/p&gt;
&lt;p&gt;官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9heGlvcy1odHRwLmNvbS9kb2NzL2ludHJv&#34;&gt;https://axios-http.com/docs/intro&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动生成请求的 API&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZlcmRpa29vbWVuL29wZW5hcGktdHlwZXNjcmlwdC1jb2RlZ2Vu&#34;&gt;https://github.com/ferdikoomen/openapi-typescript-codegen&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;用户登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户登录&#34;&gt;#&lt;/a&gt; 用户登录&lt;/h4&gt;
&lt;p&gt;自动登录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;再 store/user.ts 编写获取远程登录用户信息的代码&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// TODO 远程登录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; UserControllerService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getLoginUserUsingGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;code &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;updateUser&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;updateUser&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loginUser&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          userRole&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;ACCESS_ENUM&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;NOT_LOGIN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;触发 getLoginUser 函数的位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由拦截&lt;/li&gt;
&lt;li&gt;全局页面入口 App.vue&lt;/li&gt;
&lt;li&gt;全局通用布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;全局权限管理优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局权限管理优化&#34;&gt;#&lt;/a&gt; 全局权限管理优化&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;新建 access/index.ts 文件，把原有的路由拦截、权限校验放在独立的文件中&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;支持多套布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#支持多套布局&#34;&gt;#&lt;/a&gt; 支持多套布局&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 routes 路由文件中新建一套用户路由，使用子路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建新的 layout、view 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 app.vue 根页面中通过 if-else 区分布局&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;    &amp;lt;template v-if=&amp;quot;route.path.startsWith(&#39;/user&#39;)&amp;quot;&amp;gt;
      &amp;lt;router-view /&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;template v-else&amp;gt;
      &amp;lt;BasicLayout /&amp;gt;
    &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;登录成功&lt;/p&gt;
&lt;p&gt;使用 await 同步更新用户信息状态&lt;/p&gt;
&lt;p&gt;跳转进入系统页面&lt;/p&gt;
&lt;p&gt;使用 router, 使用 replace，不会占用浏览器历史记录的堆栈，会直替换当前登录页&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;router.push(&amp;#123;
	path: &amp;quot;/&amp;quot;,
	replace: true,
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;登录页面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录页面&#34;&gt;#&lt;/a&gt; 登录页面&lt;/h4&gt;
&lt;p&gt;核心：表单&lt;/p&gt;
&lt;h4 id=&#34;后端接口开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后端接口开发&#34;&gt;#&lt;/a&gt; 后端接口开发&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据功能设计库表&lt;/p&gt;
&lt;p&gt;用户表 只有管理员才能发布和管理题目&lt;/p&gt;
&lt;p&gt;题目表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;题目标题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;题目内容：介绍、输入输出提示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;题目标签：json 数组字符串，栈、队列、简单、中等、困难等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;题目答案：管理员设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入输出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入输出属于判题相关字段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果用例文件不是很大，小于 512KB，可以直接存在数据库中，否则应该处在文件中，数据库只存文件的 url&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当不需要某些字段去倒查这条数据时，且这些字段属于同一类值，可以使用 json 数组存储&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;&#34;input&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1 2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;&#34;output&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3 4&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;&#34;input&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1 2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token property&#34;&gt;&#34;output&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3 4&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样便于扩展，且需要变更字段时不用修改数据库表&lt;/p&gt;
&lt;p&gt;判题限制：时间、大小等同样可以使用 json 数组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题目提交表&lt;/p&gt;
&lt;p&gt;哪个用户提交了哪道题，存放判题结果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提交用户 id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;题目 id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编程语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判题状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判题信息：json 对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判题信息枚举值：&lt;/p&gt;
&lt;p&gt;Accepted 成功&lt;br /&gt;
 Wrong Answer 答案错误&lt;br /&gt;
 Compile Error 编译错误&lt;br /&gt;
 Memory Limit Exceeded 内存溢出&lt;br /&gt;
 Time Limit Exceeded 超时&lt;br /&gt;
 Presentation Error 展示错误&lt;br /&gt;
 Output Limit Exceeded 输出溢出&lt;br /&gt;
 Waiting 等待中&lt;br /&gt;
 Dangerous Operation 危险操作&lt;br /&gt;
 Runtime Error 运行错误（用户程序的问题）&lt;br /&gt;
System Error 系统错误（做系统人的问题）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动生成对数据库基本的增删改查（mapper 和 service 层的基本功能）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写 Controller 层，实现基本的增删改查和权限校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据业务定制开发新功能&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据库索引：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么时候使用索引&lt;/p&gt;
&lt;p&gt;当数据量很大时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何选择索引&lt;/p&gt;
&lt;p&gt;从业务出发，无论是单个索引、还是联合索引，都要从时间的查询语句、字段枚举值的区分度、字段的类型考虑选择区分度大的字段充当索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对上述表的 json 字段，为了更方便的管理，给其独立编写新的类，如：judgeConfig、judgeInfo、judgeCase&lt;/p&gt;
&lt;p&gt;定义 vo 类，封装信息，专门返回给前端的类，信息过滤，防止信息泄露，还可以节约网络传输大小&lt;/p&gt;
&lt;p&gt;需要对象类转封装类，封装类转对象类：封装类和对象类的某些属性类型可能不一样&lt;/p&gt;
&lt;p&gt;为了防止用户按照 id 顺序爬取题目，id 的生成规则改为 ASSING_ID，而不是顺序自增&lt;/p&gt;
&lt;h3 id=&#34;前端界面开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端界面开发&#34;&gt;#&lt;/a&gt; 前端界面开发&lt;/h3&gt;
&lt;h5 id=&#34;需要的页面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需要的页面&#34;&gt;#&lt;/a&gt; 需要的页面：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;用户注册&lt;/li&gt;
&lt;li&gt;用户登录&lt;/li&gt;
&lt;li&gt;创建题目界面&lt;/li&gt;
&lt;li&gt;题目管理页面&lt;/li&gt;
&lt;li&gt;题目列表页&lt;/li&gt;
&lt;li&gt;题目详情页&lt;/li&gt;
&lt;li&gt;题目提交列表页&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;接入需要的组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接入需要的组件&#34;&gt;#&lt;/a&gt; 接入需要的组件&lt;/h4&gt;
&lt;h5 id=&#34;markdown-编辑器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#markdown-编辑器&#34;&gt;#&lt;/a&gt; Markdown 编辑器&lt;/h5&gt;
&lt;p&gt;使用 Md 编辑器&lt;/p&gt;
&lt;p&gt;安装 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2J5dGVkYW5jZS9ieXRlbWQ=&#34;&gt;https://github.com/bytedance/bytemd&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;npm i @bytemd/vue-next
npm i @bytemd/plugin-highlight @bytemd/plugin-gfm
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;代码优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码优化&#34;&gt;#&lt;/a&gt; 代码优化&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;菜单项的权限控制与显示隐藏
&lt;ul&gt;
&lt;li&gt;删除或隐藏不需要的菜单项&lt;/li&gt;
&lt;li&gt;设置 mate.access 和&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面修复
&lt;ul&gt;
&lt;li&gt;使用 Arco Design 的表格组件 page-change&lt;/li&gt;
&lt;li&gt;watchEffect () 监听传递函数的所有变量，当发生改变时，重新加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h3&gt;
&lt;p&gt;计算 A + B&lt;/p&gt;
&lt;p&gt;输入两个整数 a 和 b，要求小于等于 1000&lt;/p&gt;
&lt;p&gt;输出 a+b 的值&lt;/p&gt;
&lt;p&gt;样例输入&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;样例输出&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以使用 C、C++、JAVA&lt;/p&gt;
&lt;h4 id=&#34;后端判题模块预开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后端判题模块预开发&#34;&gt;#&lt;/a&gt; 后端判题模块预开发&lt;/h4&gt;
&lt;h5 id=&#34;判题模块与代码沙箱的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判题模块与代码沙箱的关系&#34;&gt;#&lt;/a&gt; 判题模块与代码沙箱的关系&lt;/h5&gt;
&lt;p&gt;判题模块：调用代码沙箱，把代码和输入交给代码沙箱就可以了，对代码沙箱返回的结果进行判断&lt;/p&gt;
&lt;p&gt;代码沙箱：只负责接受代码和输入，返回编译运行的结果，不负责判题（可以作为独立的项目 / 服务，提供给其他需要执行代码的项目使用）&lt;/p&gt;
&lt;p&gt;两个模块完全解耦，通过 API 交互&lt;/p&gt;
&lt;h4 id=&#34;java开发知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java开发知识&#34;&gt;#&lt;/a&gt; Java 开发知识&lt;/h4&gt;
&lt;h5 id=&#34;枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#枚举&#34;&gt;#&lt;/a&gt; 枚举&lt;/h5&gt;
&lt;h4 id=&#34;代码沙箱开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码沙箱开发&#34;&gt;#&lt;/a&gt; 代码沙箱开发&lt;/h4&gt;
&lt;h5 id=&#34;接口定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口定义&#34;&gt;#&lt;/a&gt; 接口定义&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;定义代码沙箱接口，提高通用性，接口规范&lt;/li&gt;
&lt;li&gt;项目只调用接口，不调用具体的实现类，这样在使用其他代码沙箱实现类时，就不用修改名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lonbox Builder 注解：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;@Builder 构造器&lt;/li&gt;
&lt;li&gt;@NoArgsConstructor 无参构造条件&lt;/li&gt;
&lt;li&gt;@AllArgsConstructor 为当前类添加所有类都有的构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加了以上注解的类，在新建对象时，可以不用 new，直接使用.builder 构建，在构建时就可以传入参数，链式&lt;/p&gt;
&lt;h5 id=&#34;三种代码沙箱的实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种代码沙箱的实现方式&#34;&gt;#&lt;/a&gt; 三种代码沙箱的实现方式&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本地样例代码沙箱&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程代码沙箱&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三方代码沙箱&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计模式&#34;&gt;#&lt;/a&gt; 设计模式&lt;/h5&gt;
&lt;p&gt;工厂模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据用户传入的字符串参数来生成相应的代码沙箱实现类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;    public static CodeSandbox newInstance(String type) &amp;#123;
        switch (type) &amp;#123;
            case &amp;quot;remote&amp;quot;:
                return new RemoteCodeSandbox();
            case &amp;quot;thirdParty&amp;quot;:
                return new ThirdPartyCodeSandbox();
            default:
                return new ExampleCodeSandbox();
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果确认代码沙箱示例不会出现线程安全问题，可以使用单例工程模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代理模式&lt;/p&gt;
&lt;p&gt;代码沙箱能力增强&lt;/p&gt;
&lt;p&gt;如当我们需要在调用代码沙箱前，输出请求参数日志，在代码沙箱调用后，输出响应日志&lt;/p&gt;
&lt;p&gt;避免重复的编写 log 代码，执行 log，使用代理模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供一个 Proxy ，来增强代码沙箱的能力&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694275758016.png&#34; alt=&#34;1694275758016&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实现被代理的接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过构造函数接受被代理接口的实现类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用类代理接口的实现类，在调用前后对其新增功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;被代理接口的定义可以使用 final ，只会被定义一次&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;    private final CodeSandbox codeSandbox;


    public CodeSandboxProxy(CodeSandbox codeSandbox) &amp;#123;
        this.codeSandbox = codeSandbox;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;策略模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#策略模式&#34;&gt;#&lt;/a&gt; 策略模式&lt;/h5&gt;
&lt;h5 id=&#34;参数配置化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数配置化&#34;&gt;#&lt;/a&gt; 参数配置化&lt;/h5&gt;
&lt;p&gt;把项目中的一些可以交给用户去自定义的选项或字符串，写到配置文件中去，这样开发者只需要修改配置文件，而不用去看代码就可以使用更多功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在配置文件 application.yml 中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-YML&#34;&gt;# 参数配置化
testValue:
  type: te
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在需要调用该参数的地方使用 @Value 注解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;@Value(&amp;quot;$&amp;#123;testValue.type: example&amp;#125;&amp;quot;)
private String type;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;判题服务完整开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判题服务完整开发&#34;&gt;#&lt;/a&gt; 判题服务完整开发&lt;/h4&gt;
&lt;h5 id=&#34;判题服务流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判题服务流程&#34;&gt;#&lt;/a&gt; 判题服务流程：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;传入题目 id，获取对应题目信息、提交信息&lt;/li&gt;
&lt;li&gt;如果判题状态不为等待中，就不用再次判题&lt;/li&gt;
&lt;li&gt;修改题目判题状态（改为判题中），只有状态为等待中才进行判题&lt;/li&gt;
&lt;li&gt;调用代码沙箱，获取返回结果&lt;/li&gt;
&lt;li&gt;根据代码沙箱的返回结果设置题目的判题状态和信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;策略模式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#策略模式-2&#34;&gt;#&lt;/a&gt; 策略模式&lt;/h5&gt;
&lt;p&gt;不同的编程语言需要的判题限制可能是不同的&lt;/p&gt;
&lt;p&gt;采用策略模式，根据不同的情况使用不同的策略&lt;/p&gt;
&lt;h4 id=&#34;代码沙箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码沙箱&#34;&gt;#&lt;/a&gt; 代码沙箱&lt;/h4&gt;
&lt;h5 id=&#34;核心实现流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心实现流程&#34;&gt;#&lt;/a&gt; 核心实现流程&lt;/h5&gt;
&lt;p&gt;知道 Java 代码的执行过程、&lt;/p&gt;
&lt;p&gt;Java 进程执行管理类：Process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把用户的代码保存为文件&lt;/li&gt;
&lt;li&gt;编译代码，得到 class 文件&lt;/li&gt;
&lt;li&gt;执行代码，得到输出结果&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;代码沙箱docker实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码沙箱docker实现&#34;&gt;#&lt;/a&gt; 代码沙箱 Docker 实现&lt;/h4&gt;
&lt;h5 id=&#34;docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker&#34;&gt;#&lt;/a&gt; Docker&lt;/h5&gt;
&lt;p&gt;为什么使用 Docker：把不同的程序与宿主机进行隔离，使得某个程序的执行不会影响到系统本机&lt;/p&gt;
&lt;h5 id=&#34;消息队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息队列&#34;&gt;#&lt;/a&gt; 消息队列&lt;/h5&gt;
&lt;p&gt;耦合度高&lt;/p&gt;
&lt;p&gt;遇到的问题：&lt;/p&gt;
&lt;p&gt;远程开发的时候，因为 docker 是需要安装到 linux 系统上的，使用 ubuntu，在写 docker 代码的时候需要远程连接并且能运行，idea 自己带的一个连接工具只能修改远端代码，但是无法使用 ubuntu 的环境运行，也就是在 windows 系统上无法运行，因为没有安装 docker，然后 idea2021.3 版本以后新出了一个 remote development 能进行远程运行，就去下载了 2021.3 版本，下完后发现使用不是很方便，很多配置环境的设置都找不到，然后又去下载了 jetbrains，使用这个进行远程开发，这个和 remote development 其实是一样的，只是和 idea 分离开，界面也更加友好，在成功连接后又下载 maven 依赖，第一个出现的问题是下载速度慢，而且下完之后会出现有部分依赖无法找到的情况，然后又上网找资料，发现是 maven3.8.1 以上会有一个不安全连接的限制，又去修改 maven 的 settings 文件，依赖成功下好后又出现 pom 文件不暴红，但是 java 文件引入这些依赖的时候有爆红，试过清空缓存，重启都没有解决，最后没办法了把 ubuntu 的远程文件全部清空重头来一遍就莫名其妙的解决了，&lt;/p&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="note" scheme="https://wlp1231.cn/categories/the-tutorial/note/" />
        <updated>2023-09-12T16:06:44.523Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/note/%E7%AE%97%E6%B3%95/</id>
        <title>算法</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/note/%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;h4 id=&#34;算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算法&#34;&gt;#&lt;/a&gt; 算法&lt;/h4&gt;
&lt;h5 id=&#34;链表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链表&#34;&gt;#&lt;/a&gt; 链表&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;1. 链表倒序
非递归
ArrayList 的 add方法可以指定插入位置
顺序查询ListNode.next，存入ArrayList的第一个位置，返回ArrayList
递归
首先传入待倒序链表
对链表判空
对ListNode.next调用倒序函数
把ListNode.val传给ArrayList
    
2. 链表反转——双链表
    创建新链表 ListNode newnode = null
    对反转链表head判空
    存temp = head.next
    把head.next指向newNode // 成为了新的链表
    把head给newNode
    head = temp //变回原来的链表
    
3. 合并排序列表——哨兵节点
    ListNode a = new ListNode(0);
	ListNode b = a;

4. 公共节点——历遍所有节点，有公共节点必然会同时到达公共节点
        ListNode l1 = pHead1;
        ListNode l2 = pHead2;
历遍所有节点，直到l1 = l2
    三元运算符
    
5. 链表中环的入口
    快链表和慢链表，有环会相遇，无环快链表指向null
    有环，初始化快链表，以相同的速度历遍，再次相遇的点为环入口
    
6. 倒数第K个节点
    先行一步，快链表比快链表先走K步
    
7. 删除重复节点
    Map&amp;lt;Integer,Integer&amp;gt; mp = new HashMap&amp;lt;&amp;gt;()
    使用put和get方法
    历遍，使用哈希表记录每个值出现的次数
    再次历遍，删除次数不等于1的节点
    

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;其他算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他算法&#34;&gt;#&lt;/a&gt; 其他算法&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;字符串：
    工具：
    charAt（） 比较使用 == &#39;&#39;
    HashMap&amp;lt;Character,Integer&amp;gt;
    StringBuilder
    StringBuffer
    equalsIgnoreCase // 不缺分大小写
    toUpperCase() // 转大写
    toLowerCase() // 转小写
    char转换为String String.valueOf()
    cahr 通过 -32 转小写 +32 转大写
    cahr 也可通过Character 的toUpperCase() 和 toLowerCase() 妆花大小写
    String.substring(i) // 截取i及之后的字符串
    String.substring(i,j) // 截取i 到j-1间的字符串
    a.CompareTo(b) // 比较字符串大小,拼接时shi&#39;y，&amp;gt;0 a &amp;gt; b; &amp;lt;0 a &amp;lt; b 
数组：
    工具：
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;输入输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入输出&#34;&gt;#&lt;/a&gt; 输入输出&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;System.in
    Scanner in = new Scanner(System.in)
    in.next() // 读取到下一个非空字符
    in.nextLine() // 读取一整行，直到有换行符（回车），包括空格和换行符
    in.nextInt // 整数输入
    in.next(),charAt(0) // 字符的输入
    in.nextFloat() // 浮点型的输入
    in.hasNext() // 以空格
    in.hasNextLine() // 以回车作为结束标志
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;进制转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进制转换&#34;&gt;#&lt;/a&gt; 进制转换：&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;//10进制转换 16进制
 System.out.println(Integer.toHexString(val));
 System.out.println(String.format(&amp;quot;%x&amp;quot;, val));
 //10进制转换 8进制
 System.out.println(Integer.toOctalString(val));
 System.out.println(String.format(&amp;quot;%o&amp;quot;, val));
 //10进制转换 2进制
 System.out.println(Integer.toBinaryString(val));
 
 //16进制转换 10进制
 System.out.println(Integer.valueOf(&amp;quot;f&amp;quot;, 16));
 //8进制转换 10进制
 System.out.println(Integer.valueOf(&amp;quot;11&amp;quot;, 8));
 //2进制转换 10进制
 System.out.println(Integer.valueOf(&amp;quot;0101&amp;quot;, 2));

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;递归-回溯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#递归-回溯&#34;&gt;#&lt;/a&gt; 递归 + 回溯&lt;/h5&gt;
&lt;p&gt;递归：&lt;/p&gt;
&lt;p&gt;把一个大型问题层层转化为一个与原问题相似的小问题&lt;/p&gt;
&lt;p&gt;如果是线性递归，子问题直接回到父问题，不需要回溯&lt;/p&gt;
&lt;p&gt;如果是树形递归，父问题有很多分支，需要从子问题回到父问题，进入另一个子问题，需要回溯父问题的状态，才能进入下一个子问题&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;1. 没有重复项数字的全排列
    全排列：对数组元素进行元素交换，时每一种排列都可能出现
    思路：每个元素都放到第一位进行历遍排序
    递归条件：
    1. 终止条件：要交换位置的下标到了数组最后一位，结束本次排序
    2. 返回值：把前面已经确认好位置的元素返回给父问题
    3. 本级任务：历遍从它开始的后续元素
    
    全排列：
    1. 当待排序数被取完时结束
    2. 对每一个数进行标记，取出作为第一个元素单独存放，inedx
    3. 执行递归，依次把剩余的数取出放到标记数后面
    4. 在删除的位置恢复被取出的数
    5. 删除上一次被标记数 index.size-1
    
有重复数，递归+回溯+hashmap  
import java.util.*;


public class Solution &amp;#123;
    ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; ans = new ArrayList&amp;lt;&amp;gt;();
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param num int整型一维数组 
     * @return int整型ArrayList&amp;lt;ArrayList&amp;lt;&amp;gt;&amp;gt;
     */
    public ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; permuteUnique (int[] num) &amp;#123;
        // write code here
        Arrays.sort(num);
        ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        for(int n : num)&amp;#123;
            list.add(n);
        &amp;#125;
        ArrayList&amp;lt;Integer&amp;gt; index = new ArrayList&amp;lt;&amp;gt;();
        recursion(list,index);
        LinkedHashMap&amp;lt;ArrayList&amp;lt;Integer&amp;gt;, Integer&amp;gt; map = new LinkedHashMap&amp;lt;&amp;gt;();
        for(int i = 0; i &amp;lt; ans.size(); i++)&amp;#123;
            map.put(ans.get(i),map.getOrDefault(ans.get(i),0)+1);
        &amp;#125;
        
        ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; newans = new ArrayList&amp;lt;&amp;gt;();
        Set&amp;lt;Map.Entry&amp;lt;ArrayList&amp;lt;Integer&amp;gt;,Integer&amp;gt;&amp;gt; en = map.entrySet();
        for(Map.Entry&amp;lt;ArrayList&amp;lt;Integer&amp;gt;,Integer&amp;gt; e : en)&amp;#123;
            newans.add(e.getKey());
        &amp;#125;
        return newans;
        // return ans;
    &amp;#125;

    public void recursion(ArrayList&amp;lt;Integer&amp;gt; list,ArrayList&amp;lt;Integer&amp;gt; index)&amp;#123;
        if(list.isEmpty())&amp;#123;
            ans.add(new ArrayList&amp;lt;Integer&amp;gt;(index));
        &amp;#125;else&amp;#123;
            for(int i = 0; i &amp;lt; list.size(); i++)&amp;#123;
                Integer temp = list.remove(i);
                index.add(temp);
                recursion(list,index);
                list.add(i,temp);
                index.remove(index.size()-1);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;dfs-深度优先搜索算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dfs-深度优先搜索算法&#34;&gt;#&lt;/a&gt; DFS 深度优先搜索算法&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;1. 矩阵路径
    回溯 + 递归
    1. 确认结束条件
    2. 取出当前路径节点，防止回退路径
    3. 分别查询当前路径节点的四个方向，看是否符合要求
    4. 恢复当前路径节点
    5，返回
import java.util.*;


public class Solution &amp;#123;
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param matrix char字符型二维数组 
     * @param word string字符串 
     * @return bool布尔型
     */
    public boolean hasPath (char[][] matrix, String word) &amp;#123;
        // write code here
        char[] words = word.toCharArray();
        for(int i = 0; i &amp;lt; matrix.length; i++)&amp;#123;
            for(int j = 0; j &amp;lt; matrix[0].length; j++)&amp;#123;
                if(dfs(matrix,words,i,j,0))&amp;#123;
                    return true;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return false;
    &amp;#125;

    public boolean dfs(char[][] matrix, char[] words, int i, int j, int index)&amp;#123;
         
        if(index == words.length - 1)&amp;#123;
            return true;
        &amp;#125;
        char temp = matrix[i][j];
        matrix[i][j] = &#39;.&#39;;
        boolean res = dfs(matrix,words,i+1,j,index+1)||dfs(matrix,words,i-1,j,index+1)||dfs(matrix,words,i,j+1,index+1)||dfs(matrix,words,i,j-1,index+1);
        matrix[i][j] = temp;
        return res;


    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;栈-stack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈-stack&#34;&gt;#&lt;/a&gt; 栈 Stack&lt;/h5&gt;
&lt;h5 id=&#34;队列-deque&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#队列-deque&#34;&gt;#&lt;/a&gt; 队列 Deque&lt;/h5&gt;
&lt;h5 id=&#34;双向队列-arraydeque&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双向队列-arraydeque&#34;&gt;#&lt;/a&gt; 双向队列 ArrayDeque&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;1. 栈的压入弹出序列
    栈顶元素等于当前需要弹出的元素，则弹出，否则继续进栈
    第一个元素必须先进栈
    进栈次数要等于待进栈元素个数
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;动态规划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态规划&#34;&gt;#&lt;/a&gt; 动态规划&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-JAVA&#34;&gt;思想：
    将待求解问题分解成若干个相互关联的小问题，先求解小问题，然后从这些小问题的解得到原问题的解
    
1. 连续子数组的最大和
    如果加上后面一个元素，反而小于刚加上的元素，那么直接使用刚加上的元素作为新的子数组头
    若要输出最大和对应的子数组，则添加标记位 lift 和 right
    添加最大区间标记位
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="note" scheme="https://wlp1231.cn/categories/the-tutorial/note/" />
        <category term="note" scheme="https://wlp1231.cn/tags/note/" />
        <updated>2023-09-12T16:06:39.791Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/note/idea%20%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
        <title>小知识</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/note/idea%20%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
        <content type="html">&lt;h4 id=&#34;idea-小知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#idea-小知识&#34;&gt;#&lt;/a&gt; idea 小知识&lt;/h4&gt;
&lt;h4 id=&#34;插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插件&#34;&gt;#&lt;/a&gt; 插件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Maven Helper -- &amp;gt; 查看 maven 的依赖树&lt;/li&gt;
&lt;li&gt;MybatisX&lt;/li&gt;
&lt;li&gt;statistic --&amp;gt; 统计文件大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;快捷方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快捷方式&#34;&gt;#&lt;/a&gt; 快捷方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码片段&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1692771918092.png&#34; alt=&#34;uTools_1692771918092&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mybatis + pagehelper 进行分页&lt;/p&gt;
&lt;p&gt;mybatisplus 自己有分页插件&lt;/p&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="note" scheme="https://wlp1231.cn/categories/the-tutorial/note/" />
        <category term="note" scheme="https://wlp1231.cn/tags/note/" />
        <updated>2023-08-23T06:48:16.993Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/programming/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
        <title>MySQL安装与配置</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/programming/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
        <content type="html">&lt;h3 id=&#34;mysql安装与配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql安装与配置&#34;&gt;#&lt;/a&gt; mysql 安装与配置&lt;/h3&gt;
&lt;h4 id=&#34;mysql下载-httpsdownloadsmysqlcomarchivesinstaller&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql下载-httpsdownloadsmysqlcomarchivesinstaller&#34;&gt;#&lt;/a&gt; mysql 下载 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb3dubG9hZHMubXlzcWwuY29tL2FyY2hpdmVzL2luc3RhbGxlci8=&#34;&gt;https://downloads.mysql.com/archives/installer/&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107123925400.png&#34; alt=&#34;image-20230107123925400&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自定义安装&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125634171.png&#34; alt=&#34;image-20230107125634171&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125835214.png&#34; alt=&#34;image-20230107125835214&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125900797.png&#34; alt=&#34;image-20230107125900797&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125934160.png&#34; alt=&#34;image-20230107125934160&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130033250.png&#34; alt=&#34;image-20230107130033250&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130115968.png&#34; alt=&#34;image-20230107130115968&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130139616.png&#34; alt=&#34;image-20230107130139616&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130220517.png&#34; alt=&#34;image-20230107130220517&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130249376.png&#34; alt=&#34;image-20230107130249376&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130314661.png&#34; alt=&#34;image-20230107130314661&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130332108.png&#34; alt=&#34;image-20230107130332108&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130354483.png&#34; alt=&#34;image-20230107130354483&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130442681.png&#34; alt=&#34;image-20230107130442681&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130521264.png&#34; alt=&#34;image-20230107130521264&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130551721.png&#34; alt=&#34;image-20230107130551721&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130614669.png&#34; alt=&#34;image-20230107130614669&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130637605.png&#34; alt=&#34;image-20230107130637605&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130653957.png&#34; alt=&#34;image-20230107130653957&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130715736.png&#34; alt=&#34;image-20230107130715736&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证安装&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130906125.png&#34; alt=&#34;image-20230107130906125&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130951848.png&#34; alt=&#34;image-20230107130951848&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;配置环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置环境变量&#34;&gt;#&lt;/a&gt; 配置环境变量&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;找到 MySQL 安装路径，复制 bin 目录路径&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131154571.png&#34; alt=&#34;image-20230107131154571&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加变量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131258848.png&#34; alt=&#34;image-20230107131258848&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131316576.png&#34; alt=&#34;image-20230107131316576&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131546067.png&#34; alt=&#34;image-20230107131546067&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131636492.png&#34; alt=&#34;image-20230107131636492&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131720531.png&#34; alt=&#34;image-20230107131720531&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证，终端输入 &lt;code&gt;mysql -u root -p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107132748799.png&#34; alt=&#34;image-20230107132748799&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="编程" scheme="https://wlp1231.cn/categories/the-tutorial/programming/" />
        <category term="教程" scheme="https://wlp1231.cn/tags/%E6%95%99%E7%A8%8B/" />
        <category term="编程" scheme="https://wlp1231.cn/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="mysql" scheme="https://wlp1231.cn/tags/mysql/" />
        <updated>2023-01-27T02:04:36.879Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/programming/vscode%20c++%20%E9%85%8D%E7%BD%AE%20Windows/</id>
        <title>vscode c++ 配置 Windows</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/programming/vscode%20c++%20%E9%85%8D%E7%BD%AE%20Windows/"/>
        <content type="html">&lt;h4 id=&#34;vscode-c-配置-windows&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode-c-配置-windows&#34;&gt;#&lt;/a&gt; vscode c++ 配置 Windows&lt;/h4&gt;
&lt;h5 id=&#34;vscode安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode安装&#34;&gt;#&lt;/a&gt; vscode 安装&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v&#34;&gt;vscode 官网下载&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;安装位置可自定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;vscode配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode配置&#34;&gt;#&lt;/a&gt; vscode 配置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;插件安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;汉化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665229009280.png&#34; alt=&#34;uTools_1665229009280&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c++&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230054513.png&#34; alt=&#34;uTools_1665230054513&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;code run&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230109604.png&#34; alt=&#34;uTools_1665230109604&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建新文件夹，创建 cpp 文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230392381.png&#34; alt=&#34;uTools_1665230392381&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MinGW 安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWluZ3ctdzY0L2ZpbGVzL21pbmd3LXc2NC9taW5ndy13NjQtcmVsZWFzZS8=&#34;&gt;MinGW 官网下载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230644695.png&#34; alt=&#34;uTools_1665230644695&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在自己想要存放的位置解压，复制存放路径，需进入到 bin 目录，如 D:\code\sdk\mingw64\bin&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230771519.png&#34; alt=&#34;uTools_1665230771519&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置路径，进入此电脑，鼠标右键，点击属性&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230911995.png&#34; alt=&#34;uTools_1665230911995&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高级属性设置，环境变量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230996267.png&#34; alt=&#34;uTools_1665230996267&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统变量，path，编辑&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665231084586.png&#34; alt=&#34;uTools_1665231084586&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建，把复制的路径保存好&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665231156959.png&#34; alt=&#34;uTools_1665231156959&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmd 验证安装 gcc - v&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665231290607.png&#34; alt=&#34;uTools_1665231290607&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;运行cpp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行cpp&#34;&gt;#&lt;/a&gt; 运行 cpp&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重启 vscode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入 cpp 代码界面，鼠标右键，run code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按 F5 调试，一直选第一个，配置文件生成成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20221008202202.png&#34; alt=&#34;QQ截图20221008202202&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20221008202252.png&#34; alt=&#34;QQ截图20221008202252&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20221008202323.png&#34; alt=&#34;QQ截图20221008202323&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;vscode设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode设置&#34;&gt;#&lt;/a&gt; vscode 设置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输出到终端&lt;/p&gt;
&lt;p&gt;文件 --&amp;gt; 首选项 --&amp;gt; 设置，输入 run in terminal ，勾选 Whether to run code in Integrated Terminal&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;/p&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="编程" scheme="https://wlp1231.cn/categories/the-tutorial/programming/" />
        <category term="编程" scheme="https://wlp1231.cn/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="vscode" scheme="https://wlp1231.cn/tags/vscode/" />
        <updated>2023-01-11T05:38:35.208Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/programming/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</id>
        <title>socket通信机制详解</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/programming/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h1 id=&#34;socket通信机制详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket通信机制详解&#34;&gt;#&lt;/a&gt; socket 通信机制详解&lt;/h1&gt;
&lt;p&gt;我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页时，浏览器的进程怎么与 web 服务器通信的？当你用 &lt;code&gt;QQ&lt;/code&gt;  聊天时， &lt;code&gt;QQ&lt;/code&gt;  进程怎么与服务器或你好友所在的 &lt;code&gt;QQ&lt;/code&gt;  进程通信？这些都得靠 socket？那什么是 socket？socket 的类型有哪些？还有 socket 的基本函数，这些都是本文想介绍的。本文的主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、网络中进程之间如何通信？&lt;/li&gt;
&lt;li&gt;2、Socket 是什么？&lt;/li&gt;
&lt;li&gt;3、socket 的基本操作
&lt;ul&gt;
&lt;li&gt;3.1、socket () 函数&lt;/li&gt;
&lt;li&gt;3.2、bind () 函数&lt;/li&gt;
&lt;li&gt;3.3、listen ()、connect () 函数&lt;/li&gt;
&lt;li&gt;3.4、accept () 函数&lt;/li&gt;
&lt;li&gt;3.5、read ()、write () 函数等&lt;/li&gt;
&lt;li&gt;3.6、close () 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4、socket 中 TCP 的三次握手建立连接详解&lt;/li&gt;
&lt;li&gt;5、socket 中 TCP 的四次握手释放连接详解&lt;/li&gt;
&lt;li&gt;6、一个例子（实践一下）&lt;/li&gt;
&lt;li&gt;7、留下一个问题，欢迎大家回帖回答！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-网络中进程之间如何通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-网络中进程之间如何通信&#34;&gt;#&lt;/a&gt; 1、网络中进程之间如何通信？&lt;/h1&gt;
&lt;p&gt;本地的进程间通信（ &lt;code&gt;IPC&lt;/code&gt; ）有很多种方式，但可以总结为下面 4 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息传递（管道、FIFO、消息队列）&lt;/li&gt;
&lt;li&gt;同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）&lt;/li&gt;
&lt;li&gt;共享内存（匿名的和具名的）&lt;/li&gt;
&lt;li&gt;远程过程调用（ &lt;code&gt;Solaris&lt;/code&gt;  门和 &lt;code&gt;Sun RPC&lt;/code&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程 &lt;code&gt;PID&lt;/code&gt;  唯一标识一个进程，但是在网络中这是行不通的。其实 &lt;code&gt;TCP/IP&lt;/code&gt;  协议族已经帮我们解决了这个问题，网络层的 “ &lt;code&gt;**ip地址**”&lt;/code&gt;  可以唯一标识网络中的主机，而传输层的 “&lt;strong&gt;协议 + 端口&lt;/strong&gt;” 可以唯一标识主机中的应用程序（进程）。这样利用三元组（ &lt;code&gt;ip&lt;/code&gt;  地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;TCP/IP&lt;/code&gt;  协议的应用程序通常采用应用编程接口：UNIX BSD 的套接字（socket）和 UNIX System V 的 &lt;code&gt;TLI&lt;/code&gt;  已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用 socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说 “一切皆 socket”。&lt;/p&gt;
&lt;h1 id=&#34;2-什么是socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-什么是socket&#34;&gt;#&lt;/a&gt; 2、什么是 Socket？&lt;/h1&gt;
&lt;p&gt;上面我们已经知道网络中的进程是通过 socket 来通信的，那什么是 socket 呢？socket 起源于 Unix，而 Unix/Linux 基本哲学之一就是 “一切皆文件”，都可以用 “打开 open –&amp;gt; 读写 write/read –&amp;gt; 关闭 close” 模式来操作。我的理解就是 Socket 就是该模式的一个实现，socket 即是一种特殊的文件，一些 socket 函数就是对其进行的操作（读 / 写 IO、打开、关闭），这些函数我们在后面进行介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;socket一词的起源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket一词的起源&#34;&gt;#&lt;/a&gt; socket 一词的起源&lt;/h3&gt;
&lt;p&gt;在组网领域的首次使用是在 1970 年 2 月 12 日发布的文献&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9yZmMzMy8=&#34;&gt; IETF RFC33&lt;/span&gt; 中发现的，撰写者为 Stephen Carr、Steve Crocker 和 &lt;code&gt;Vint &lt;/code&gt; Cerf。根据美国计算机历史博物馆的记载， &lt;code&gt;Croker&lt;/code&gt;  写道：“命名空间的元素都可称为套接字接口。一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。” 计算机历史博物馆补充道：“这比 BSD 的套接字接口定义早了大约 12 年。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;3-socket的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-socket的基本操作&#34;&gt;#&lt;/a&gt; 3、socket 的基本操作&lt;/h1&gt;
&lt;p&gt;既然 socket 是 “open—write/read—close” 模式的一种实现，那么 socket 就提供了这些操作对应的函数接口。下面以 TCP 为例，介绍几个基本的 socket 接口函数。&lt;/p&gt;
&lt;h2 id=&#34;31-socket函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-socket函数&#34;&gt;#&lt;/a&gt; 3.1、socket () 函数&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;int socket(int domain, int type, int protocol);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;socket 函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而 ****socket ()**** 用于创建一个 socket 描述符（socket descriptor），它唯一标识一个 socket。这个 socket 描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。&lt;/p&gt;
&lt;p&gt;正如可以给 fopen 的传入不同参数值，以打开不同的文件。创建 socket 的时候，也可以指定不同的参数创建不同的 socket 描述符，socket 函数的三个参数分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;domain：即协议域，又称为协议族（family）。常用的协议族有， &lt;code&gt;AF_INET、AF_INET6、AF_LOCAL&lt;/code&gt; （或称 AF_UNIX，Unix 域 socket）、AF_ROUTE 等等。协议族决定了 socket 的地址类型，在通信中必须采用对应的地址，如 &lt;code&gt;AF_INET&lt;/code&gt;  决定了要用 &lt;code&gt;ipv4&lt;/code&gt;  地址（32 位的）与端口号（16 位的）的组合、AF_UNIX 决定了要用一个绝对路径名作为地址。&lt;/li&gt;
&lt;li&gt;type：指定 socket 类型。常用的 socket 类型有， &lt;code&gt;SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET&lt;/code&gt;  等等（socket 的类型有哪些？）。&lt;/li&gt;
&lt;li&gt;protocol：故名思意，就是指定协议。常用的协议有， &lt;code&gt;IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC&lt;/code&gt;  等，它们分别对应 TCP 传输协议、 &lt;code&gt;UDP&lt;/code&gt;  传输协议、 &lt;code&gt;STCP&lt;/code&gt;  传输协议、 &lt;code&gt;TIPC&lt;/code&gt;  传输协议（这个协议我将会单独开篇讨论！）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：并不是上面的 type 和 protocol 可以随意组合的，如 SOCK_STREAM 不可以跟 &lt;code&gt;IPPROTO_UDP&lt;/code&gt;  组合。当 protocol 为 0 时，会自动选择 type 类型对应的默认协议。&lt;/p&gt;
&lt;p&gt;当我们调用 ****socket**** 创建一个 socket 时，返回的 socket 描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用 bind () 函数，否则就当调用 connect ()、listen () 时系统会自动随机分配一个端口。&lt;/p&gt;
&lt;h2 id=&#34;32-bind函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-bind函数&#34;&gt;#&lt;/a&gt; 3.2、bind () 函数&lt;/h2&gt;
&lt;p&gt;正如上面所说 bind () 函数把一个地址族中的特定地址赋给 socket。例如对应 &lt;code&gt;AF_INET&lt;/code&gt; 、 &lt;code&gt;AF_INET6&lt;/code&gt;  就是把一个 &lt;code&gt;ipv4&lt;/code&gt;  或 &lt;code&gt;ipv6&lt;/code&gt;  地址和端口号组合赋给 socket。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数的三个参数分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sockfd：即 socket 描述字，它是通过 socket () 函数创建了，唯一标识一个 socket。bind () 函数就是将给这个描述字绑定一个名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addr：一个&lt;/p&gt;
&lt;p&gt;const&lt;/p&gt;
&lt;p&gt;struct&lt;/p&gt;
&lt;p&gt;sockaddr * 指针，指向要绑定给 sockfd 的协议地址。这个地址结构根据地址创建 socket 时的地址协议族的不同而不同，如 ipv4 对应的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct sockaddr_in &amp;#123;
    sa_family_t    sin_family; /* address family: AF_INET */
    in_port_t      sin_port;   /* port in network byte order */
    struct in_addr sin_addr;   /* internet address */
&amp;#125;;

/* Internet address. */
struct in_addr &amp;#123;
    uint32_t       s_addr;     /* address in network byte order */
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ipv6 对应的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct sockaddr_in6 &amp;#123; 
    sa_family_t     sin6_family;   /* AF_INET6 */ 
    in_port_t       sin6_port;     /* port number */ 
    uint32_t        sin6_flowinfo; /* IPv6 flow information */ 
    struct in6_addr sin6_addr;     /* IPv6 address */ 
    uint32_t        sin6_scope_id; /* Scope ID (new in 2.4) */ 
&amp;#125;;

struct in6_addr &amp;#123; 
    unsigned char   s6_addr[16];   /* IPv6 address */ 
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unix 域对应的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define UNIX_PATH_MAX    108

struct sockaddr_un &amp;#123; 
    sa_family_t sun_family;               /* AF_UNIX */ 
    char        sun_path[UNIX_PATH_MAX];  /* pathname */ 
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addrlen：对应的是地址的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常服务器在启动的时候都会绑定一个众所周知的地址（如 ip 地址 + 端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的 ip 地址组合。这就是为什么通常服务器端在 listen 之前会调用 bind ()，而客户端就不会调用，而是在 connect () 时由系统随机生成一个。&lt;/p&gt;
&lt;h3 id=&#34;网络字节序与主机字节序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络字节序与主机字节序&#34;&gt;#&lt;/a&gt; 网络字节序与主机字节序&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;**** 主机字节序 **** 就是我们平常说的大端和小端模式：不同的 CPU 有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的 Big- &lt;code&gt;Endian&lt;/code&gt;  和 &lt;code&gt;Little-Endian&lt;/code&gt;  的定义如下：&lt;/p&gt;
&lt;p&gt;a)  &lt;code&gt;Little-Endian&lt;/code&gt;  就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。&lt;/p&gt;
&lt;p&gt;b)  &lt;code&gt;Big-Endian&lt;/code&gt;  就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 网络字节序 *&lt;/strong&gt;&lt;/em&gt;：4 个字节的 32 bit 值以下面的次序传输：首先是 &lt;code&gt;0～7bit&lt;/code&gt; ，其次 &lt;code&gt;8～15bit&lt;/code&gt; ，然后 &lt;code&gt;16～23bit&lt;/code&gt; ，最后是 &lt;code&gt;24~31bit&lt;/code&gt; 。这种传输次序称作大端字节序。** 由于 &lt;code&gt;TCP/IP&lt;/code&gt;  首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。** 字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。&lt;/p&gt;
&lt;p&gt;所以：在将一个地址绑定到 socket 的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是 &lt;code&gt;Big-Endian&lt;/code&gt;  由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给 socket。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;33-listen-connect函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-listen-connect函数&#34;&gt;#&lt;/a&gt; 3.3、listen ()、connect () 函数&lt;/h2&gt;
&lt;p&gt;如果作为一个服务器，在调用 socket ()、bind () 之后就会调用 listen () 来监听这个 socket，如果客户端这时调用 connect () 发出连接请求，服务器端就会接收到这个请求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int listen(int sockfd, int backlog);
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;listen 函数的第一个参数即为要监听的 socket 描述字，第二个参数为相应 socket 可以排队的最大连接个数。socket () 函数创建的 socket 默认是一个主动类型的，listen 函数将 socket 变为被动类型的，等待客户的连接请求。&lt;/p&gt;
&lt;p&gt;connect 函数的第一个参数即为客户端的 socket 描述字，第二参数为服务器的 socket 地址，第三个参数为 socket 地址的长度。客户端通过调用 connect 函数来建立与 TCP 服务器的连接。&lt;/p&gt;
&lt;h2 id=&#34;34-accept函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-accept函数&#34;&gt;#&lt;/a&gt; 3.4、accept () 函数&lt;/h2&gt;
&lt;p&gt;TCP 服务器端依次调用 socket ()、bind ()、listen () 之后，就会监听指定的 socket 地址了。TCP 客户端依次调用 socket ()、connect () 之后就想 TCP 服务器发送了一个连接请求。TCP 服务器监听到这个请求之后，就会调用 accept () 函数取接收请求，这样连接就建立好了。之后就可以开始网络 I/O 操作了，即类同于普通文件的读写 I/O 操作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;accept 函数的第一个参数为服务器的 socket 描述字，第二个参数为指向 struct sockaddr * 的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果 accpet 成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的 TCP 连接。&lt;/p&gt;
&lt;p&gt;注意：accept 的第一个参数为服务器的 socket 描述字，是服务器开始调用 socket () 函数生成的，称为监听 socket 描述字；而 accept 函数返回的是已连接的 socket 描述字。一个服务器通常通常仅仅只创建一个监听 socket 描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接 socket 描述字，当服务器完成了对某个客户的服务，相应的已连接 socket 描述字就被关闭。&lt;/p&gt;
&lt;h2 id=&#34;35-read-write等函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-read-write等函数&#34;&gt;#&lt;/a&gt; 3.5、read ()、write () 等函数&lt;/h2&gt;
&lt;p&gt;万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络 I/O 进行读写操作了，即实现了网咯中不同进程之间的通信！网络 I/O 操作有下面几组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read()/write()&lt;/li&gt;
&lt;li&gt;recv()/send()&lt;/li&gt;
&lt;li&gt;readv()/writev()&lt;/li&gt;
&lt;li&gt;recvmsg()/sendmsg()&lt;/li&gt;
&lt;li&gt;recvfrom()/sendto()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我推荐使用 recvmsg ()/sendmsg () 函数，这两个函数是最通用的 I/O 函数，实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       #include &amp;lt;unistd.h&amp;gt;

       ssize_t read(int fd, void *buf, size_t count);
       ssize_t write(int fd, const void *buf, size_t count);

       #include &amp;lt;sys/types.h&amp;gt;
       #include &amp;lt;sys/socket.h&amp;gt;

       ssize_t send(int sockfd, const void *buf, size_t len, int flags);
       ssize_t recv(int sockfd, void *buf, size_t len, int flags);

       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                      const struct sockaddr *dest_addr, socklen_t addrlen);
       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                        struct sockaddr *src_addr, socklen_t *addrlen);

       ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;read 函数是负责从 &lt;code&gt;fd&lt;/code&gt;  中读取内容。当读成功时，read 返回实际所读的字节数，如果返回的值是 0 表示已经读到文件的结束了，小于 0 表示出现了错误。如果错误为 &lt;code&gt;EINTR&lt;/code&gt;  说明读是由中断引起的，如果是 &lt;code&gt;ECONNREST&lt;/code&gt;  表示网络连接出了问题。&lt;/p&gt;
&lt;p&gt;write 函数将 &lt;code&gt;buf&lt;/code&gt;  中的 &lt;code&gt;nbytes&lt;/code&gt;  字节内容写入文件描述符 &lt;code&gt;fd&lt;/code&gt; . 成功时返回写的字节数。失败时返回 - 1，并设置 &lt;code&gt;errno&lt;/code&gt;  变量。 在网络程序中，当我们向套接字文件描述符写时有俩种可能。1) write 的返回值大于 0，表示写了部分或者是全部的数据。2) 返回的值小于 0，此时出现了错误。我们要根据错误类型来处理。如果错误为 &lt;code&gt;EINTR&lt;/code&gt;  表示在写的时候出现了中断错误。如果为 &lt;code&gt;EPIPE&lt;/code&gt;  表示网络连接出现了问题 (对方已经关闭了连接)。&lt;/p&gt;
&lt;p&gt;其它的我就不一一介绍这几对 I/O 函数了，具体参见 man 文档或者 baidu、Google，下面的例子中将使用到 send/recv。&lt;/p&gt;
&lt;h2 id=&#34;36-close函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-close函数&#34;&gt;#&lt;/a&gt; 3.6、close () 函数&lt;/h2&gt;
&lt;p&gt;在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的 socket 描述字，好比操作完打开的文件要调用 fclose 关闭打开的文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;
int close(int fd);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;close 一个 TCP socket 的缺省行为时把该 socket 标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为 read 或 write 的第一个参数。&lt;/p&gt;
&lt;p&gt;注意：close 操作只是使相应 socket 描述字的引用计数 - 1，只有当引用计数为 0 的时候，才会触发 TCP 客户端向服务器发送终止连接请求。&lt;/p&gt;
&lt;h1 id=&#34;4-socket中tcp的三次握手建立连接详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-socket中tcp的三次握手建立连接详解&#34;&gt;#&lt;/a&gt; 4、socket 中 TCP 的三次握手建立连接详解&lt;/h1&gt;
&lt;p&gt;我们知道 tcp 建立连接要进行 “三次握手”，即交换三个分组。大致流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端向服务器发送一个 SYN J&lt;/li&gt;
&lt;li&gt;服务器向客户端响应一个 SYN K，并对 SYN J 进行确认 &lt;code&gt;ACK J+1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端再想服务器发一个确认 &lt;code&gt;ACK K+1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有就完了三次握手，但是这个三次握手发生在 socket 的那几个函数中呢？请看下图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png&#34;&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157476286.png&#34; alt=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图 1、socket 中发送的 TCP 三次握手&lt;/p&gt;
&lt;p&gt;从图中可以看出，当客户端调用 connect 时，触发了连接请求，向服务器发送了 SYN J 包，这时 connect 进入阻塞状态；服务器监听到连接请求，即收到 SYN J 包，调用 accept 函数接收请求向客户端发送 SYN K ， &lt;code&gt;ACK J+1&lt;/code&gt; ，这时 accept 进入阻塞状态；客户端收到服务器的 SYN K ， &lt;code&gt;ACK J+1&lt;/code&gt;  之后，这时 connect 返回，并对 SYN K 进行确认；服务器收到 &lt;code&gt;ACK K+1&lt;/code&gt;  时，accept 返回，至此三次握手完毕，连接建立。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：客户端的 connect 在三次握手的第二个次返回，而服务器端的 accept 在三次握手的第三次返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;5-socket中tcp的四次握手释放连接详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-socket中tcp的四次握手释放连接详解&#34;&gt;#&lt;/a&gt; 5、socket 中 TCP 的四次握手释放连接详解&lt;/h1&gt;
&lt;p&gt;上面介绍了 socket 中 TCP 的三次握手建立过程，及其涉及的 socket 函数。现在我们介绍 socket 中的四次握手释放连接的过程，请看下图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157487616.png&#34;&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157494693.png&#34; alt=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图 2、socket 中发送的 TCP 四次握手&lt;/p&gt;
&lt;p&gt;图示过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某个应用进程首先调用 close 主动关闭连接，这时 TCP 发送一个 FIN M；&lt;/li&gt;
&lt;li&gt;另一端接收到 FIN M 之后，执行被动关闭，对这个 FIN 进行确认。它的接收也作为文件结束符传递给应用进程，因为 FIN 的接收意味着应用进程在相应的连接上再也接收不到额外数据；&lt;/li&gt;
&lt;li&gt;一段时间之后，接收到文件结束符的应用进程调用 close 关闭它的 socket。这导致它的 TCP 也发送一个 FIN N；&lt;/li&gt;
&lt;li&gt;接收到这个 FIN 的源发送端 TCP 对它进行确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样每个方向上都有一个 &lt;code&gt;FIN&lt;/code&gt;  和 &lt;code&gt;ACK&lt;/code&gt; 。&lt;/p&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="编程" scheme="https://wlp1231.cn/categories/the-tutorial/programming/" />
        <category term="编程" scheme="https://wlp1231.cn/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="socket" scheme="https://wlp1231.cn/tags/socket/" />
        <updated>2023-01-11T05:38:35.206Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/programming/socket-1/</id>
        <title>socket-1</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/programming/socket-1/"/>
        <content type="html">&lt;h1 id=&#34;套接字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#套接字&#34;&gt;#&lt;/a&gt; 套接字&lt;/h1&gt;
&lt;h4 id=&#34;socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket&#34;&gt;#&lt;/a&gt; socket&lt;/h4&gt;
&lt;p&gt;所谓套接字 (Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中文名&lt;/p&gt;
&lt;p&gt;套接字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外文名&lt;/p&gt;
&lt;p&gt;socket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实  质&lt;/p&gt;
&lt;p&gt;两个网络各自通信连接中的端点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类  型&lt;/p&gt;
&lt;p&gt;流式套接字、数据报套接字和原始套接字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作  用&lt;/p&gt;
&lt;p&gt;完成两个应用程序之间的数据传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学  科&lt;/p&gt;
&lt;p&gt;计算机网络&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录&#34;&gt;#&lt;/a&gt; 目录&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;1 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzE=&#34;&gt;简介&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzI=&#34;&gt;表示方法&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzM=&#34;&gt;主要类型&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzQ=&#34;&gt;工作流程&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzU=&#34;&gt;主要特点&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzY=&#34;&gt;套接字的引入&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;套接字是通信的基石，是支持&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9UQ1AlMkZJUCVFNSU4RCU4RiVFOCVBRSVBRS8yMTI5MTU=&#34;&gt; TCP/IP 协议&lt;/span&gt;的路通信的基本操作单元。可以将套接字看作不同主机间的进程进行双间通信的端点，它构成了单个主机内及整个网络间的编程界面。套接字存在于通信域中，通信域是为了处理一般的线程通过套接字通信而引进的一种抽象概念。套接字通常和同一个域中的套接字交换数据 (数据交换也可能穿越域的界限，但这时一定要执行某种解释程序)，各种进程使用这个相同的域互相之间用 Internet 协议簇来进行通信。&lt;/p&gt;
&lt;p&gt;Socket (套接字) 可以看成是两个网络应用程序进行通信时，各自通信连接中的端点，这是一个逻辑上的概念。它是网络环境中&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkYlOUIlRTclQTglOEIlRTklOTclQjQlRTklODAlOUElRTQlQkYlQTEvMTIzNTkyMw==&#34;&gt;进程间通信&lt;/span&gt;的 &lt;code&gt;API&lt;/code&gt;  (应用程序编程接口)，也是可以被命名和寻址的通信端点，使用中的每一个套接字都有其类型和一个与之相连进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 Socket 中，该 Socket 通过与&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTElRTclQkIlOUMlRTYlOEUlQTUlRTUlOEYlQTMlRTUlOEQlQTEvOTc2NDIzMA==&#34;&gt;网络接口卡&lt;/span&gt; ( &lt;code&gt;NIC&lt;/code&gt; ) 相连的传输介质将这段信息送到另外一台主机的 Socket 中，使对方能够接收到这段信息。 Socket 是由 &lt;code&gt;IP&lt;/code&gt;  地址和端口结合的，提供向应用层进程传送数据包的机制  。&lt;/p&gt;
&lt;h2 id=&#34;表示方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示方法&#34;&gt;#&lt;/a&gt; 表示方法&lt;/h2&gt;
&lt;p&gt;套接字 Socket=（ &lt;code&gt;IP&lt;/code&gt;  地址：端口号），套接字的表示方法是点分十进制的 &lt;code&gt;lP&lt;/code&gt;  地址后面写上端口号，中间用冒号或逗号隔开。每一个传输层连接唯一地被通信两端的两个端点（即两个套接字）所确定。例如：如果 &lt;code&gt;IP&lt;/code&gt;  地址是 210.37.145.1，而端口号是 23，那么得到套接字就是 ( &lt;code&gt;210.37.145.1:23&lt;/code&gt; )。&lt;/p&gt;
&lt;h2 id=&#34;主要类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要类型&#34;&gt;#&lt;/a&gt; 主要类型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 流套接字 (SOCK_STREAM)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkMlQTAlRTglQkUlOTMlRTYlOEUlQTclRTUlODglQjYlRTUlOEQlOEYlRTglQUUlQUUvOTcyNzc0MQ==&#34;&gt;传输控制协议&lt;/span&gt;，即 TCP (The Transmission Control Protocol) 协议  。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 数据报套接字 ( &lt;code&gt;SOCK_DGRAM&lt;/code&gt; )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性，数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。数据报套接字使用 &lt;code&gt;UDP&lt;/code&gt; (  &lt;code&gt;User DatagramProtocol&lt;/code&gt; ) 协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理  。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 原始套接字 (SOCK_RAW)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原始套接字与标准套接字 (标准套接字指的是前面介绍的流套接字和数据报套接字) 的区别在于：原始套接字可以读写内核没有处理的 &lt;code&gt;IP&lt;/code&gt;  数据包，而流套接字只能读取 TCP 协议的数据，数据报套接字只能读取 &lt;code&gt;UDP&lt;/code&gt;  协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接  。&lt;/p&gt;
&lt;h2 id=&#34;工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作流程&#34;&gt;#&lt;/a&gt; 工作流程&lt;/h2&gt;
&lt;p&gt;要通过互联网进行通信，至少需要一对套接字，其中一个运行于客户端，我们称之为 Client Socket，另一个运行于服务器端，我们称之为 Server Socket 。&lt;/p&gt;
&lt;p&gt;根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤 ：&lt;/p&gt;
&lt;p&gt;(1) 服务器监听。&lt;/p&gt;
&lt;p&gt;(2) 客户端请求。&lt;/p&gt;
&lt;p&gt;(3) 连接确认 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 服务器监听&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓服务器监听，是指服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 客户端请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓客户端请求，是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端接字提出连接请求 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 连接确认&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓连接确认，是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，就会响应客户端套接字的请求，建立一个新的线程，并把服务器端套接字的描述发送给客户端。一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，接收其他客户端套接字的连接请求 。&lt;/p&gt;
&lt;h2 id=&#34;主要特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要特点&#34;&gt;#&lt;/a&gt; 主要特点&lt;/h2&gt;
&lt;p&gt;根据套接字的不同类型，可以将套接字调用分为面向连接服务和无连接服务 。&lt;/p&gt;
&lt;p&gt;面向连接服务的主要特点如下：&lt;/p&gt;
&lt;p&gt;(1) 数据传输过程必须经过建立连接、维护连接和释放连接 3 个阶段 ；&lt;/p&gt;
&lt;p&gt;(2) 在传输过程中，各分组不需要携带目的主机的地址  ；&lt;/p&gt;
&lt;p&gt;(3) 可靠性好，但由于协议复杂，通信效率不高 。&lt;/p&gt;
&lt;p&gt;面向无连接服务的主要特点如下：&lt;/p&gt;
&lt;p&gt;(1) 不需要连接的各个阶段  ；&lt;/p&gt;
&lt;p&gt;(2) 每个分组都携带完整的目的主机地址，在系统中独立传送  ；&lt;/p&gt;
&lt;p&gt;(3) 由于没有顺序控制，所以接收方的分组可能出现乱序、重复和丢失现象 ；&lt;/p&gt;
&lt;p&gt;(4) 通信效率高，但可靠性不能确保 。&lt;/p&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="编程" scheme="https://wlp1231.cn/categories/the-tutorial/programming/" />
        <category term="编程" scheme="https://wlp1231.cn/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="socket" scheme="https://wlp1231.cn/tags/socket/" />
        <updated>2023-01-11T05:38:35.205Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/programming/socket-2/</id>
        <title>socket-2</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/programming/socket-2/"/>
        <content type="html">&lt;h4 id=&#34;socket简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket简介&#34;&gt;#&lt;/a&gt; socket 简介&lt;/h4&gt;
&lt;p&gt;​		套接字 (Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。&lt;/p&gt;
&lt;p&gt;​		套接字是通信的基石，是支持&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9UQ1AlMkZJUCVFNSU4RCU4RiVFOCVBRSVBRS8yMTI5MTU=&#34;&gt; TCP/IP 协议&lt;/span&gt;的路通信的基本操作单元。可以将套接字看作不同主机间的进程进行双间通信的端点，它构成了单个主机内及整个网络间的编程界面。套接字存在于通信域中，通信域是为了处理一般的线程通过套接字通信而引进的一种抽象概念。套接字通常和同一个域中的套接字交换数据 (数据交换也可能穿越域的界限，但这时一定要执行某种解释程序)，各种进程使用这个相同的域互相之间用 Internet 协议簇来进行通信。&lt;/p&gt;
&lt;p&gt;​		套接字 (Socket) 可以看成是两个网络应用程序进行通信时，各自通信连接中的端点，这是一个逻辑上的概念。它是网络环境中&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkYlOUIlRTclQTglOEIlRTklOTclQjQlRTklODAlOUElRTQlQkYlQTEvMTIzNTkyMw==&#34;&gt;进程间通信&lt;/span&gt;的 &lt;code&gt;API&lt;/code&gt;  (应用程序编程接口)，也是可以被命名和寻址的通信端点，使用中的每一个套接字都有其类型和一个与之相连进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 Socket 中，该 Socket 通过与&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTElRTclQkIlOUMlRTYlOEUlQTUlRTUlOEYlQTMlRTUlOEQlQTEvOTc2NDIzMA==&#34;&gt;网络接口卡&lt;/span&gt; ( &lt;code&gt;NIC&lt;/code&gt; ) 相连的传输介质将这段信息送到另外一台主机的 Socket 中，使对方能够接收到这段信息。 Socket 是由 &lt;code&gt;IP&lt;/code&gt;  地址和端口结合的，提供向应用层进程传送数据包的机制 。&lt;/p&gt;
&lt;h4 id=&#34;表示方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表示方法&#34;&gt;#&lt;/a&gt; 表示方法&lt;/h4&gt;
&lt;p&gt;​		套接字 Socket=（ &lt;code&gt;IP&lt;/code&gt;  地址：端口号），套接字的表示方法是点分十进制的 &lt;code&gt;lP&lt;/code&gt;  地址后面写上端口号，中间用冒号或逗号隔开。每一个传输层连接唯一地被通信两端的两个端点（即两个套接字）所确定。例如：如果 &lt;code&gt;IP&lt;/code&gt;  地址是 210.37.145.1，而端口号是 23，那么得到套接字就是 ( &lt;code&gt;210.37.145.1:23&lt;/code&gt; )&lt;/p&gt;
&lt;h4 id=&#34;主要类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要类型&#34;&gt;#&lt;/a&gt; 主要类型&lt;/h4&gt;
&lt;h5 id=&#34;流套接字sock_stream&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流套接字sock_stream&#34;&gt;#&lt;/a&gt; 流套接字（&lt;strong&gt;SOCK_STREAM&lt;/strong&gt;）&lt;/h5&gt;
&lt;p&gt;​		流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkMlQTAlRTglQkUlOTMlRTYlOEUlQTclRTUlODglQjYlRTUlOEQlOEYlRTglQUUlQUUvOTcyNzc0MQ==&#34;&gt;传输控制协议&lt;/span&gt;，即 TCP (The Transmission Control Protocol) 协议&lt;/p&gt;
&lt;h5 id=&#34;数据报套接字sock_dgram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据报套接字sock_dgram&#34;&gt;#&lt;/a&gt; 数据报套接字（&lt;strong&gt; &lt;code&gt;SOCK_DGRAM&lt;/code&gt; &lt;/strong&gt;）&lt;/h5&gt;
&lt;p&gt;​		数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性，数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。数据报套接字使用 &lt;code&gt;UDP( User DatagramProtocol)&lt;/code&gt;  协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理&lt;/p&gt;
&lt;h5 id=&#34;原始套接字sock_raw&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原始套接字sock_raw&#34;&gt;#&lt;/a&gt; 原始套接字（&lt;strong&gt;SOCK_RAW&lt;/strong&gt;）&lt;/h5&gt;
&lt;p&gt;​		原始套接字与标准套接字 (标准套接字指的是前面介绍的流套接字和数据报套接字) 的区别在于：原始套接字可以读写内核没有处理的 IP 数据包，而流套接字只能读取 TCP 协议的数据，数据报套接字只能读取 UDP 协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接&lt;/p&gt;
&lt;h4 id=&#34;工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作流程&#34;&gt;#&lt;/a&gt; 工作流程&lt;/h4&gt;
&lt;p&gt;​		要通过互联网进行通信，至少需要一对套接字，其中一个运行于客户端，我们称之为 Client Socket，另一个运行于服务器端，我们称之为 Server Socket 。&lt;/p&gt;
&lt;p&gt;根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤  ：&lt;/p&gt;
&lt;p&gt;(1) 服务器监听。&lt;/p&gt;
&lt;p&gt;(2) 客户端请求。&lt;/p&gt;
&lt;p&gt;(3) 连接确认。&lt;/p&gt;
&lt;h5 id=&#34;1服务器监听&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1服务器监听&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1. 服务器监听&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​		所谓服务器监听，是指服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态 。&lt;/p&gt;
&lt;h5 id=&#34;2客户端请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2客户端请求&#34;&gt;#&lt;/a&gt; &lt;strong&gt;2. 客户端请求&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​		所谓客户端请求，是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端接字提出连接请求 。&lt;/p&gt;
&lt;h5 id=&#34;3连接确认&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3连接确认&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3. 连接确认&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​		所谓连接确认，是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，就会响应客户端套接字的请求，建立一个新的线程，并把服务器端套接字的描述发送给客户端。一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，接收其他客户端套接字的连接请求&lt;/p&gt;
&lt;h4 id=&#34;使用方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用方法&#34;&gt;#&lt;/a&gt; 使用方法&lt;/h4&gt;
&lt;h5 id=&#34;1创建一个socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1创建一个socket&#34;&gt;#&lt;/a&gt; 1. 创建一个 socket&lt;/h5&gt;
&lt;p&gt;​		&lt;mark&gt;创建函数&lt;/mark&gt;： &lt;code&gt;int socket(int family, int type, int protocol)&lt;/code&gt; ;&lt;br /&gt;
​		socket () 打开一个网络通讯端口，如果成功的话，就像 open () 一样返回一个文件描述符，应用程序可以像读写文件一样用 read/write 在网络上收发数据，&lt;mark&gt;如果 socket () 调用出错则返回 - 1&lt;/mark&gt;。对于 &lt;code&gt;IPv4&lt;/code&gt; ，family 参数指定为 &lt;code&gt;AF_INET&lt;/code&gt; 。对于 TCP 协议，type 参数指定为 SOCK_STREAM，表示面向流的传输协议。如果是 &lt;code&gt;UDP&lt;/code&gt;  协议，则 type 参数指定为 &lt;code&gt;SOCK_DGRAM&lt;/code&gt; ，表示面向数据报的传输协议。protocol 参数的介绍从略，指定为 0 即可。&lt;/p&gt;
&lt;h5 id=&#34;2绑定本机ip端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2绑定本机ip端口&#34;&gt;#&lt;/a&gt; 2. 绑定本机 &lt;code&gt;IP&lt;/code&gt;  端口&lt;/h5&gt;
&lt;h5 id=&#34;3bind绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3bind绑定&#34;&gt;#&lt;/a&gt; 3. &lt;code&gt;bind()&lt;/code&gt;  绑定&lt;/h5&gt;
&lt;p&gt;​		&lt;mark&gt;bind () 函数&lt;/mark&gt;： &lt;code&gt;int bind(int sockfd, const struct sockaddr *myaddr, socklen_t addrlen)&lt;/code&gt; ;&lt;br /&gt;
​		服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用 bind 绑定一个固定的网络地址和端口号。&lt;mark&gt;bind () 成功返回 0，失败返回 - 1&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;​		bind () 的作用是将参数 &lt;code&gt;sockfd&lt;/code&gt;  和 &lt;code&gt;myaddr&lt;/code&gt;  绑定在一起，使 &lt;code&gt;sockfd&lt;/code&gt;  这个用于网络通讯的文件描述符 (&lt;mark&gt;创建 socket 时的返回值&lt;/mark&gt;) 监听 &lt;code&gt;myaddr&lt;/code&gt;  所描述的&lt;mark&gt;地址和端口号&lt;/mark&gt; (对结构体初始化时所赋值)。 &lt;code&gt;struct sockaddr&lt;/code&gt;  * 是一个通用指针类型，&lt;mark&gt; &lt;code&gt;myaddr&lt;/code&gt;  参数实际上可以接受多种协议的 &lt;code&gt;sockaddr&lt;/code&gt;  结构体&lt;/mark&gt;，而它们的长度各不相同，所以需要第三个参数 &lt;code&gt;addrlen&lt;/code&gt; &lt;mark&gt; 指定结构体的长度&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;​		程序中对 &lt;code&gt;myaddr&lt;/code&gt;  参数是这样初始化的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;memset(&amp;amp;servaddr, 0, sizeof(servaddr));
servaddr.sin_family = AF_INET;
servaddr.sin_port = htons(5188);
servaddr.sin_addr.s_addr = htonl(INADDR_ANY); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		首先将整个结构体清零（也可以用 &lt;code&gt;bzero&lt;/code&gt;  函数），然后设置地址类型为 &lt;code&gt;AF_INET&lt;/code&gt; ，网络地址为 &lt;code&gt;INADDR_ANY&lt;/code&gt; ，这个宏表示本地的任意 &lt;code&gt;IP&lt;/code&gt;  地址，因为服务器可能有多个网卡，每个网卡也可能绑定多个 &lt;code&gt;IP&lt;/code&gt;  地址，这样设置可以在所有的 &lt;code&gt;IP&lt;/code&gt;  地址上监听，直到与某个客户端建立了连接时才确定下来到底用哪个 &lt;code&gt;IP&lt;/code&gt;  地址，端口号为 5188，可以自行定义，范围是从 1024 到 65535。&lt;/p&gt;
&lt;h5 id=&#34;4等待客户端的连接接收客户端数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4等待客户端的连接接收客户端数据&#34;&gt;#&lt;/a&gt; 4. 等待客户端的连接，接收客户端数据&lt;/h5&gt;
&lt;p&gt;​		&lt;mark&gt;监听函数&lt;/mark&gt;： &lt;code&gt;int listen(int sockfd, int backlog)&lt;/code&gt; ;&lt;br /&gt;
​		典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的 &lt;code&gt;accept()&lt;/code&gt;  返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未 &lt;code&gt;accept&lt;/code&gt;  的客户端就处于连接等待状态，listen () 声明 &lt;code&gt;sockfd&lt;/code&gt;  处于监听状态，并且最多允许有 &lt;code&gt;backlog&lt;/code&gt;  个客户端处于连接等待状态，如果接收到更多的连接请求就忽略。 &lt;code&gt;listen()&lt;/code&gt;  成功返回 0，失败返回 - 1。&lt;/p&gt;
&lt;p&gt;​		&lt;mark&gt;接受连接&lt;/mark&gt;： &lt;code&gt;int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen)&lt;/code&gt; ;&lt;br /&gt;
​		三方握手完成后，服务器调用 accept () 接受连接，如果服务器调用 &lt;code&gt;accept()&lt;/code&gt;  时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。 &lt;code&gt;cliaddr&lt;/code&gt;  是一个传出参数， &lt;code&gt;accept()&lt;/code&gt;  返回时传出客户端的地址和端口号。 &lt;code&gt;addrlen&lt;/code&gt;  参数是一个传入传出参数（ &lt;code&gt;value-result argument&lt;/code&gt; ），传入的是调用者提供的缓冲区 &lt;code&gt;cliaddr&lt;/code&gt;  的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给 &lt;code&gt;cliaddr&lt;/code&gt;  和 &lt;code&gt;addrlen&lt;/code&gt;  参数传 NULL，表示不关心客户端的地址。&lt;/p&gt;
&lt;h5 id=&#34;5数据接受与发送&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5数据接受与发送&#34;&gt;#&lt;/a&gt; 5. 数据接受与发送&lt;/h5&gt;
&lt;p&gt;调用网络 I/O 进行读写操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read()/write()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recv()/send()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;readv()/writev()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recvmsg()/sendmsg()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recvfrom()/sendto()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;recv()/send()&lt;/code&gt;  详解&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;函数&lt;/mark&gt;： &lt;code&gt;int recv( SOCKET s, char FAR *buf, int len, int flags )&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;不论是客户还是服务器应用程序都用 recv 函数从 TCP 连接的另一端接收数据。&lt;/p&gt;
&lt;p&gt;（1）第一个参数指定接收端套接字描述符；&lt;/p&gt;
&lt;p&gt;（2）第二个参数指明一个缓冲区，该缓冲区用来存放 recv 函数接收到的数据；&lt;/p&gt;
&lt;p&gt;（3）第三个参数指明 &lt;code&gt;buf&lt;/code&gt;  的长度；&lt;/p&gt;
&lt;p&gt;（4）第四个参数一般置 0。&lt;/p&gt;
&lt;p&gt;​		这里只描述同步 Socket 的 &lt;code&gt;recv&lt;/code&gt;  函数的执行流程。当应用程序调用 &lt;code&gt;recv&lt;/code&gt;  函数时， &lt;code&gt;recv&lt;/code&gt;  先等待 s 的发送缓冲中的数据被协议传送完毕，如果协议在传送 s 的发送缓冲中的数据时出现网络错误，那么 &lt;code&gt;recv&lt;/code&gt;  函数返回 SOCKET_ERROR，如果 s 的发送缓冲中没有数据或者数据被协议成功发送完毕后， &lt;code&gt;recv&lt;/code&gt;  先检查套接字 s 的接收缓冲区，如果 s 接收缓冲区中没有数据或者协议正在接收数据，那么 &lt;code&gt;recv&lt;/code&gt;  就一直等待，只到协议把数据接收完毕。当协议把数据接收完毕， &lt;code&gt;recv&lt;/code&gt;  函数就把 s 的接收缓冲中的数据 copy 到 &lt;code&gt;buf&lt;/code&gt;  中（注意协议接收到的数据可能大于 &lt;code&gt;buf&lt;/code&gt;  的长度，所以在这种情况下要调用几次 &lt;code&gt;recv&lt;/code&gt;  函数才能把 s 的接收缓冲中的数据 copy 完。 &lt;code&gt;recv&lt;/code&gt;  函数仅仅是 copy 数据，真正的接收数据是协议来完成的）， &lt;code&gt;recv&lt;/code&gt;  函数返回其实际 copy 的字节数。如果 &lt;code&gt;recv&lt;/code&gt;  在 copy 时出错，那么它返回 SOCKET_ERROR；如果 &lt;code&gt;recv&lt;/code&gt;  函数在等待协议接收数据时网络中断了，那么它返回 0。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;函数&lt;/mark&gt;： &lt;code&gt;int send( SOCKET s, const char FAR *buf, int len, int flags )&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;​		不论是客户还是服务器应用程序都用 send 函数来向 TCP 连接的另一端发送数据。&lt;/p&gt;
&lt;p&gt;​		客户程序一般用 send 函数向服务器发送请求，而服务器则通常用 send 函数来向客户程序发送应答。&lt;/p&gt;
&lt;p&gt;（1）第一个参数指定发送端&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTc=&#34;&gt;套接字&lt;/span&gt;描述符；&lt;/p&gt;
&lt;p&gt;（2）第二个参数指明一个存放应用程序要发送数据的缓冲区；&lt;/p&gt;
&lt;p&gt;（3）第三个参数指明实际要发送的数据的字节数；&lt;/p&gt;
&lt;p&gt;（4）第四个参数一般置 0。&lt;/p&gt;
&lt;p&gt;这里只描述同步 Socket 的 send 函数的执行流程。当调用该函数时，send 先比较待发送数据的长度 &lt;code&gt;len&lt;/code&gt;  和套接字 s 的发送缓冲的长度， 如果 &lt;code&gt;len&lt;/code&gt;  大于 s 的发送缓冲区的长度，该函数返回 SOCKET_ERROR；如果 &lt;code&gt;len&lt;/code&gt;  小于或者等于 s 的发送缓冲区的长度，那么 send 先检查协议是否正在发送 s 的发送缓冲中的数据，如果是就等待协议把数据发送完，如果协议还没有开始发送 s 的发送缓冲中的数据或者 s 的发送缓冲中没有数据，那么 send 就比较 s 的发送缓冲区的剩余空间和 &lt;code&gt;len&lt;/code&gt; ，如果 &lt;code&gt;len&lt;/code&gt;  大于剩余空间大小 send 就一直等待协议把 s 的发送缓冲中的数据发送完，如果 &lt;code&gt;len&lt;/code&gt;  小于剩余空间大小 send 就仅仅把 &lt;code&gt;buf&lt;/code&gt;  中的数据 copy 到剩余空间里（注意并不是 send 把 s 的发送缓冲中的数据传到连接的另一端的，而是协议的，send 仅仅是把 &lt;code&gt;buf&lt;/code&gt;  中的数据 copy 到 s 的发送缓冲区的剩余空间里）。&lt;/p&gt;
&lt;p&gt;如果 send 函数 copy 数据成功，就返回实际 copy 的字节数，如果 send 在 copy 数据时出现错误，那么 send 就返回 SOCKET_ERROR；如果 send 在等待协议传送数据时网络断开的话，那么 send 函数也返回 SOCKET_ERROR。&lt;/p&gt;
&lt;p&gt;要注意 send 函数把 &lt;code&gt;buf&lt;/code&gt;  中的数据成功 copy 到 s 的发送缓冲的剩余空间里后它就返回了，但是此时这些数据并不一定马上被传到连接的另一端。如果协议在后续的传送过程中出现网络错误的话，那么下一个 Socket 函数就会返回 SOCKET_ERROR。（每一个除 send 外的 Socket 函数在执行的最开始总要先等待套接字的发送缓冲中的数据被协议传送完毕才能继续，如果在等待时出现网络错误，那么该 Socket 函数就返回 SOCKET_ERROR）。&lt;/p&gt;
&lt;p&gt;使用声明：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include 

       ssize_t read(int fd, void *buf, size_t count);
       ssize_t write(int fd, const void *buf, size_t count);

       #include 
       #include 

       ssize_t send(int sockfd, const void *buf, size_t len, int flags);
       ssize_t recv(int sockfd, void *buf, size_t len, int flags);

       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                      const struct sockaddr *dest_addr, socklen_t addrlen);
       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                        struct sockaddr *src_addr, socklen_t *addrlen);

       ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		read 函数是负责从 &lt;code&gt;fd&lt;/code&gt;  中读取内容。当读成功时，read 返回实际所读的字节数，如果返回的值是 0 表示已经读到文件的结束了，小于 0 表示出现了错误。如果错误为 &lt;code&gt;EINTR&lt;/code&gt;  说明读是由中断引起的，如果是 &lt;code&gt;ECONNREST&lt;/code&gt;  表示网络连接出了问题。&lt;/p&gt;
&lt;p&gt;​		write 函数将 &lt;code&gt;buf&lt;/code&gt;  中的 &lt;code&gt;nbytes&lt;/code&gt;  字节内容写入文件描述符 &lt;code&gt;fd.&lt;/code&gt;  成功时返回写的字节 数。失败时返回 - 1，并设置 &lt;code&gt;errno&lt;/code&gt;  变量。在网络程序中，当我们向套接字文件描述符写时有俩种可能。1) write 的返回值大于 0，表示写了部分或者是 全部的数据。2) 返回的值小于 0，此时出现了错误。我们要根据错误类型来处理。如果错误为 &lt;code&gt;EINTR&lt;/code&gt;  表示在写的时候出现了中断错误。如果为 &lt;code&gt;EPIPE&lt;/code&gt;  表示 网络连接出现了问题 (对方已经关闭了连接)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;socket中tcp的三次握手建立连接详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket中tcp的三次握手建立连接详解&#34;&gt;#&lt;/a&gt; socket 中 TCP 的三次握手建立连接详解&lt;/h4&gt;
&lt;p&gt;tcp 建立连接要进行 “三次握手”，即交换三个分组。大致流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端向服务器发送一个 &lt;code&gt;SYN J&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;服务器向客户端响应一个 &lt;code&gt;SYN K&lt;/code&gt; ，并对 SYN J 进行确认 &lt;code&gt;ACK J+1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端再想服务器发一个确认 &lt;code&gt;ACK K+1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有就完了三次握手，但是这个三次握手发生在 socket 的那几个函数中呢？请看下图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png&#34;&gt;&lt;img data-src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20vc2t5bmV0LzIwMTAxMi8yMDEwMTIxMjIxNTc0NzYyODYucG5n&#34; alt=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="编程" scheme="https://wlp1231.cn/categories/the-tutorial/programming/" />
        <category term="编程" scheme="https://wlp1231.cn/tags/%E7%BC%96%E7%A8%8B/" />
        <category term="socket" scheme="https://wlp1231.cn/tags/socket/" />
        <updated>2023-01-11T05:38:35.205Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/note/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</id>
        <title>socket通信机制详解</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/note/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h1 id=&#34;socket通信机制详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket通信机制详解&#34;&gt;#&lt;/a&gt; socket 通信机制详解&lt;/h1&gt;
&lt;p&gt;我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页时，浏览器的进程怎么与 web 服务器通信的？当你用 &lt;code&gt;QQ&lt;/code&gt;  聊天时， &lt;code&gt;QQ&lt;/code&gt;  进程怎么与服务器或你好友所在的 &lt;code&gt;QQ&lt;/code&gt;  进程通信？这些都得靠 socket？那什么是 socket？socket 的类型有哪些？还有 socket 的基本函数，这些都是本文想介绍的。本文的主要内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、网络中进程之间如何通信？&lt;/li&gt;
&lt;li&gt;2、Socket 是什么？&lt;/li&gt;
&lt;li&gt;3、socket 的基本操作
&lt;ul&gt;
&lt;li&gt;3.1、socket () 函数&lt;/li&gt;
&lt;li&gt;3.2、bind () 函数&lt;/li&gt;
&lt;li&gt;3.3、listen ()、connect () 函数&lt;/li&gt;
&lt;li&gt;3.4、accept () 函数&lt;/li&gt;
&lt;li&gt;3.5、read ()、write () 函数等&lt;/li&gt;
&lt;li&gt;3.6、close () 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4、socket 中 TCP 的三次握手建立连接详解&lt;/li&gt;
&lt;li&gt;5、socket 中 TCP 的四次握手释放连接详解&lt;/li&gt;
&lt;li&gt;6、一个例子（实践一下）&lt;/li&gt;
&lt;li&gt;7、留下一个问题，欢迎大家回帖回答！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-网络中进程之间如何通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-网络中进程之间如何通信&#34;&gt;#&lt;/a&gt; 1、网络中进程之间如何通信？&lt;/h1&gt;
&lt;p&gt;本地的进程间通信（ &lt;code&gt;IPC&lt;/code&gt; ）有很多种方式，但可以总结为下面 4 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息传递（管道、FIFO、消息队列）&lt;/li&gt;
&lt;li&gt;同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）&lt;/li&gt;
&lt;li&gt;共享内存（匿名的和具名的）&lt;/li&gt;
&lt;li&gt;远程过程调用（ &lt;code&gt;Solaris&lt;/code&gt;  门和 &lt;code&gt;Sun RPC&lt;/code&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程 &lt;code&gt;PID&lt;/code&gt;  唯一标识一个进程，但是在网络中这是行不通的。其实 &lt;code&gt;TCP/IP&lt;/code&gt;  协议族已经帮我们解决了这个问题，网络层的 “ &lt;code&gt;**ip地址**”&lt;/code&gt;  可以唯一标识网络中的主机，而传输层的 “&lt;strong&gt;协议 + 端口&lt;/strong&gt;” 可以唯一标识主机中的应用程序（进程）。这样利用三元组（ &lt;code&gt;ip&lt;/code&gt;  地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;TCP/IP&lt;/code&gt;  协议的应用程序通常采用应用编程接口：UNIX BSD 的套接字（socket）和 UNIX System V 的 &lt;code&gt;TLI&lt;/code&gt;  已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用 socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说 “一切皆 socket”。&lt;/p&gt;
&lt;h1 id=&#34;2-什么是socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-什么是socket&#34;&gt;#&lt;/a&gt; 2、什么是 Socket？&lt;/h1&gt;
&lt;p&gt;上面我们已经知道网络中的进程是通过 socket 来通信的，那什么是 socket 呢？socket 起源于 Unix，而 Unix/Linux 基本哲学之一就是 “一切皆文件”，都可以用 “打开 open –&amp;gt; 读写 write/read –&amp;gt; 关闭 close” 模式来操作。我的理解就是 Socket 就是该模式的一个实现，socket 即是一种特殊的文件，一些 socket 函数就是对其进行的操作（读 / 写 IO、打开、关闭），这些函数我们在后面进行介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;socket一词的起源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket一词的起源&#34;&gt;#&lt;/a&gt; socket 一词的起源&lt;/h3&gt;
&lt;p&gt;在组网领域的首次使用是在 1970 年 2 月 12 日发布的文献&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9yZmMzMy8=&#34;&gt; IETF RFC33&lt;/span&gt; 中发现的，撰写者为 Stephen Carr、Steve Crocker 和 &lt;code&gt;Vint &lt;/code&gt; Cerf。根据美国计算机历史博物馆的记载， &lt;code&gt;Croker&lt;/code&gt;  写道：“命名空间的元素都可称为套接字接口。一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。” 计算机历史博物馆补充道：“这比 BSD 的套接字接口定义早了大约 12 年。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;3-socket的基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-socket的基本操作&#34;&gt;#&lt;/a&gt; 3、socket 的基本操作&lt;/h1&gt;
&lt;p&gt;既然 socket 是 “open—write/read—close” 模式的一种实现，那么 socket 就提供了这些操作对应的函数接口。下面以 TCP 为例，介绍几个基本的 socket 接口函数。&lt;/p&gt;
&lt;h2 id=&#34;31-socket函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-socket函数&#34;&gt;#&lt;/a&gt; 3.1、socket () 函数&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;int socket(int domain, int type, int protocol);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;socket 函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而 ****socket ()**** 用于创建一个 socket 描述符（socket descriptor），它唯一标识一个 socket。这个 socket 描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。&lt;/p&gt;
&lt;p&gt;正如可以给 fopen 的传入不同参数值，以打开不同的文件。创建 socket 的时候，也可以指定不同的参数创建不同的 socket 描述符，socket 函数的三个参数分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;domain：即协议域，又称为协议族（family）。常用的协议族有， &lt;code&gt;AF_INET、AF_INET6、AF_LOCAL&lt;/code&gt; （或称 AF_UNIX，Unix 域 socket）、AF_ROUTE 等等。协议族决定了 socket 的地址类型，在通信中必须采用对应的地址，如 &lt;code&gt;AF_INET&lt;/code&gt;  决定了要用 &lt;code&gt;ipv4&lt;/code&gt;  地址（32 位的）与端口号（16 位的）的组合、AF_UNIX 决定了要用一个绝对路径名作为地址。&lt;/li&gt;
&lt;li&gt;type：指定 socket 类型。常用的 socket 类型有， &lt;code&gt;SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET&lt;/code&gt;  等等（socket 的类型有哪些？）。&lt;/li&gt;
&lt;li&gt;protocol：故名思意，就是指定协议。常用的协议有， &lt;code&gt;IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC&lt;/code&gt;  等，它们分别对应 TCP 传输协议、 &lt;code&gt;UDP&lt;/code&gt;  传输协议、 &lt;code&gt;STCP&lt;/code&gt;  传输协议、 &lt;code&gt;TIPC&lt;/code&gt;  传输协议（这个协议我将会单独开篇讨论！）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：并不是上面的 type 和 protocol 可以随意组合的，如 SOCK_STREAM 不可以跟 &lt;code&gt;IPPROTO_UDP&lt;/code&gt;  组合。当 protocol 为 0 时，会自动选择 type 类型对应的默认协议。&lt;/p&gt;
&lt;p&gt;当我们调用 ****socket**** 创建一个 socket 时，返回的 socket 描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用 bind () 函数，否则就当调用 connect ()、listen () 时系统会自动随机分配一个端口。&lt;/p&gt;
&lt;h2 id=&#34;32-bind函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-bind函数&#34;&gt;#&lt;/a&gt; 3.2、bind () 函数&lt;/h2&gt;
&lt;p&gt;正如上面所说 bind () 函数把一个地址族中的特定地址赋给 socket。例如对应 &lt;code&gt;AF_INET&lt;/code&gt; 、 &lt;code&gt;AF_INET6&lt;/code&gt;  就是把一个 &lt;code&gt;ipv4&lt;/code&gt;  或 &lt;code&gt;ipv6&lt;/code&gt;  地址和端口号组合赋给 socket。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数的三个参数分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sockfd：即 socket 描述字，它是通过 socket () 函数创建了，唯一标识一个 socket。bind () 函数就是将给这个描述字绑定一个名字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addr：一个&lt;/p&gt;
&lt;p&gt;const&lt;/p&gt;
&lt;p&gt;struct&lt;/p&gt;
&lt;p&gt;sockaddr * 指针，指向要绑定给 sockfd 的协议地址。这个地址结构根据地址创建 socket 时的地址协议族的不同而不同，如 ipv4 对应的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct sockaddr_in &amp;#123;
    sa_family_t    sin_family; /* address family: AF_INET */
    in_port_t      sin_port;   /* port in network byte order */
    struct in_addr sin_addr;   /* internet address */
&amp;#125;;

/* Internet address. */
struct in_addr &amp;#123;
    uint32_t       s_addr;     /* address in network byte order */
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ipv6 对应的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct sockaddr_in6 &amp;#123; 
    sa_family_t     sin6_family;   /* AF_INET6 */ 
    in_port_t       sin6_port;     /* port number */ 
    uint32_t        sin6_flowinfo; /* IPv6 flow information */ 
    struct in6_addr sin6_addr;     /* IPv6 address */ 
    uint32_t        sin6_scope_id; /* Scope ID (new in 2.4) */ 
&amp;#125;;

struct in6_addr &amp;#123; 
    unsigned char   s6_addr[16];   /* IPv6 address */ 
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unix 域对应的是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define UNIX_PATH_MAX    108

struct sockaddr_un &amp;#123; 
    sa_family_t sun_family;               /* AF_UNIX */ 
    char        sun_path[UNIX_PATH_MAX];  /* pathname */ 
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addrlen：对应的是地址的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常服务器在启动的时候都会绑定一个众所周知的地址（如 ip 地址 + 端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的 ip 地址组合。这就是为什么通常服务器端在 listen 之前会调用 bind ()，而客户端就不会调用，而是在 connect () 时由系统随机生成一个。&lt;/p&gt;
&lt;h3 id=&#34;网络字节序与主机字节序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络字节序与主机字节序&#34;&gt;#&lt;/a&gt; 网络字节序与主机字节序&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;**** 主机字节序 **** 就是我们平常说的大端和小端模式：不同的 CPU 有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的 Big- &lt;code&gt;Endian&lt;/code&gt;  和 &lt;code&gt;Little-Endian&lt;/code&gt;  的定义如下：&lt;/p&gt;
&lt;p&gt;a)  &lt;code&gt;Little-Endian&lt;/code&gt;  就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。&lt;/p&gt;
&lt;p&gt;b)  &lt;code&gt;Big-Endian&lt;/code&gt;  就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 网络字节序 *&lt;/strong&gt;&lt;/em&gt;：4 个字节的 32 bit 值以下面的次序传输：首先是 &lt;code&gt;0～7bit&lt;/code&gt; ，其次 &lt;code&gt;8～15bit&lt;/code&gt; ，然后 &lt;code&gt;16～23bit&lt;/code&gt; ，最后是 &lt;code&gt;24~31bit&lt;/code&gt; 。这种传输次序称作大端字节序。** 由于 &lt;code&gt;TCP/IP&lt;/code&gt;  首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。** 字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。&lt;/p&gt;
&lt;p&gt;所以：在将一个地址绑定到 socket 的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是 &lt;code&gt;Big-Endian&lt;/code&gt;  由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给 socket。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;33-listen-connect函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-listen-connect函数&#34;&gt;#&lt;/a&gt; 3.3、listen ()、connect () 函数&lt;/h2&gt;
&lt;p&gt;如果作为一个服务器，在调用 socket ()、bind () 之后就会调用 listen () 来监听这个 socket，如果客户端这时调用 connect () 发出连接请求，服务器端就会接收到这个请求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int listen(int sockfd, int backlog);
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;listen 函数的第一个参数即为要监听的 socket 描述字，第二个参数为相应 socket 可以排队的最大连接个数。socket () 函数创建的 socket 默认是一个主动类型的，listen 函数将 socket 变为被动类型的，等待客户的连接请求。&lt;/p&gt;
&lt;p&gt;connect 函数的第一个参数即为客户端的 socket 描述字，第二参数为服务器的 socket 地址，第三个参数为 socket 地址的长度。客户端通过调用 connect 函数来建立与 TCP 服务器的连接。&lt;/p&gt;
&lt;h2 id=&#34;34-accept函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-accept函数&#34;&gt;#&lt;/a&gt; 3.4、accept () 函数&lt;/h2&gt;
&lt;p&gt;TCP 服务器端依次调用 socket ()、bind ()、listen () 之后，就会监听指定的 socket 地址了。TCP 客户端依次调用 socket ()、connect () 之后就想 TCP 服务器发送了一个连接请求。TCP 服务器监听到这个请求之后，就会调用 accept () 函数取接收请求，这样连接就建立好了。之后就可以开始网络 I/O 操作了，即类同于普通文件的读写 I/O 操作。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;accept 函数的第一个参数为服务器的 socket 描述字，第二个参数为指向 struct sockaddr * 的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果 accpet 成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的 TCP 连接。&lt;/p&gt;
&lt;p&gt;注意：accept 的第一个参数为服务器的 socket 描述字，是服务器开始调用 socket () 函数生成的，称为监听 socket 描述字；而 accept 函数返回的是已连接的 socket 描述字。一个服务器通常通常仅仅只创建一个监听 socket 描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接 socket 描述字，当服务器完成了对某个客户的服务，相应的已连接 socket 描述字就被关闭。&lt;/p&gt;
&lt;h2 id=&#34;35-read-write等函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-read-write等函数&#34;&gt;#&lt;/a&gt; 3.5、read ()、write () 等函数&lt;/h2&gt;
&lt;p&gt;万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络 I/O 进行读写操作了，即实现了网咯中不同进程之间的通信！网络 I/O 操作有下面几组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read()/write()&lt;/li&gt;
&lt;li&gt;recv()/send()&lt;/li&gt;
&lt;li&gt;readv()/writev()&lt;/li&gt;
&lt;li&gt;recvmsg()/sendmsg()&lt;/li&gt;
&lt;li&gt;recvfrom()/sendto()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我推荐使用 recvmsg ()/sendmsg () 函数，这两个函数是最通用的 I/O 函数，实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       #include &amp;lt;unistd.h&amp;gt;

       ssize_t read(int fd, void *buf, size_t count);
       ssize_t write(int fd, const void *buf, size_t count);

       #include &amp;lt;sys/types.h&amp;gt;
       #include &amp;lt;sys/socket.h&amp;gt;

       ssize_t send(int sockfd, const void *buf, size_t len, int flags);
       ssize_t recv(int sockfd, void *buf, size_t len, int flags);

       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                      const struct sockaddr *dest_addr, socklen_t addrlen);
       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                        struct sockaddr *src_addr, socklen_t *addrlen);

       ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;read 函数是负责从 &lt;code&gt;fd&lt;/code&gt;  中读取内容。当读成功时，read 返回实际所读的字节数，如果返回的值是 0 表示已经读到文件的结束了，小于 0 表示出现了错误。如果错误为 &lt;code&gt;EINTR&lt;/code&gt;  说明读是由中断引起的，如果是 &lt;code&gt;ECONNREST&lt;/code&gt;  表示网络连接出了问题。&lt;/p&gt;
&lt;p&gt;write 函数将 &lt;code&gt;buf&lt;/code&gt;  中的 &lt;code&gt;nbytes&lt;/code&gt;  字节内容写入文件描述符 &lt;code&gt;fd&lt;/code&gt; . 成功时返回写的字节数。失败时返回 - 1，并设置 &lt;code&gt;errno&lt;/code&gt;  变量。 在网络程序中，当我们向套接字文件描述符写时有俩种可能。1) write 的返回值大于 0，表示写了部分或者是全部的数据。2) 返回的值小于 0，此时出现了错误。我们要根据错误类型来处理。如果错误为 &lt;code&gt;EINTR&lt;/code&gt;  表示在写的时候出现了中断错误。如果为 &lt;code&gt;EPIPE&lt;/code&gt;  表示网络连接出现了问题 (对方已经关闭了连接)。&lt;/p&gt;
&lt;p&gt;其它的我就不一一介绍这几对 I/O 函数了，具体参见 man 文档或者 baidu、Google，下面的例子中将使用到 send/recv。&lt;/p&gt;
&lt;h2 id=&#34;36-close函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-close函数&#34;&gt;#&lt;/a&gt; 3.6、close () 函数&lt;/h2&gt;
&lt;p&gt;在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的 socket 描述字，好比操作完打开的文件要调用 fclose 关闭打开的文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;
int close(int fd);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;close 一个 TCP socket 的缺省行为时把该 socket 标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为 read 或 write 的第一个参数。&lt;/p&gt;
&lt;p&gt;注意：close 操作只是使相应 socket 描述字的引用计数 - 1，只有当引用计数为 0 的时候，才会触发 TCP 客户端向服务器发送终止连接请求。&lt;/p&gt;
&lt;h1 id=&#34;4-socket中tcp的三次握手建立连接详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-socket中tcp的三次握手建立连接详解&#34;&gt;#&lt;/a&gt; 4、socket 中 TCP 的三次握手建立连接详解&lt;/h1&gt;
&lt;p&gt;我们知道 tcp 建立连接要进行 “三次握手”，即交换三个分组。大致流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端向服务器发送一个 SYN J&lt;/li&gt;
&lt;li&gt;服务器向客户端响应一个 SYN K，并对 SYN J 进行确认 &lt;code&gt;ACK J+1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;客户端再想服务器发一个确认 &lt;code&gt;ACK K+1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有就完了三次握手，但是这个三次握手发生在 socket 的那几个函数中呢？请看下图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png&#34;&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157476286.png&#34; alt=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图 1、socket 中发送的 TCP 三次握手&lt;/p&gt;
&lt;p&gt;从图中可以看出，当客户端调用 connect 时，触发了连接请求，向服务器发送了 SYN J 包，这时 connect 进入阻塞状态；服务器监听到连接请求，即收到 SYN J 包，调用 accept 函数接收请求向客户端发送 SYN K ， &lt;code&gt;ACK J+1&lt;/code&gt; ，这时 accept 进入阻塞状态；客户端收到服务器的 SYN K ， &lt;code&gt;ACK J+1&lt;/code&gt;  之后，这时 connect 返回，并对 SYN K 进行确认；服务器收到 &lt;code&gt;ACK K+1&lt;/code&gt;  时，accept 返回，至此三次握手完毕，连接建立。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：客户端的 connect 在三次握手的第二个次返回，而服务器端的 accept 在三次握手的第三次返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;5-socket中tcp的四次握手释放连接详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-socket中tcp的四次握手释放连接详解&#34;&gt;#&lt;/a&gt; 5、socket 中 TCP 的四次握手释放连接详解&lt;/h1&gt;
&lt;p&gt;上面介绍了 socket 中 TCP 的三次握手建立过程，及其涉及的 socket 函数。现在我们介绍 socket 中的四次握手释放连接的过程，请看下图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157487616.png&#34;&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157494693.png&#34; alt=&#34;image&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图 2、socket 中发送的 TCP 四次握手&lt;/p&gt;
&lt;p&gt;图示过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某个应用进程首先调用 close 主动关闭连接，这时 TCP 发送一个 FIN M；&lt;/li&gt;
&lt;li&gt;另一端接收到 FIN M 之后，执行被动关闭，对这个 FIN 进行确认。它的接收也作为文件结束符传递给应用进程，因为 FIN 的接收意味着应用进程在相应的连接上再也接收不到额外数据；&lt;/li&gt;
&lt;li&gt;一段时间之后，接收到文件结束符的应用进程调用 close 关闭它的 socket。这导致它的 TCP 也发送一个 FIN N；&lt;/li&gt;
&lt;li&gt;接收到这个 FIN 的源发送端 TCP 对它进行确认。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样每个方向上都有一个 &lt;code&gt;FIN&lt;/code&gt;  和 &lt;code&gt;ACK&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;jio&lt;/p&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="note" scheme="https://wlp1231.cn/categories/the-tutorial/note/" />
        <category term="note" scheme="https://wlp1231.cn/tags/note/" />
        <category term="教程" scheme="https://wlp1231.cn/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2023-01-11T05:38:35.200Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/the-tutorial/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
        <title>博客搭建教程</title>
        <link rel="alternate" href="https://wlp1231.cn/the-tutorial/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;h3 id=&#34;博客搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#博客搭建&#34;&gt;#&lt;/a&gt; 博客搭建&lt;/h3&gt;
&lt;h5 id=&#34;框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#框架&#34;&gt;#&lt;/a&gt; 框架：&lt;/h5&gt;
&lt;p&gt;Hexo 是高效的静态站点生成框架，它基于 Node.js。通过 Hexo，你可以直接使用 Markdown 语法来撰写博客。&lt;/p&gt;
&lt;h4 id=&#34;环境安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境安装&#34;&gt;#&lt;/a&gt; 环境安装&lt;/h4&gt;
&lt;h5 id=&#34;nodejs安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nodejs安装&#34;&gt;#&lt;/a&gt; Node.js 安装&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1cWl5dW4vcC84MTMzOTA0Lmh0bWw=&#34;&gt;参考文章&lt;/span&gt;&lt;/p&gt;
&lt;h6 id=&#34;全局环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局环境配置&#34;&gt;#&lt;/a&gt; 全局环境配置&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装的文件夹下创建两个文件夹【node_global】及【node_cache】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理员权限下打开终端执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm config set prefix &amp;quot;D:\Nodejs\node_global&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm config set cache &amp;quot;D:\Nodejs\node_cache&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在【系统变量】下新建【NODE_PATH】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107142918673.png&#34; alt=&#34;image-20230107142918673&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将【用户变量】下的【Path】修改为【D:\Nodejs\node_global】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143013364.png&#34; alt=&#34;image-20230107143013364&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在【系统变量】下的【Path】新建添加 node 全局文件夹【D:\Nodejs\node_global】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143118535.png&#34; alt=&#34;image-20230107143118535&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;git安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git安装&#34;&gt;#&lt;/a&gt; Git 安装&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHVld2Vpc3VveW9uZy9wLzExOTE0MDQ1Lmh0bWw=&#34;&gt;参考文章&lt;/span&gt;&lt;/p&gt;
&lt;h6 id=&#34;下载git-git-downloads-git-scmcom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载git-git-downloads-git-scmcom&#34;&gt;#&lt;/a&gt; 下载 Git &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=&#34;&gt;Git - Downloads (git-scm.com)&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143455455.png&#34; alt=&#34;image-20230107143455455&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143543775.png&#34; alt=&#34;image-20230107143543775&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;安装git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装git&#34;&gt;#&lt;/a&gt; 安装 Git&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143703388.png&#34; alt=&#34;image-20230107143703388&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143734295.png&#34; alt=&#34;image-20230107143734295&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143855795.png&#34; alt=&#34;image-20230107143855795&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143911133.png&#34; alt=&#34;image-20230107143911133&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143949585.png&#34; alt=&#34;image-20230107143949585&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144034041.png&#34; alt=&#34;image-20230107144034041&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144046740.png&#34; alt=&#34;image-20230107144046740&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144123237.png&#34; alt=&#34;image-20230107144123237&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144135211.png&#34; alt=&#34;image-20230107144135211&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144146185.png&#34; alt=&#34;image-20230107144146185&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144159086.png&#34; alt=&#34;image-20230107144159086&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144213513.png&#34; alt=&#34;image-20230107144213513&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144229929.png&#34; alt=&#34;image-20230107144229929&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144243337.png&#34; alt=&#34;image-20230107144243337&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144258178.png&#34; alt=&#34;image-20230107144258178&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;vscode安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vscode安装&#34;&gt;#&lt;/a&gt; Vscode 安装&lt;/h5&gt;
&lt;p&gt;开源、免费、轻量的代码编辑器，可以通过安装插件增强功能，几乎支持任何语言代码的编写。&lt;/p&gt;
&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v&#34;&gt;https://code.visualstudio.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;支持平台：Windows、macOS、Linux&lt;/p&gt;
&lt;h5 id=&#34;typora安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typora安装&#34;&gt;#&lt;/a&gt; Typora 安装&lt;/h5&gt;
&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHlwb3JhLm5ldC8=&#34;&gt;https://www.typora.net/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;支持平台：Windows、macOS、Linux&lt;/p&gt;
&lt;p&gt;Mac 免费激活：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90LnpzeHEuY29tL0JxZllueUI=&#34;&gt;https://t.zsxq.com/BqfYnyB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Win 免费激活：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90LnpzeHEuY29tLzA0YVl6anVyUg==&#34;&gt;https://t.zsxq.com/04aYzjurR&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Linux 免费激活：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90LnpzeHEuY29tLzA0YVl6anVyUg==&#34;&gt;https://t.zsxq.com/04aYzjurR&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Markdown 写作教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90LnpzeHEuY29tL1FKUUptZVU=&#34;&gt;https://t.zsxq.com/QJQJmeU&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;主题包：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90LnpzeHEuY29tLzA0aXFOM2ppRQ==&#34;&gt;https://t.zsxq.com/04iqN3jiE&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;github加速器vpn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#github加速器vpn&#34;&gt;#&lt;/a&gt; Github 加速器（VPN）&lt;/h5&gt;
&lt;p&gt;一元机场，低价&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94bi0tNGdxNjJmNTJnZHNzLmNvbS8jL3JlZ2lzdGVyP2NvZGU9dWpmYktOaGk=&#34;&gt;注册链接&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#github&#34;&gt;#&lt;/a&gt; Github&lt;/h5&gt;
&lt;p&gt;打开 https://github.com/ ，新建一个项目。输入自己的项目名字，后面一定要加 &lt;code&gt;.github.io&lt;/code&gt;  后缀，README 初始化可选可不选，名称一定要和你的 github 名字完全一样，比如你 github 名字叫 &lt;code&gt;abc&lt;/code&gt; ，那么仓库名字一定要是 &lt;code&gt;abc.github.io&lt;/code&gt; 。最后选择 Create 创建，项目就建成功了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230111125334123.png&#34; alt=&#34;image-20230111125334123&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;hexo搭建与部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hexo搭建与部署&#34;&gt;#&lt;/a&gt; Hexo 搭建与部署&lt;/h4&gt;
&lt;h5 id=&#34;安装hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装hexo&#34;&gt;#&lt;/a&gt; 安装 Hexo&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在你的电脑上任意位置，新建一个文件夹，用来存放自己的博客文件，比如 D:\blog 目录下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里最好按照一级目录创建文件夹，然后将项目放里面，如果是二级目录注意后面配置路由的格式即可&lt;/li&gt;
&lt;li&gt;还有目录路径最好全英文，不要出现特殊符号和中文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在该目录下，鼠标右击，选择 &lt;code&gt;Git Bash Here&lt;/code&gt; ，打开 git 的控制台窗口 或者 vscode ，输入命令进行安装并启动，后续 &lt;code&gt;hexo init&lt;/code&gt;  需要执行生产 ssh keys 后执行&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm i hexo&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;cli &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;g&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm install&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo g&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;生成ssh-keys&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成ssh-keys&#34;&gt;#&lt;/a&gt; 生成 ssh keys&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在任意文件夹位置，打开 cmd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 添加 github 信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;git config &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;global user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token string&#34;&gt;&#34;yourname&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;git config &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;global user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;email &lt;span class=&#34;token string&#34;&gt;&#34;youremail&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 查看信息是否正确&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;git config user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;git config user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;email&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成 ssh keys：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ssh&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;keygen &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;t rsa &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;C&lt;/span&gt; “你注册时的邮件地址user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;email”&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;总共需要敲四次回车。这个时候它会告诉你已经生成了.ssh 的文件夹。在你的电脑中找到这个文件夹。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1663855670162.png&#34; alt=&#34;uTools_1663855670162&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh，简单来讲，就是一个秘钥，其中， &lt;code&gt;id_rsa&lt;/code&gt;  是你这台电脑的私人秘钥，不能给别人看的， &lt;code&gt;id_rsa.pub&lt;/code&gt;  是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接 GitHub 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git 上传你的文件到 GitHub 上。而后在 GitHub 的 setting 中，找到 SSH keys 的设置选项，点击 &lt;code&gt;New SSH key&lt;/code&gt; ， 把你的 &lt;code&gt;id_rsa.pub&lt;/code&gt;  里面的信息复制进去。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1663855830037.png&#34; alt=&#34;uTools_1663855830037&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 G it bash 中，查看是否成功&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ssh &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;T&lt;/span&gt; git&lt;span class=&#34;token annotation punctuation&#34;&gt;@github.com&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;将hexo部署到github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#将hexo部署到github&#34;&gt;#&lt;/a&gt; 将 hexo 部署到 Github&lt;/h5&gt;
&lt;p&gt;这一步，我们就可以将 hexo 和 GitHub 关联起来，也就是将 hexo 生成的文章部署到 GitHub 上，打开站点配置文件  &lt;code&gt;_config.yml&lt;/code&gt; ，翻到最后，修改 &lt;code&gt;deploy&lt;/code&gt;  部分代码。repo 部分为你 GitHub 仓库链接地址&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deploy&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  repo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;github&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;YourgithubName&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;YourgithubName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;github&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  branch&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个时候需要先安装 deploy-git ，也就是部署的命令，这样你才能用命令部署到 GitHub。在博客文件下打开 cmd 或 gitbash&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npm install hexo&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;deployer&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;git &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;save&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;生成界面&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo generate &lt;span class=&#34;token comment&#34;&gt;// 可缩写为 hexo g&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上传文件到 GitHub&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo deploy &lt;span class=&#34;token comment&#34;&gt;// 可缩写为 hexo d&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;博客文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#博客文件夹&#34;&gt;#&lt;/a&gt; 博客文件夹&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1663920168029.png&#34; alt=&#34;uTools_1663920168029&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_config.yml&lt;/code&gt; ：站点配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt; : 存储 Hexo 插件的文件，可以实现各种扩展功能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; ：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scaffolds&lt;/code&gt; ：模板文件夹，里面的 &lt;code&gt;post.md&lt;/code&gt;  文件可以设置每一篇博客的模板。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; ：非常重要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes&lt;/code&gt; ：主题文件夹，可以从&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=&#34;&gt; Hexo 主题官网&lt;/span&gt;下载各种各样的主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来重点介绍 &lt;code&gt;source&lt;/code&gt;  文件夹。新建的博客中， &lt;code&gt;source&lt;/code&gt;  文件夹下默认只有一个子文件夹 ——&amp;gt; &lt;code&gt;_posts&lt;/code&gt; 。我们写的博客都放在这个子文件夹里面。我们还可以在 &lt;code&gt;source&lt;/code&gt;  里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。&lt;/p&gt;
&lt;h4 id=&#34;网页的简单美化hexo-shoka主题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网页的简单美化hexo-shoka主题&#34;&gt;#&lt;/a&gt; 网页的简单美化 ——Hexo-Shoka 主题&lt;/h4&gt;
&lt;p&gt;有关主题功能基本介绍的详情，请前往&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv&#34;&gt;→優萌初華主页&lt;/span&gt;查看&lt;/p&gt;
&lt;h4 id=&#34;markdown文档相关注意事项自用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#markdown文档相关注意事项自用&#34;&gt;#&lt;/a&gt; markdown 文档相关注意事项 —— 自用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文章置顶&lt;/p&gt;
&lt;p&gt;在文章的 Front Matter 设置 sticky: true ，则该文章将显示在首页最上方的 置顶文章 列。 多篇文章按照发布时间倒序排列，不分页。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;title：置顶文章&lt;/p&gt;
&lt;p&gt;sticky：true&lt;/p&gt;
&lt;hr /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;精选分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改站点配置： 找到 category_map: ，配置每个分类对应的英文映射，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;category_map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;计算机科学&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; computer&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;science&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 /source/_posts 文件夹相应的目录里，存放封面图&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;搜索功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索功能&#34;&gt;#&lt;/a&gt; 搜索功能&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Algolia 官网完成注册，进入 welcome 页面→点击 API keys，在 All API Keys 页面处点击 New API key 并填写相关信息，新建好 API key 之后，在 hexo 根目录的 _config.yml 文件中配置 algolia 相关参数 (可在 Algolia 官网页面→API Keys 页面→(Your API Keys | All API Keys) 页面中查看)&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;algolia&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;appId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Application ID对应码&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;apiKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;API Keys页面的All API Keys中刚刚新建的API key的对应码&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;adminApiKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Admin API Key对应码&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;chunkSize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;indexName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;你填写的Indices部分&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; title &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; path&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; categories&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; strip&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;truncate&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; gallery&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; photos&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; tags&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置好后，在 hexo 根目录右键点击 Git Bash Here ，输入 hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo algolia 即可 注意 ，每当有新文章发布，都需输入 hexo g 与 hexo algolia 指令&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="教程" scheme="https://wlp1231.cn/categories/the-tutorial/" />
        <category term="hexo" scheme="https://wlp1231.cn/categories/the-tutorial/hexo/" />
        <category term="Hexo" scheme="https://wlp1231.cn/tags/Hexo/" />
        <category term="教程" scheme="https://wlp1231.cn/tags/%E6%95%99%E7%A8%8B/" />
        <updated>2023-01-11T05:38:35.196Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Ubuntu/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F/</id>
        <title>机器人仿真</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Ubuntu/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F/"/>
        <content type="html">&lt;h1 id=&#34;机器人仿真&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机器人仿真&#34;&gt;#&lt;/a&gt; 机器人仿真&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5hdXRvbGFib3IuY29tLmNuL2Jvb2svUk9TVHV0b3JpYWxzLw==&#34;&gt;课件&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目标&#34;&gt;#&lt;/a&gt; 目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;能够使用 URDF 创建机器人模型，并在 Rviz (感知环境) 和 Gazebo (创建仿真环境) 分别显示&lt;/li&gt;
&lt;li&gt;能够使用 Gazebo 搭建仿真环境&lt;/li&gt;
&lt;li&gt;能够使用机器人模型中的传感器 (雷达、摄像头...) 获取仿真环境参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工具介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具介绍&#34;&gt;#&lt;/a&gt; 工具介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;URDF&lt;/strong&gt;：URDF 是 Unified Robot Description Format 的首字母缩写，直译为&lt;strong&gt;统一 (标准化) 机器人描述格式&lt;/strong&gt;，可以以一种 XML 的方式描述机器人的部分结构，比如底盘、摄像头、激光雷达、机械臂以及不同关节的自由度....., 该文件可以被 C++ 内置的解释器转换成可视化的机器人模型，是 ROS 中实现机器人仿真的重要组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rviz&lt;/strong&gt;:RViz 是 ROS Visualization Tool 的首字母缩写，直译为&lt;strong&gt; ROS 的三维可视化工具&lt;/strong&gt;。它的主要目的是以三维方式显示 ROS 消息，可以将 数据进行可视化表达。例如：可以显示机器人模型，可以无需编程就能表达激光测距仪（LRF）传感器中的传感 器到障碍物的距离，RealSense、Kinect 或 Xtion 等三维距离传感器的点云数据（PCD， Point Cloud Data），从相机获取的图像值等&lt;/p&gt;
&lt;p&gt;以 “ros- [ROS_DISTRO] -desktop-full” 命令安装 ROS 时，RViz 会默认被安装。&lt;/p&gt;
&lt;p&gt;运行使用命令 &lt;code&gt;rviz&lt;/code&gt;  或 &lt;code&gt;rosrun rviz rviz&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo apt install ros&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;ROS_DISTRO&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;rviz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gazebo&lt;/strong&gt;：Gazebo 是一款 3D 动态模拟器，用于显示机器人模型并创建仿真环境，能够在复杂的室内和室外环境中准确有效地模拟机器人。与游戏引擎提供高保真度的视觉模拟类似，Gazebo 提供高保真度的物理模拟，其提供一整套传感器模型，以及对用户和程序非常友好的交互方式。&lt;/p&gt;
&lt;p&gt;以 “ros- [ROS_DISTRO] -desktop-full” 命令安装 ROS 时，gzebo 会默认被安装。&lt;/p&gt;
&lt;p&gt;运行使用命令 &lt;code&gt;gazebo&lt;/code&gt;  或 &lt;code&gt;rosrun gazebo_ros gazebo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;urdf语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#urdf语法&#34;&gt;#&lt;/a&gt; URDF 语法&lt;/h2&gt;
&lt;h3 id=&#34;robot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#robot&#34;&gt;#&lt;/a&gt; robot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;robot:urdf 中为了保证 xml 语法的完整性，使用了 &lt;code&gt;robot&lt;/code&gt;  标签作为根标签，所有的 link 和 joint 以及其他标签都必须包含在 robot 标签内，在该标签内可以通过 name 属性设置机器人模型的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name: 指定机器人模型的名称&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;robot&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;mycar&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ......&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ......&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;robot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;link&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#link&#34;&gt;#&lt;/a&gt; link&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;liink：urdf 中的 link 标签用于描述机器人某个部件 (也即刚体部分) 的外观和物理属性，比如：机器人底座、轮子、激光雷达、摄像头... 每一个部件都对应一个 link, 在 link 标签内，可以设计该部件的形状、尺寸、颜色、惯性矩阵、碰撞参数等一系列属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name ---&amp;gt; 为连杆命名 (配对出现)&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;base_link&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visual ---&amp;gt; 描述外观 (对应的数据是可视的)
&lt;ul&gt;
&lt;li&gt;geometry 设置连杆的形状
&lt;ul&gt;
&lt;li&gt;标签 1: box (盒状)
&lt;ul&gt;
&lt;li&gt;属性:size = 长 (x) 宽 (y) 高 (z)=abc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标签 2: cylinder (圆柱)
&lt;ul&gt;
&lt;li&gt;属性:radius = 半径， length = 高度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标签 3: sphere (球体)
&lt;ul&gt;
&lt;li&gt;属性:radius = 半径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标签 4: mesh (为连杆添加皮肤)
&lt;ul&gt;
&lt;li&gt;属性: filename = 资源路径 (格式:&lt;strong&gt;package://&lt;packagename&gt;/&lt;path&gt;/ 文件&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;origin 设置偏移量与倾斜弧度
&lt;ul&gt;
&lt;li&gt;属性 1: xyz=x 偏移 y 偏移 z 偏移&lt;/li&gt;
&lt;li&gt;属性 2: rpy=x 翻滚 y 俯仰 z 偏航 (单位是弧度)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;metrial 设置材料属性 (颜色)
&lt;ul&gt;
&lt;li&gt;属性: name&lt;/li&gt;
&lt;li&gt;标签: color
&lt;ul&gt;
&lt;li&gt;属性: rgba = 红绿蓝权重值与透明度 (每个权重值以及透明度取值 [0,1])&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;collision ---&amp;gt; 连杆的碰撞属性&lt;/li&gt;
&lt;li&gt;Inertial ---&amp;gt; 连杆的惯性矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;joint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#joint&#34;&gt;#&lt;/a&gt; joint&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;joint:urdf 中的 joint 标签用于描述机器人关节的运动学和动力学属性，还可以指定关节运动的安全极限，机器人的两个部件 (分别称之为 parent link 与 child link) 以 &amp;quot;关节&amp;quot; 的形式相连接，不同的关节有不同的运动形式：旋转、滑动、固定、旋转速度、旋转角度限制...., 比如：安装在底座上的轮子可以 360 度旋转，而摄像头则可能是完全固定在底座上。joint 标签对应的数据在模型中是不可见的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;name ---&amp;gt; 为关节命名&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;joint&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;1_joint&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;joint&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;type ---&amp;gt; 关节运动形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;continuous: 旋转关节，可以绕单轴无限旋转&lt;/li&gt;
&lt;li&gt;revolute: 旋转关节，类似于 continues, 但是有旋转角度限制&lt;/li&gt;
&lt;li&gt;prismatic: 滑动关节，沿某一轴线移动的关节，有位置极限&lt;/li&gt;
&lt;li&gt;planer: 平面关节，允许在平面正交方向上平移或旋转&lt;/li&gt;
&lt;li&gt;floating: 浮动关节，允许进行平移、旋转运动&lt;/li&gt;
&lt;li&gt;fixed: 固定关节，不允许运动的特殊关节&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;parent (必需)&lt;/p&gt;
&lt;p&gt;parent link 的名字是一个强制的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;link: 父级连杆的名字，是这个 link 在机器人结构树中的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;child (必需)&lt;/p&gt;
&lt;p&gt;child link 的名字是一个强制的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;link: 子级连杆的名字，是这个 link 在机器人结构树中的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;origin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: xyz = 各轴线上的偏移量 rpy = 各轴线上的偏移弧度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;axis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: xyz 用于设置围绕哪个关节轴运动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;urdf与rviz初步配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#urdf与rviz初步配置&#34;&gt;#&lt;/a&gt; URDF 与 Rviz 初步配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装功能包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;catkin_create_pkg urdf01_rviz urdf xacro&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在当前功能包新建目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz1.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 urdf 子文件新建 01.urdf 文档并输入&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;robot&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;mycar&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;base_link&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;visual&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;geometry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;box&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.5 0.2 0.1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;geometry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;visual&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;robot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 launch 目录下新建 01.launch 文档并输入&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;launch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 设置参数 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;param&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;robot_description&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;textfile&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$(find 包名)/urdf/urdf/urdf01_HelloWorld.urdf&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 启动 rviz --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;node&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;pkg&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rviz&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rviz&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rviz&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;launch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 包名：urdf01_rviz --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- urdf01_HelloWorld:01 , 根据 1 自己的文档名 --&gt;&lt;/span&gt;？&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行 Rviz 后 add——robotmodel，axes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将当前配置保存到 config 目录下，命名为 show_mycar.rviz，之后更改 launch 文档的内容&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;launch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;param&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;robot_description&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;textfile&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$(find 包名)/urdf/urdf/01.urdf&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;node&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;pkg&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rviz&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rviz&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;rviz&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;-d $(find 包名)/config/rviz/show_mycar.rviz&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;launch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source ./devel/setup.bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch urdf01_rviz 01.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xacro&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xacro&#34;&gt;#&lt;/a&gt; xacro&lt;/h2&gt;
&lt;p&gt;在 urdf/xacro 目录下进行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编写 Xacro 文件，以变量的方式封装属性 (常量半径、高度、车轮半径...)，以函数的方式封装重复实现 (车轮的添加)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行进入 xacro 文件 所属目录，执行: &lt;code&gt;rosrun xacro xacro xxx.xacro &amp;gt; xxx.urdf&lt;/code&gt; , 会将 xacro 文件解析为 urdf 文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosrun xacro xacro 03_car_base.urdf.xacro &amp;gt; 03_car_base.urdf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查代码是否正确&lt;/p&gt;
&lt;p&gt;&lt;code&gt;check_urdf 文件名.urdf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小车实现 (仅实现)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz2.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加雷达和摄像头&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz3.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;urdf与gazebo学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#urdf与gazebo学习&#34;&gt;#&lt;/a&gt; URDF 与 Gazebo 学习&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo2.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建功能包，添加依赖&lt;/p&gt;
&lt;p&gt;&lt;code&gt;urdf xacro gazebo_ros gazebo_ros_control gazebo_plugins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立相关目录，如 rviz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 urdf 子文件新建 11.urdf 文档并输入&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    创建一个机器人模型 (盒状即可，box)，显示在 Gazebo 中 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;robot&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;mycar&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;base_link&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 可视化部分 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;visual&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 几何标签 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;geometry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;box&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.5 0.2 0.1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;geometry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 使用默认值 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;origin&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;xyz&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.0 0.0 0.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rpy&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.0 0.0 0.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 颜色标签，子标签 color 中第四个为透明度，在 gazebo 中不再生效 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;material&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;yellow&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;color&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.5 0.3 0.0 1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;material&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;visual&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 设置碰撞参数，如果是标准几何体，代码同上 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;collision&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;geometry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;box&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.5 0.2 0.1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;geometry&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;origin&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;xyz&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.0 0.0 0.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rpy&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0.0 0.0 0.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;collision&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 设置惯性矩阵 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;inertial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;origin&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;xyz&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0 0 0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 重心的偏移 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;mass&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;6&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 质量 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;inertia&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ixx&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ixy&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ixz&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;iyy&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;iyz&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;izz&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 不同空间维度的惯性参数 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;inertial&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- gazebo 自己的颜色设置，大写 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;gazebo&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;reference&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;base_link&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 应用与哪部分连杆 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;material&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Gazebo/Black&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;material&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;gazebo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;robot&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 launch 目录下新建 11.launch 文档并输入&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;launch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 将 Urdf 文件的内容加载到参数服务器 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;param&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;robot_description&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;textfile&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$(find urdf11_gazebo)/urdf/11.urdf&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 启动 gazebo，不做任何修改 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;include&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$(find gazebo_ros)/launch/empty_world.launch&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 在 gazebo 中显示机器人模型，下面命令行的固定 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;node&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;pkg&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;gazebo_ros&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;spawn_model&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;model&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;-urdf -model mycar -param robot_description&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;launch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosrun gazebo_ros spawn_model -urdf -model car -param robot_description&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch urdf11_gazebo 11.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构造机器人模型仅在电脑上实现运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造机器人模型仅在电脑上实现运行&#34;&gt;#&lt;/a&gt; 构造机器人模型 (仅在电脑上实现运行)&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo3.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;launch 文件夹内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%96%87%E4%BB%B62.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;urdf 文件夹内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%96%87%E4%BB%B61.png&#34; alt=&#34;wide&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;机器人运动控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#机器人运动控制&#34;&gt;#&lt;/a&gt; 机器人运动控制&lt;/h2&gt;
&lt;h3 id=&#34;arbotix&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arbotix&#34;&gt;#&lt;/a&gt; Arbotix&lt;/h3&gt;
&lt;p&gt;Arbotix 是一款控制电机、舵机的控制板，&lt;strong&gt;并提供相应的 ros 功能包&lt;/strong&gt;，这个功能包的功能不仅可以驱动真实的 Arbotix 控制板，它还提供一个差速控制器，通过接受速度控制指令更新机器人的 joint 状态，从而帮助我们实现机器人在 rviz 中的运动。这个差速控制器在 arbotix_python 程序包中，完整的 arbotix 程序包还包括多种控制器，分别对应 dynamixel 电机、多关节机械臂以及不同形状的夹持器。&lt;/p&gt;
&lt;h4 id=&#34;实现流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现流程&#34;&gt;#&lt;/a&gt; 实现流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 Arbotix   noetic (rviz)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/vanadiumlabs/arbotix_ros.git&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建新功能包，准备机器人 urdf、xacro 文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加 Arbotix 配置文件 control.yaml&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写 launch 文件配置 Arbotix&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;node&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;arbotix&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;pkg&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;arbotix_python&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;arbotix_driver&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;screen&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;rosparam&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;$(find my_urdf05_rviz)/config/hello.yaml&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;load&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;param&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;sim&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;node&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 launch 文件并控制机器人模型运动&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​    &lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz4.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;gazebo下流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gazebo下流程&#34;&gt;#&lt;/a&gt; gazebo 下流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;已经创建完毕的机器人模型，编写一个单独的 xacro 文件，为机器人模型添加传动装置以及控制器&lt;/p&gt;
&lt;p&gt;下 urdf 目录下新建 gazebo 目录，新建 move.xacro 文档，输入代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将此文件集成进 xacro 文件&lt;/p&gt;
&lt;p&gt;在集合总代码中加入 move.xacro 的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 Gazebo 并发布 /cmd_vel 消息控制机器人运动&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装 Generic keyboard teleop for twist robots.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install ros-noetic-teleop-twist-keyboard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;键盘控制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosrun teleop_twist_keyboard teleop_twist_keyboard.py &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosrun teleop_twist_keyboard teleop_twist_keyboard.py  _speed:=0.3 _turn:=0.5&lt;/code&gt;  更改速度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo5.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;话题控制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rostopic pub -r 10 /cmd_vel geometry_msgs/Twist &amp;quot;linear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo4.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;a1激光雷达&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a1激光雷达&#34;&gt;#&lt;/a&gt; a1 激光雷达&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载功能包的方法：在你的终端中输入如下命令&lt;br /&gt;
 &lt;code&gt;cd ~/catkin_ws/src&lt;/code&gt;   //catkin_ws 为你的工作空间名称&lt;br /&gt;
 &lt;code&gt;git clone  https://github.com/Slamtec/rplidar_ros.git&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;cd ..&lt;/code&gt; /  // 返回上层空间&lt;br /&gt;
 &lt;code&gt;catkin_make&lt;/code&gt;    // 编译工作空间，或直接访问 github 下载 rplidar_ros 文件后放到 src 文件夹下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;usb 外接雷达&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ls -l /dev/ttyUSB*    &lt;/code&gt;    查看雷达信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo chmod 666 /dev/ttyUSB0&lt;/code&gt;        赋予权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;roslaunch rplidar_ros view_rplidar.launch&lt;/code&gt;      进入 rviz&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;chmod&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chmod&#34;&gt;#&lt;/a&gt; chmod：&lt;/h5&gt;
&lt;p&gt;若用 chmod 4755 filename 可使此程序具有 root 的权限&lt;/p&gt;
&lt;p&gt;sudo chmod 600 ××× （只有所有者有读和写的权限）&lt;/p&gt;
&lt;p&gt;sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）&lt;/p&gt;
&lt;p&gt;sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）&lt;/p&gt;
&lt;p&gt;sudo chmod 666 ××× （每个人都有读和写的权限）&lt;/p&gt;
&lt;p&gt;sudo chmod 777 ××× （每个人都有读和写以及执行的权限）&lt;/p&gt;
&lt;p&gt;安装 ros_arduino_bridge 功能包&lt;/p&gt;
&lt;p&gt;访问&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hicm9ib3RpY3Mvcm9zX2FyZHVpbm9fYnJpZGdl&#34;&gt; hbrobotics/ros_arduino_bridge: ROS + Arduino = Robot (github.com)&lt;/span&gt; 下载相关文件&lt;/p&gt;
&lt;p&gt;编译&lt;/p&gt;
&lt;p&gt;安装 tianbot 的 github 中的 lubot_slam 功能包&lt;/p&gt;
&lt;p&gt;访问&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3RpYW5ib3QvbHVib3Rfc2xhbQ==&#34;&gt; tianbot/lubot_slam: 使用 Arduino 作为 BaseController 配合 ROS 机器人操作系统，构建具备 SLAM 能力的 luBot 自主导航机器人，也许还有点弱智能（机器视觉与深度学习）。 (github.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;编译&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;p&gt;gamapping 功能包&lt;br /&gt;
 navigation 功能包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd ~/catkin_ws/src&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;git clone https://github.com/ros-planning/navigation.git&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;git clone https://github.com/ros-perception/openslam_gmapping.git &lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;git clone https://github.com/ros-perception/slam_gmapping.git&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;git init&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;git checkout -b kinetic-devel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若克隆连接失败，将 https 改为 git&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install libbullet-dev&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;sudo apt-get install libsdl1.2-dev&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;sudo apt-get install libsdl-image1.2-dev&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;sudo apt-get install ros-kinetic-geometry2&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;sudo apt-get install ros-kinetic-nav-msgs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若报错：E：定位软件包失败&lt;/p&gt;
&lt;p&gt;如 geometry2&lt;/p&gt;
&lt;p&gt;在 github 中搜索找到 geometry2&lt;/p&gt;
&lt;p&gt;复制对应网址&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Jvcy9nZW9tZXRyeTI=&#34;&gt; ros/geometry2: A set of ROS packages for keeping track of coordinate transforms. (github.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;打开终端，进入要放置的位置，输入 &lt;code&gt;git clone git://github.com/ros/geometry2.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;继续上述操作&lt;/p&gt;
&lt;p&gt;编译 &lt;code&gt;catkin_make&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;nfs详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nfs详解&#34;&gt;#&lt;/a&gt; NFS 详解&lt;/h4&gt;
&lt;h3 id=&#34;ssh通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssh通信&#34;&gt;#&lt;/a&gt; ssh 通信&lt;/h3&gt;
&lt;h4 id=&#34;连接准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接准备&#34;&gt;#&lt;/a&gt; 连接准备&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;  查看 ip 地址，如 192.168.43.128&lt;/li&gt;
&lt;li&gt;用于连接的两台电脑处于同一局域网内，手机热点&lt;/li&gt;
&lt;li&gt;查看主机名，终端输入 &lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;终端输入 &lt;code&gt;sudo gedit /etc/hosts&lt;/code&gt; , 在文件中第三行输入本机 ip 地址和主机名，第四行输入待连机 ip 地址和主机名（忽略）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo /ect/init.d/networking restart&lt;/code&gt; , 若报错，在 /etc/init.d 中找到 network 文件，将之替换 networking。仍然报错，将 /etc/init.d 改为 service，还报错，hosts 中 ip 地址写错，检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接&#34;&gt;#&lt;/a&gt; 连接&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装 chrony 包和 ssh 服务器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install chrony&lt;/code&gt;   &lt;code&gt;sudo apt-get install openssh-server&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ping 待连机ip地址或主机名&lt;/code&gt; ，建议 ip 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh 待连机用户名@待连机主机名或ip地址&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接成功&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;删除冲突ip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除冲突ip&#34;&gt;#&lt;/a&gt; 删除冲突 IP&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -f &amp;quot;/home/wlp/.ssh/known_hosts&amp;quot; -R &amp;quot;joul&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看系统是否已经安装 ssh 客户端或者服务端：dpkg -l | grep ssh。&lt;br /&gt;
启动 ssh 服务：sudo /etc/init.d/ssh start&lt;br /&gt;
 关闭 ssh 服务：sudo /etc/init.d/ssh stop&lt;br /&gt;
 重启 ssh 服务：sudo /etc/init.d/ssh restart&lt;/p&gt;
&lt;h2 id=&#34;连接控制mini小车1804密码raspberry使用wheeltec系列小车&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接控制mini小车1804密码raspberry使用wheeltec系列小车&#34;&gt;#&lt;/a&gt; 连接控制 mini 小车（18.04 密码：raspberry，使用 wheeltec 系列小车）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打开终端，通过 ssh 连接到小车上的树莓派，192.168.0.100&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh -Y wheeltec@192.168.0.100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;密码：dongguan&lt;/p&gt;
&lt;p&gt;注：没有 - Y，图形化等功能无法使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程登录后： &lt;code&gt;roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程登录后： &lt;code&gt;roslaunch wheeltec_robot_rc keyboard_teleop.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上述操作可以键盘控制小车移动&lt;/p&gt;
&lt;h3 id=&#34;启动雷达&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动雷达&#34;&gt;#&lt;/a&gt; 启动雷达&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;roslaunch rplidar_ros rplidar.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看雷达发布的话题&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rostopic list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看数据类型&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosmsg show sensor_msgs/LaserScan &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;控制小车雷达建图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制小车雷达建图&#34;&gt;#&lt;/a&gt; 控制小车雷达建图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;终端 ssh 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;终端输入 &lt;code&gt;roslaunch turn_on_wheeltec_robot mapping.launch &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新终端输入 &lt;code&gt;rviz&lt;/code&gt; , 使用远程终端较卡，使用本机终端&lt;/p&gt;
&lt;p&gt;.bushrc 文件加入&lt;/p&gt;
&lt;p&gt;export ROS_MASTER_URI=http://192.168.0.100:11311&lt;br /&gt;
export ROS_HOSTNAME=192.168.0.136&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制小车走完全场，完成建图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存图形:&lt;/p&gt;
&lt;p&gt;一键保存： &lt;code&gt;roslaunch turn_on_wheeltec_robot map_saver.launch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开地图路径： &lt;code&gt;cd /home/wheeltec/wheeltec_robot/src/turn_on_wheeltec_robot/map&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;保存地图： &lt;code&gt;rosrun map_server map_saver -f 地图名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看图形：将远程文件挂载到本机 &lt;code&gt;sudo mount -t nfs 192.168.0.100:/home/wheeltec/wheeltec_robot /mnt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开 mnt 文件查看，保存路径在保存图形时终端有显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建图&lt;br /&gt;
 mapping.launch&lt;br /&gt;
 小车初始化节点：turn_on_wheeltec_robot.launch&lt;br /&gt;
 雷达节点：rplidar.launch&lt;br /&gt;
gmapping 建图节点：algorithm_gmapping.launch&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;建图算法切换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建图算法切换&#34;&gt;#&lt;/a&gt; 建图算法切换&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;修改 mapping.launch 文件开头 &lt;code&gt;&amp;lt;arg name=&amp;quot;mapping_node&amp;quot; default=&amp;quot;gmapping&amp;quot; doc=&amp;quot;opt:gmapping,hector,cartographer,karto&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;雷达跟随&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#雷达跟随&#34;&gt;#&lt;/a&gt; 雷达跟随&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;roslaunch simple_follower laser_follower.launch&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;sublimetext&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sublimetext&#34;&gt;#&lt;/a&gt; SublimeText&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;小车开机，连接 WIFI，密码：dongguan。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NFS 挂载 (passoni 密码：raspberry)： &lt;code&gt; &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh 登录到服务端，并修改服务端系统时间为现在： &lt;code&gt;sudo date -s &amp;quot;2021-7-7 00:00:00&amp;quot; &lt;/code&gt; 精确到分即可&lt;/p&gt;
&lt;p&gt;这一步是因为树莓派 / Nano/TX2/NX/ 工控机的系统时间在没有连接互联网 时，系统时间可能会混乱。同时我们程序修改是需要编译后才能生效的，而编译 规则是只编译最新时间的修改，同时修改时间在未来即大于当前系统时间的不编译。&lt;/p&gt;
&lt;p&gt;上一次修改时间 &amp;gt; 此次修改时间：不编译&lt;/p&gt;
&lt;p&gt;此次修改时间 &amp;gt; 当前系统时间：不编译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定编译编译单个功能包：&lt;/p&gt;
&lt;p&gt;catkin_make -DCATKIN_WHITELIST_PACKAGES=&amp;quot;功能包名&amp;quot;&lt;/p&gt;
&lt;p&gt;解除指定功能包编译：&lt;/p&gt;
&lt;p&gt;catkin_make -DCATKIN_WHITELIST_PACKAGES=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源&#34;&gt;#&lt;/a&gt; 源&lt;/h2&gt;
&lt;p&gt;export ROS_MASTER_URI=http://192.168.0.100:11311&lt;br /&gt;
export ROS_HOSTNAME=192.168.0.136&lt;/p&gt;
&lt;h3 id=&#34;自主导航&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自主导航&#34;&gt;#&lt;/a&gt; 自主导航&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行导航节点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch turn_on_wheeltec_robot navigation.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 rviz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看里程计传感器（odom）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rostopic echo /odom &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;摄像头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#摄像头&#34;&gt;#&lt;/a&gt; 摄像头&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实现功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;视觉巡线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物体识别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D 建图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;颜色跟踪&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lsusb&lt;/code&gt;  查看摄像头&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1.png&#34; alt=&#34;wodde&#34; /&gt;&lt;/p&gt;
&lt;p&gt;0502：rgb 摄像头&lt;/p&gt;
&lt;p&gt;0403：深度摄像头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启摄像头&lt;/p&gt;
&lt;p&gt;rgb 摄像头： &lt;code&gt;roslaunch usb_cam usb_cam-test.launch &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;深度摄像头： &lt;code&gt;roslaunch astra_camera astra.launch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;都打开： &lt;code&gt;roslaunch astra_camera astrapro.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;色块跟踪&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#色块跟踪&#34;&gt;#&lt;/a&gt; 色块跟踪&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据要跟踪色块颜色，在 visualTracker.launch 更改，shv 格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行 &lt;code&gt;roalaunch simple_follower visual_follower.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程登陆查看话题 &lt;code&gt;rostpic list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rostopic echo /.......&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;视觉巡线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视觉巡线&#34;&gt;#&lt;/a&gt; 视觉巡线&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;roslaunch simple_follower line_follower.launch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;3d建图导航&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3d建图导航&#34;&gt;#&lt;/a&gt; 3D 建图导航&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 rtabmap&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get update &lt;/code&gt; (更新软件列表)&lt;br /&gt;
 &lt;code&gt;sudo apt-get install ros-noetic-rtabmap-ros&lt;/code&gt; （安装 rtabmap）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跑官方测试包（可选，远程端）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch rtabmap_ros demo_robot_mapping.launch rviz:=true rtabmapviz:=false&lt;/code&gt;  （官方测试例程）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosbag play --clock demo_mapping.bag &lt;/code&gt; （官方测试包，在 /home/wheeltec/ 的路径下执行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建图&lt;br /&gt;
 &lt;code&gt;roslaunch turn_on_wheeltec_robot 3d_mapping.launch&lt;/code&gt; （启动 3d 建图）&lt;br /&gt;
 &lt;code&gt;roslaunch wheeltec_robot_rc keyboard_teleop.launch&lt;/code&gt;   （启动键盘控制节点）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导航&lt;br /&gt;
 &lt;code&gt;roslaunch  turn_on_wheeltec_robot 3d_navigation.launch&lt;/code&gt; （启动 3d 导航）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;纯视觉见图导航&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纯视觉见图导航&#34;&gt;#&lt;/a&gt; 纯视觉见图导航&lt;/h3&gt;
&lt;p&gt;建图：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch  turn_on_wheeltec_robot pure3d_mapping.launch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;导航：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch  turn_on_wheeltec_robot pure3d_navigation.launch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;kcf跟踪&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kcf跟踪&#34;&gt;#&lt;/a&gt; KCF 跟踪&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;roslaunch kcf_tracker.launch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;自主建图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自主建图&#34;&gt;#&lt;/a&gt; 自主建图&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;roslaunch turn_on_wheeltec_robot rrt_slam.launch&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;tf坐标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tf坐标&#34;&gt;#&lt;/a&gt; TF 坐标&lt;/h2&gt;
&lt;h3 id=&#34;ros坐标管理系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ros坐标管理系统&#34;&gt;#&lt;/a&gt; ros 坐标管理系统&lt;/h3&gt;
&lt;h3 id=&#34;tf坐标的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tf坐标的基本概念&#34;&gt;#&lt;/a&gt; TF 坐标的基本概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TF 树：rqt 可视化工具插件，查看所有 tf 坐标之间的链接关系&lt;/p&gt;
&lt;p&gt;安装 rqt：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install ros-%YOUR_ROS_DISTRO%-rqt ros-%YOUR_ROS_DISTRO%-rqt-common-plugins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install ros-%YOUR_ROS_DISTRO%-rqt-robot-plugins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install ros-%YOUR_ROS_DISTRO%-rqt-pr2-dashboard (only when you need PR2 dashboard feature) &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get dist-upgrade&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TF 的 brosdcsster：两个坐标的索引关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TF 的 frame_id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TF 的基坐标：如 map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TF 的消息数据类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ar标签识别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ar标签识别&#34;&gt;#&lt;/a&gt; AR 标签识别&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;roslaunch turn_on_wheeltec_robot ar_label.launch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;生成 ar 标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相应功能包下 &lt;code&gt;rosrun ar_track_alvar createMarker -s 5 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/categories/ROS/Ubuntu/" />
        <category term="ROS" scheme="https://wlp1231.cn/tags/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/tags/Ubuntu/" />
        <updated>2023-01-11T05:38:35.189Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Ubuntu/%E6%96%B0%E5%BB%BAUbuntu%E8%AF%A6%E8%A7%A3/</id>
        <title>Ubuntu安装教程</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Ubuntu/%E6%96%B0%E5%BB%BAUbuntu%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;h3 id=&#34;ubuntu安装教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ubuntu安装教程&#34;&gt;#&lt;/a&gt; Ubuntu 安装教程&lt;/h3&gt;
&lt;h4 id=&#34;安装vmware&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装vmware&#34;&gt;#&lt;/a&gt; 安装 VMware&lt;/h4&gt;
&lt;h4 id=&#34;安装ubuntu1804&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装ubuntu1804&#34;&gt;#&lt;/a&gt; 安装 Ubuntu18.04&lt;/h4&gt;
&lt;h5 id=&#34;更新源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更新源&#34;&gt;#&lt;/a&gt; 更新源&lt;/h5&gt;
&lt;p&gt;在设置找到软件与更新，全选，点击下载自，选择中国，选择清华源&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%BA%901.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%BA%902.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+alt+t&lt;/code&gt;  打开终端，输入 &lt;code&gt;sudo apt-get updata&lt;/code&gt;  更新源&lt;/p&gt;
&lt;h5 id=&#34;设置中文及输入法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置中文及输入法&#34;&gt;#&lt;/a&gt; 设置中文及输入法&lt;/h5&gt;
&lt;p&gt;在终端中直接输入命令 ibus 会出现下图所示界面，说明 Jetson Nano 已经自带了 ibus 输入法环境了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%871.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面为 ibus 下载拼音输入法，输入命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install ibus-pinyin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装完成后进入系统配置 System Settings 界面，选择语言支持选项 Language Support ，如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%872.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后选择 “添加或删除语言” 界面，会系统选择语言支持，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%873.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  此处选择“中文简体”然后单击Apply即可。这个Apply过程会安装一系列中文语言包，如下图所示：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%874.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;安装完成后在语言支持界面将汉语调整到最前面，如下图所示：选中汉语向上拖&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%875.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后单击 “应用到整个系统”。最后将 “键盘输入法系统” 改为 iBus 即可。&lt;/p&gt;
&lt;p&gt;重新启动系统（很重要！！！），然后在终端中输入下述命令进入 ibus 配置界面：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%876.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ibus-setup&lt;/code&gt; &lt;br /&gt;
 在配置界面中单击 “添加” 按钮，然后展开 “汉语” 选项，选择 Intelligent Pinyin。这里如果找不到 “汉语” 选项则可以先关机重启，再重新查找。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%877.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;添加完成后输入下面的命令重启 ibus 即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ibus restart&lt;/code&gt; &lt;br /&gt;
 最后，将桌面顶任务栏中将输入法切成拼音输入法 Pi，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%879.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时就可以使用中文输入了。&lt;/p&gt;
&lt;p&gt;如果没有图标，在设置里更改&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%878.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;安装可切割终端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装可切割终端&#34;&gt;#&lt;/a&gt; 安装可切割终端&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;sudo apt install terminator&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;安装python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装python&#34;&gt;#&lt;/a&gt; 安装 python&lt;/h5&gt;
&lt;h6 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载想要的 Python 版本，本次安装的版本为 Python-3.10.3，下载网址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvc291cmNlLw==&#34;&gt;https://www.python.org/downloads/source/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压，放在指定的目录当中，本次的安装目录为  &lt;code&gt;/usr/local/python&lt;/code&gt; , 将 &lt;code&gt;Python-3.10.3&lt;/code&gt;  放在上述的目录当中，可以用 cp 命令复制 &lt;code&gt;Python-3.10.3&lt;/code&gt;  到该文件夹中 &lt;code&gt;sudo cp -r Python-3.10.3 /usr/local/python&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入目录 &lt;code&gt;cd /usr/local/python&lt;/code&gt; , 运行 configure 文件 &lt;code&gt; sudo ./configure&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;出现报错&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking build system type&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; x86_64&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;pc&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;linux&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;gnu&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking host system type&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; x86_64&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;pc&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;linux&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;gnu&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; python3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; python3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; python3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;enable&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;universalsdk&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;with&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;universal&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;archs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking MACHDEP&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;linux&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; gcc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; cc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;checking &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; cl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exe&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;configure&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; error&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; in `&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;usr&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;local&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;python&#39;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;configure&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; error&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; no acceptable C compiler found in $PATH&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;See `config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&#39; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; more details&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解决方法为安装 gcc&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install gcc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装我们想要的 Python 版本&lt;/p&gt;
&lt;p&gt;运行 configure 文件 &lt;code&gt;sudo ./configure&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行下面的命令安装&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若出现报错： &lt;code&gt;sudo: make：找不到命令&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;执行： &lt;code&gt;sudo apt-get install make&lt;/code&gt; , 再重复 &lt;code&gt;sudo make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再执行 &lt;code&gt;sudo make install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若出现 &lt;code&gt;ModuleNotFoundError: No module named ‘_ctypes&lt;/code&gt;  的错误，用下面的方法解决：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo apt&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;get update&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo apt&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;get upgrade&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo apt&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;get dist&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;upgrade&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo apt&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;get install build&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;essential python&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev python&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;setuptools python&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;pip python&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;smbus build&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;essential libncursesw5&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev libgdbm&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev libc6&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev zlib1g&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev libsqlite3&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev tk&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev libssl&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev openssl libffi&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再执行 &lt;code&gt;sudo make install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若出现报错&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;usr&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;local&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;python&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Modules&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;_cursesmodule&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;c&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; In function ‘_curses_setupterm_impl’&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;usr&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;local&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;python&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Modules&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;_cursesmodule&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;c&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3392&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; error&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; implicit declaration of function ‘setupterm’&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; did you mean ‘set_term’&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Werror&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;implicit&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;function&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;declaration&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;initialised_setupterm &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setupterm&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;term&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; ERR&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                   &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                   set_term&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cc1&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; some warnings being treated as errors&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;building &lt;span class=&#34;token char&#34;&gt;&#39;_curses_panel&#39;&lt;/span&gt; extension&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo sed &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i &lt;span class=&#34;token string&#34;&gt;&#34;s/Werror=implicit-function-declaration/Wno-error/g&#34;&lt;/span&gt; configure&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo make clean&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo make&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sudo make install&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可能会有警告，忽略即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 python3 链接到 python，使在终端输入 pyhton 可打开 python3&lt;/p&gt;
&lt;p&gt;打开终端，输入 &lt;code&gt;sudo gedit .bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在末尾加上 &lt;code&gt;alias python=python3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;安装ros&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装ros&#34;&gt;#&lt;/a&gt; 安装 ros&lt;/h5&gt;
&lt;p&gt;挂上代理，按照官网教程步骤即可。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dpa2kucm9zLm9yZy9yb3NidWlsZA==&#34;&gt;rosbuild - ROS Wiki&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;安装opencv&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装opencv&#34;&gt;#&lt;/a&gt; 安装 opencv&lt;/h5&gt;
&lt;h6 id=&#34;1安装依赖环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1安装依赖环境&#34;&gt;#&lt;/a&gt; 1. 安装依赖环境&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo apt install cmake&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libatlas-base-dev gfortran libgtk2.0-dev libjpeg-dev libpng-dev mlocate&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;2下载opencv-451&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2下载opencv-451&#34;&gt;#&lt;/a&gt; 2. 下载 opencv 4.5.1&lt;/h6&gt;
&lt;p&gt;下载 Sources&lt;/p&gt;
&lt;p&gt;git clone &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW5jdi9vcGVuY3YuZ2l0&#34;&gt;https://github.com/opencv/opencv.git&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;或直接在官网下载压缩包&lt;/p&gt;
&lt;h6 id=&#34;3编译安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3编译安装&#34;&gt;#&lt;/a&gt; 3. 编译安装&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将 opencv-4.5.1.zip 拖拽入虚拟机中，并解压&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开解压后的文件夹，并新建文件夹 build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开终端，进入 build 目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入命令&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local .. -DOPENCV_GENERATE_PKGCONFIG=ON&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo make &lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo make install&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;4配置环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4配置环境&#34;&gt;#&lt;/a&gt; 4. 配置环境&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo gedit /etc/ld.so.conf.d/opencv.conf&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在文档中追加&lt;/p&gt;
&lt;p&gt;/usr/local/lib&lt;/p&gt;
&lt;p&gt;并保存退出&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;更新动态链接库 ** &lt;code&gt;sudo ldconfig&lt;/code&gt; **&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo gedit /etc/bash.bashrc&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在文档中追加&lt;/p&gt;
&lt;p&gt;PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig&lt;/p&gt;
&lt;p&gt;export PKG_CONFIG_PATH&lt;/p&gt;
&lt;p&gt;并保存退出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;source /etc/bash.bashrc&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo updatedb&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;sudo gedit /etc/profile&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在文档中追加&lt;/p&gt;
&lt;p&gt;export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH&lt;/p&gt;
&lt;p&gt;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib&lt;/p&gt;
&lt;p&gt;并保存退出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更新环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;source /etc/profile&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;5验证安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5验证安装&#34;&gt;#&lt;/a&gt; 5. 验证安装&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;pkg-config opencv4 --modversion&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;opencv_version&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;6链接python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6链接python&#34;&gt;#&lt;/a&gt; 6. 链接 python&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;sudo apt install python3-pip&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;pip3 install numpy matplotlib&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;pip3 install opencv-python&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;pip3 install opencv-contrib-python&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;7验证安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7验证安装&#34;&gt;#&lt;/a&gt; 7. 验证安装&lt;/h6&gt;
&lt;p&gt;打开终端，输入 python3，进入 python 的 shell 环境&lt;/p&gt;
&lt;p&gt;依次输入&lt;/p&gt;
&lt;p&gt;import cv2&lt;/p&gt;
&lt;p&gt;print(cv2.&lt;strong&gt;version&lt;/strong&gt;)&lt;/p&gt;
&lt;h5 id=&#34;安装vscode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装vscode&#34;&gt;#&lt;/a&gt; 安装 VScode&lt;/h5&gt;
&lt;p&gt;vscode 下载:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcz9zdGFydD10cnVl&#34;&gt;https://code.visualstudio.com/docs?start=true&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;vscode 安装与卸载&lt;/p&gt;
&lt;p&gt;** 方式 1:** 双击安装即可 (或右击选择安装)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式 2:&lt;/strong&gt; &lt;code&gt;sudo dpkg -i xxxx.deb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;卸载&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo dpkg --purge  code&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在左下角 “显示应用程序里找到 “vscode，收藏&lt;/p&gt;
&lt;p&gt;插件安装&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;更改字体间距&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在文件首选项里打开设置&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;找到字体，随便选择一个&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo docker run -it \
-v /tmp/.X11-unix:/tmp/.X11-unix \
-v /home/wlp/skyeye-workspace/:/home/skyeye-workspace \
--restart=always \
-e DISPLAY=$DISPLAY \
-e GDK_SCALE \
-e GDK_DPI_SCALE \
-e PATH=&amp;quot;/home/skyeye-workspace/opt/skyeye/bin:$PATH&amp;quot; \
--name skyeye skyeyehub/dev:v1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sudo docker exec -it skyeye /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R $(id -u):$(id -g) /home/wlp/skyeye-workspace
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/categories/ROS/Ubuntu/" />
        <category term="ROS" scheme="https://wlp1231.cn/tags/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/tags/Ubuntu/" />
        <updated>2023-01-11T05:38:35.188Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Ubuntu/%E5%85%A8%E5%90%91%E8%BD%AE%E5%B0%8F%E8%BD%A6/</id>
        <title>全向轮小车</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Ubuntu/%E5%85%A8%E5%90%91%E8%BD%AE%E5%B0%8F%E8%BD%A6/"/>
        <content type="html">&lt;h1 id=&#34;全向轮小车&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全向轮小车&#34;&gt;#&lt;/a&gt; 全向轮小车&lt;/h1&gt;
&lt;h2 id=&#34;ssh通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssh通信&#34;&gt;#&lt;/a&gt; ssh 通信&lt;/h2&gt;
&lt;h3 id=&#34;连接准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接准备&#34;&gt;#&lt;/a&gt; 连接准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;  查看 ip 地址，如 192.168.43.128&lt;/li&gt;
&lt;li&gt;用于连接的两台电脑处于同一局域网内，手机热点&lt;/li&gt;
&lt;li&gt;查看主机名，终端输入 &lt;code&gt;hostname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;终端输入 &lt;code&gt;sudo gedit /etc/hosts&lt;/code&gt; , 在文件中第三行输入本机 ip 地址和主机名，第四行输入待连机 ip 地址和主机名（忽略）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo /ect/init.d/networking restart&lt;/code&gt; , 若报错，在 /etc/init.d 中找到 network 文件，将之替换 networking。仍然报错，将 /etc/init.d 改为 service，还报错，hosts 中 ip 地址写错，检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接&#34;&gt;#&lt;/a&gt; 连接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装 chrony 包和 ssh 服务器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install chrony&lt;/code&gt;   &lt;code&gt;sudo apt-get install openssh-server&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ping 待连机ip地址或主机名&lt;/code&gt; ，建议 ip 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssh 待连机用户名@待连机主机名或ip地址&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接成功&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除冲突ip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除冲突ip&#34;&gt;#&lt;/a&gt; 删除冲突 IP&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -f &amp;quot;/home/wlp/.ssh/known_hosts&amp;quot; -R &amp;quot;joul&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看系统是否已经安装 ssh 客户端或者服务端：dpkg -l | grep ssh。&lt;br /&gt;
启动 ssh 服务：sudo /etc/init.d/ssh start&lt;br /&gt;
 关闭 ssh 服务：sudo /etc/init.d/ssh stop&lt;br /&gt;
 重启 ssh 服务：sudo /etc/init.d/ssh restart&lt;/p&gt;
&lt;h2 id=&#34;连接控制mini小车1804密码raspberry&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接控制mini小车1804密码raspberry&#34;&gt;#&lt;/a&gt; 连接控制 mini 小车（18.04 密码：raspberry）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;打开终端，通过 ssh 连接到小车上的树莓派，192.168.0.100&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh -Y wheeltec@192.168.0.100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;密码：dongguan&lt;/p&gt;
&lt;p&gt;注：没有 - Y，图形化等功能无法使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程登录后： &lt;code&gt;roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程登录后： &lt;code&gt;roslaunch wheeltec_robot_rc keyboard_teleop.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上述操作可以键盘控制小车移动&lt;/p&gt;
&lt;h3 id=&#34;启动雷达&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动雷达&#34;&gt;#&lt;/a&gt; 启动雷达&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;roslaunch rplidar_ros rplidar.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看雷达发布的话题&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rostopic list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看数据类型&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosmsg show sensor_msgs/LaserScan &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;控制小车雷达建图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制小车雷达建图&#34;&gt;#&lt;/a&gt; 控制小车雷达建图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;终端 ssh 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;终端输入 &lt;code&gt;roslaunch turn_on_wheeltec_robot mapping.launch &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新终端输入 &lt;code&gt;rviz&lt;/code&gt; , 使用远程终端较卡，使用本机终端&lt;/p&gt;
&lt;p&gt;.bushrc 文件加入&lt;/p&gt;
&lt;p&gt;export ROS_MASTER_URI=http://192.168.0.100:11311&lt;br /&gt;
export ROS_HOSTNAME=192.168.0.136&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制小车走完全场，完成建图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存图形:&lt;/p&gt;
&lt;p&gt;一键保存： &lt;code&gt;roslaunch turn_on_wheeltec_robot map_saver.launch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开地图路径： &lt;code&gt;cd /home/wheeltec/wheeltec_robot/src/turn_on_wheeltec_robot/map&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;保存地图： &lt;code&gt;rosrun map_server map_saver -f 地图名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看图形：将远程文件挂载到本机 &lt;code&gt;sudo mount -t nfs 192.168.0.100:/home/wheeltec/wheeltec_robot /mnt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开 mnt 文件查看，保存路径在保存图形时终端有显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建图&lt;br /&gt;
 mapping.launch&lt;br /&gt;
 小车初始化节点：turn_on_wheeltec_robot.launch&lt;br /&gt;
 雷达节点：rplidar.launch&lt;br /&gt;
gmapping 建图节点：algorithm_gmapping.launch&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建图算法切换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建图算法切换&#34;&gt;#&lt;/a&gt; 建图算法切换&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;修改 mapping.launch 文件开头 &lt;code&gt;&amp;lt;arg name=&amp;quot;mapping_node&amp;quot; default=&amp;quot;gmapping&amp;quot; doc=&amp;quot;opt:gmapping,hector,cartographer,karto&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;雷达跟随&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#雷达跟随&#34;&gt;#&lt;/a&gt; 雷达跟随&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;roslaunch simple_follower laser_follower.launch&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;源bashrc文件本机终端使用rviz&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#源bashrc文件本机终端使用rviz&#34;&gt;#&lt;/a&gt; 源（.bashrc 文件，本机终端使用 rviz）&lt;/h2&gt;
&lt;p&gt;export ROS_MASTER_URI=http://192.168.0.100:11311&lt;br /&gt;
export ROS_HOSTNAME=192.168.0.136&lt;/p&gt;
&lt;h3 id=&#34;自主导航&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自主导航&#34;&gt;#&lt;/a&gt; 自主导航&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行导航节点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch turn_on_wheeltec_robot navigation.launch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 rviz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看里程计传感器（odom）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rostopic echo /odom &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3d建图导航&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3d建图导航&#34;&gt;#&lt;/a&gt; 3D 建图导航&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 rtabmap&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get update &lt;/code&gt; (更新软件列表)&lt;br /&gt;
 &lt;code&gt;sudo apt-get install ros-noetic-rtabmap-ros&lt;/code&gt; （安装 rtabmap）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跑官方测试包（可选，远程端）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch rtabmap_ros demo_robot_mapping.launch rviz:=true rtabmapviz:=false&lt;/code&gt;  （官方测试例程）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rosbag play --clock demo_mapping.bag &lt;/code&gt; （官方测试包，在 /home/wheeltec/ 的路径下执行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建图&lt;br /&gt;
 &lt;code&gt;roslaunch turn_on_wheeltec_robot 3d_mapping.launch&lt;/code&gt; （启动 3d 建图）&lt;br /&gt;
 &lt;code&gt;roslaunch wheeltec_robot_rc keyboard_teleop.launch&lt;/code&gt;   （启动键盘控制节点）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导航&lt;br /&gt;
 &lt;code&gt;roslaunch  turn_on_wheeltec_robot 3d_navigation.launch&lt;/code&gt; （启动 3d 导航）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;纯视觉建图导航&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纯视觉建图导航&#34;&gt;#&lt;/a&gt; 纯视觉建图导航&lt;/h3&gt;
&lt;p&gt;建图：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch  turn_on_wheeltec_robot pure3d_mapping.launch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;导航：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;roslaunch  turn_on_wheeltec_robot pure3d_navigation.launch&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;自主建图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自主建图&#34;&gt;#&lt;/a&gt; 自主建图&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;roslaunch turn_on_wheeltec_robot rrt_slam.launch&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;导航参数设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导航参数设置&#34;&gt;#&lt;/a&gt; 导航参数设置&lt;/h2&gt;
&lt;p&gt;如图所示的这些文件定义了一系列导航相关参数，包括膨胀半径、机器人的尺寸、机器人的最大最小速度、加速度等&lt;/p&gt;
&lt;p&gt;![wode](C:\Users\wlp\Pictures\Camera Roll\ 出征 - 初试 \QQ 截图 20211013231448.png)&lt;/p&gt;
&lt;p&gt;![wode](C:\Users\wlp\Pictures\Camera Roll\ 出征 - 初试 \QQ 截图 20211013231503.png)&lt;/p&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/categories/ROS/Ubuntu/" />
        <category term="ROS" scheme="https://wlp1231.cn/tags/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/tags/Ubuntu/" />
        <updated>2023-01-11T05:38:35.187Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Ubuntu/%E5%8F%8C%E7%9B%AET265%E4%BD%BF%E7%94%A8/</id>
        <title>双目T265使用</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Ubuntu/%E5%8F%8C%E7%9B%AET265%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;双目t265使用github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双目t265使用github&#34;&gt;#&lt;/a&gt; 双目 T265 使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0ludGVsUmVhbFNlbnNlL2xpYnJlYWxzZW5zZS9ibG9iL2RldmVsb3BtZW50L2RvYy9kaXN0cmlidXRpb25fbGludXgubWQjaW5zdGFsbGluZy10aGUtcGFja2FnZXM=&#34;&gt; github&lt;/span&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;realsense T265 传感器输出的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双目摄像头可以采集到 848X800 分辨率下 30FPS 的鱼眼图像数据；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IMU 数据（包括 6DoF 的 Pose，3DoF 的加速度计，3DoF 的陀螺仪）&lt;br /&gt;
而且以上数据的出厂时全都进行了标定，并且都保存在传感器中，你可以通过传感器的输出很容易获得内部的标定数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;建议按照 github 上的安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若运行后出现公匙问题，则运行 &lt;code&gt;sudo gedit /etc/apt/sources.list&lt;/code&gt;  更新下载源 [源](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9taXJyb3JzLnVzdGMuZWR1LmNuL3JlcG9nZW4v&#34;&gt;LUG&#39;s repo file generator (ustc.edu.cn)&lt;/span&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ubuntu16   &lt;code&gt;sudo add-apt-repository &amp;quot;deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo xenial main&amp;quot; -u&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ubuntu18   &lt;code&gt;sudo add-apt-repository &amp;quot;deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo bionic main&amp;quot; -u&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install librealsense2-dkms librealsense2-utils librealsense2-dev librealsense2-dbg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第五步安装成功了，将你的 realsense T265 连接到电脑 USB（至少 USB3.0）口上，然后终端中输入以下命令就能看到传感器输出的数据了。 &lt;code&gt;realsense-viewer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程使用realsense-t265&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程使用realsense-t265&#34;&gt;#&lt;/a&gt; 编程使用 realsense T265&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 IMU 积分出位姿&lt;br /&gt;
当你按照上述 2 中的方法进行了必要程序安装之后，你就已经成功的把 realsense T265 传感器所要用的库文件和头文件都安装到系统中了。所以我们直接编程使用就行了。下面我向你介绍一下如何通过传感器输出的 IMU 信息，计算传感器运动的轨迹。其实就是通过 IMU 的速度和加速度信息积分产生位姿（位置和角度）信息。不废话，直接上代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2019 Intel Corporation. All Rights Reserved.
#include &amp;lt;librealsense2/rs.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iomanip&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;mutex&amp;gt;

#include &amp;lt;math.h&amp;gt;
#include &amp;lt;float.h&amp;gt;

//欧拉角转四元数，两种不同的旋转表示方法之间转换
//（如果你不懂的话，不必深究，这里慢慢来，你一时半会估计很难理解啥是四元数）
inline rs2_quaternion quaternion_exp(rs2_vector v)
&amp;#123;
    float x = v.x/2, y = v.y/2, z = v.z/2, th2, th = sqrtf(th2 = x*x + y*y + z*z);
    float c = cosf(th), s = th2 &amp;lt; sqrtf(120*FLT_EPSILON) ? 1-th2/6 : sinf(th)/th;
    rs2_quaternion Q = &amp;#123; s*x, s*y, s*z, c &amp;#125;;
    return Q;
&amp;#125;

//两个四元素之间进行“乘法”,相当于是旋转之后再旋转
inline rs2_quaternion quaternion_multiply(rs2_quaternion a, rs2_quaternion b)
&amp;#123;
    rs2_quaternion Q = &amp;#123;
        a.x * b.w + a.w * b.x - a.z * b.y + a.y * b.z,
        a.y * b.w + a.z * b.x + a.w * b.y - a.x * b.z,
        a.z * b.w - a.y * b.x + a.x * b.y + a.w * b.z,
        a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z,
    &amp;#125;;
    return Q;
&amp;#125;

//通过离散欧拉积分计算出位姿（旋转和位置）
rs2_pose predict_pose(rs2_pose &amp;amp; pose, float dt_s)
&amp;#123;
    rs2_pose P = pose;
    P.translation.x = dt_s * (dt_s/2 * pose.acceleration.x + pose.velocity.x) + pose.translation.x;
    P.translation.y = dt_s * (dt_s/2 * pose.acceleration.y + pose.velocity.y) + pose.translation.y;
    P.translation.z = dt_s * (dt_s/2 * pose.acceleration.z + pose.velocity.z) + pose.translation.z;
    rs2_vector W = &amp;#123;
            dt_s * (dt_s/2 * pose.angular_acceleration.x + pose.angular_velocity.x),
            dt_s * (dt_s/2 * pose.angular_acceleration.y + pose.angular_velocity.y),
            dt_s * (dt_s/2 * pose.angular_acceleration.z + pose.angular_velocity.z),
    &amp;#125;;
    P.rotation = quaternion_multiply(quaternion_exp(W), pose.rotation);
    return P;
&amp;#125;

int main(int argc, char * argv[]) try
&amp;#123;
  	//声明一个realsense传感器设备
    rs2::pipeline pipe;
    // 创建一个配置信息
    rs2::config cfg;
    //告诉配置信息，我需要传感器的POSE和6DOF IMU数据
    cfg.enable_stream(RS2_STREAM_POSE, RS2_FORMAT_6DOF);

    
    std::mutex mutex;
    //回调函数
    auto callback = [&amp;amp;](const rs2::frame&amp;amp; frame)
    &amp;#123;
        std::lock_guard&amp;lt;std::mutex&amp;gt; lock(mutex);
        if (rs2::pose_frame fp = frame.as&amp;lt;rs2::pose_frame&amp;gt;()) &amp;#123;
            rs2_pose pose_data = fp.get_pose_data();
            auto now = std::chrono::system_clock::now().time_since_epoch();
            double now_ms = std::chrono::duration_cast&amp;lt;std::chrono::milliseconds&amp;gt;(now).count();
            double pose_time_ms = fp.get_timestamp();
            float dt_s = static_cast&amp;lt;float&amp;gt;(std::max(0., (now_ms - pose_time_ms)/1000.));
            rs2_pose predicted_pose = predict_pose(pose_data, dt_s);
            std::cout &amp;lt;&amp;lt; &amp;quot;Predicted &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; dt_s*1000 &amp;lt;&amp;lt; &amp;quot;ms &amp;quot; &amp;lt;&amp;lt;
                    &amp;quot;Confidence: &amp;quot; &amp;lt;&amp;lt; pose_data.tracker_confidence &amp;lt;&amp;lt; &amp;quot; T: &amp;quot; &amp;lt;&amp;lt;
                    predicted_pose.translation.x &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt;
                    predicted_pose.translation.y &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt;
                    predicted_pose.translation.z &amp;lt;&amp;lt; &amp;quot; (meters)   \r&amp;quot;;
        &amp;#125;
    &amp;#125;;

    //开始接收数据，接收数据之后进入回调函数进行处理
    rs2::pipeline_profile profiles = pipe.start(cfg, callback);
    std::cout &amp;lt;&amp;lt; &amp;quot;started thread\n&amp;quot;;
    while(true) &amp;#123;
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    &amp;#125;

    return EXIT_SUCCESS;
&amp;#125;
catch (const rs2::error &amp;amp; e)
&amp;#123;
    std::cerr &amp;lt;&amp;lt; &amp;quot;RealSense error calling &amp;quot; &amp;lt;&amp;lt; e.get_failed_function() &amp;lt;&amp;lt; &amp;quot;(&amp;quot; &amp;lt;&amp;lt; e.get_failed_args() &amp;lt;&amp;lt; &amp;quot;):\n    &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    return EXIT_FAILURE;
&amp;#125;
catch (const std::exception&amp;amp; e)
&amp;#123;
    std::cerr &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    return EXIT_FAILURE;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源文件中牵扯到一些数学，不必深究看过就算过。有了源文件我们还需要 &lt;code&gt;CMakeLists.txt&lt;/code&gt;  文件，这里你直接复制我写的就可以运行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;cmake_minimum_required(VERSION 3.1.0)
project(test)
set(CMAKE_BUILD_TYPE &amp;quot;release&amp;quot;)

add_executable(test main.cpp) #通过main.cpp编译生成可执行文件test
target_link_libraries(test realsense2) #将realsense2的库文件链接给test
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将源文件 &lt;code&gt;main.cpp&lt;/code&gt;  和 &lt;code&gt;CMakeLists.txt&lt;/code&gt;  放在同一个文件夹下，然后顺序执行以下命令就可以编译生成可执行文件了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后将 realsense T265 连接上电脑（至少 USB3.0），然后运行刚刚生成的程序 &lt;code&gt;test&lt;/code&gt; ，移动移动传感器，就可以得到位姿信息了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你运行的时候报错：error while loading shared libraries: librealsense2.so.2.34: cannot open shared object file: no such file or directory，那你需要将 CMakeLists.txt 中的 librealsense2 的链接方式改为如下方式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;find_package(realsense2 REQUIRED)
include_directories(  $&amp;#123;realsense2_INCLUDE_DIR&amp;#125; )
target_link_libraries(test $&amp;#123;realsense2_LIBRARY&amp;#125; )
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用opencv显示双目摄像头的数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用opencv显示双目摄像头的数据&#34;&gt;#&lt;/a&gt; 用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/ZnJvbT1wY19ibG9nX2hpZ2hsaWdodCZhbXA7cT1vcGVuY3Y=&#34;&gt; opencv&lt;/span&gt; 显示双目摄像头的数据&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有了 3.1 的基础，这里我就直接上代码了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;librealsense2/rs.hpp&amp;gt;
#include &amp;lt;opencv2/opencv.hpp&amp;gt;

int main()&amp;#123;

    rs2::config cfg;
    cfg.enable_stream(RS2_STREAM_FISHEYE,1, RS2_FORMAT_Y8);
    cfg.enable_stream(RS2_STREAM_FISHEYE,2, RS2_FORMAT_Y8);
    rs2::pipeline pipe;
    pipe.start(cfg);

    rs2::frameset data;

    while (1)&amp;#123;
        data = pipe.wait_for_frames();
        rs2::frame image_left = data.get_fisheye_frame(1);
        rs2::frame image_right = data.get_fisheye_frame(2);

        if (!image_left || !image_right)
            break;

        cv::Mat cv_image_left(cv::Size(848, 800), CV_8U, (void*)image_left.get_data(), cv::Mat::AUTO_STEP);
        cv::Mat cv_image_right(cv::Size(848, 800), CV_8U, (void*)image_right.get_data(), cv::Mat::AUTO_STEP);

        cv::imshow(&amp;quot;left&amp;quot;, cv_image_left);
        cv::imshow(&amp;quot;right&amp;quot;, cv_image_right);
        cv::waitKey(1);
    &amp;#125;

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的 &lt;code&gt;CMakeLists.txt&lt;/code&gt;  文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;cmake_minimum_required(VERSION 3.1.0)
project(test)
set(CMAKE_BUILD_TYPE &amp;quot;release&amp;quot;)

find_package(OpenCV)

include_directories($&amp;#123;OpenCV_INCLUDE_DIRS&amp;#125;)

add_executable(test main.cpp)
target_link_libraries(test
        realsense2
        $&amp;#123;OpenCV_LIBS&amp;#125;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/categories/ROS/Ubuntu/" />
        <category term="ROS" scheme="https://wlp1231.cn/tags/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/tags/Ubuntu/" />
        <updated>2023-01-11T05:38:35.187Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Ubuntu/ros%E7%AE%80%E4%BB%8B/</id>
        <title>ROS</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Ubuntu/ros%E7%AE%80%E4%BB%8B/"/>
        <content type="html">&lt;h1 id=&#34;ros&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ros&#34;&gt;#&lt;/a&gt; ros&lt;/h1&gt;
&lt;h2 id=&#34;ros发展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ros发展&#34;&gt;#&lt;/a&gt; ROS 发展&lt;/h2&gt;
&lt;h2 id=&#34;ros核心概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ros核心概念&#34;&gt;#&lt;/a&gt; ros 核心概念&lt;/h2&gt;
&lt;h3 id=&#34;节点与节点管理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#节点与节点管理器&#34;&gt;#&lt;/a&gt; 节点与节点管理器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;节点 (node)—— 执行单元&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节点管理器 (ROS Master)—— 控制中心&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/F4CAF53D748FB9C1BC00BFA845E8137D.jpg&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;话题通讯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#话题通讯&#34;&gt;#&lt;/a&gt; 话题通讯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;话题 (Topic)—— 异步通讯机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息 (Message)—— 话题数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/DA5B5437595A7C45C4094F420A34B6E8.jpg&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务通讯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务通讯&#34;&gt;#&lt;/a&gt; 服务通讯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务 (Service)—— 同步通讯机制&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/198CF5D08B32B6501ED1B27215D2C60B.jpg&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数&#34;&gt;#&lt;/a&gt; 参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参数 (Parameter)—— 全局共享字典&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/F84FDE814DC582200E9F6A6E314D328C.jpg&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统&#34;&gt;#&lt;/a&gt; 文件系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能包 (Package)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能包清单 (Package manifest)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元功能包 (Meta Packages)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1322E943259F5DEDF02695BF03BE17C1.jpg&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ros命令行工具使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ros命令行工具使用&#34;&gt;#&lt;/a&gt; ROS 命令行工具使用&lt;/h2&gt;
&lt;h3 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h3&gt;
&lt;h3 id=&#34;运行小海龟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行小海龟&#34;&gt;#&lt;/a&gt; 运行小海龟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;roscore&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;rosrun turtlesim 双击 tab&lt;/li&gt;
&lt;li&gt;rosrun turtlesim turtlesim_node&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;rosrun turtlesim turtle_teleop_key&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令行控制小海龟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令行控制小海龟&#34;&gt;#&lt;/a&gt; 命令行控制小海龟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rqt_graph&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rosnode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rosnode info /turtlesim&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rostopic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rostopic pub /turtle1/cmd_vel geometry_msgs/Twist (双击 tab)&lt;/p&gt;
&lt;p&gt;海龟绕 z 轴转&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rosmsg show geometry_msgs/Twist&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rosservice&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rosservice call /spawn (双击 tab，新加一只海龟)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rosbag record -a -O cmd_record (保存运行数据)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rosbag play cmd_record.bag (按上次数据运行)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2010-01-56%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2010-00-40%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-32-43%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-38-42%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-39-23%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-39-34%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-39-46%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建工作空间与功能包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建工作空间与功能包&#34;&gt;#&lt;/a&gt; 创建工作空间与功能包&lt;/h2&gt;
&lt;h3 id=&#34;功能空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能空间&#34;&gt;#&lt;/a&gt; 功能空间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;src (代码空间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;build (编译空间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;devel (开发空间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install (安装空间)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/84D8CBC11E2562F75491728479EB1A0D.jpg&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建工作空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建工作空间&#34;&gt;#&lt;/a&gt; 创建工作空间&lt;/h3&gt;
&lt;h4 id=&#34;创建工作空间-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建工作空间-2&#34;&gt;#&lt;/a&gt; 创建工作空间&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;mkdir -p ~/catkin_ws/src&lt;/li&gt;
&lt;li&gt;cd ~/catkin_ws/src&lt;/li&gt;
&lt;li&gt;catkin_init_workspace&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编译工作空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译工作空间&#34;&gt;#&lt;/a&gt; 编译工作空间&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cd ~/catkin_ws/&lt;/li&gt;
&lt;li&gt;catkin_make&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;设置环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置环境变量&#34;&gt;#&lt;/a&gt; 设置环境变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;source devel/setup.bash&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;检查环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查环境变量&#34;&gt;#&lt;/a&gt; 检查环境变量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;echo $ROS_PACKAGE_PATH&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建功能包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建功能包&#34;&gt;#&lt;/a&gt; 创建功能包&lt;/h3&gt;
&lt;h4 id=&#34;创建功能包-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建功能包-2&#34;&gt;#&lt;/a&gt; 创建功能包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cd ~/catkin_ws/src&lt;/li&gt;
&lt;li&gt;catkin_create_pkg test_pkg std_msgs roscpp rospy&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/5AD81B88DDB3E851DFEEA2D62E81144D.jpg&#34; alt=&#34;wode&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编译功能包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译功能包&#34;&gt;#&lt;/a&gt; 编译功能包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cd ~catkin_ws&lt;/li&gt;
&lt;li&gt;catkin_make&lt;/li&gt;
&lt;li&gt;source ~/catkin_ws/devel/setup.bash&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发布者publisher的编程实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#发布者publisher的编程实现&#34;&gt;#&lt;/a&gt; 发布者 Publisher 的编程实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建功能包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在功能包的 src 中创建文档，输入代码 (touch 文档名)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置发布者代码编译规则 (插入到 CM。。。.txt 中 Install 前)&lt;/p&gt;
&lt;p&gt;add_executable(velocity&lt;/p&gt;
&lt;p&gt;_publisher src/velocity_publisher.cpp)&lt;/p&gt;
&lt;p&gt;target_link_libraries(velocity_publisher ${catkin_LIBRARIES})&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回到工作空间根目录进行 ——catkin_make&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置环境变量 ——source delel/setup.bash (ctrl+h, 找到隐藏文件，固定)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启终端，启动 ros，海龟，第三个终端 ——rosrun 功能包名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;订阅者subscriber的编程实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#订阅者subscriber的编程实现&#34;&gt;#&lt;/a&gt; 订阅者 Subscriber 的编程实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在功能包的 src 中创建文档，输入代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置发布者代码编译规则 (插入到 CM。。。.txt 中 Install 前)&lt;/p&gt;
&lt;p&gt;add_executable(pose_subscriber src/pose_subscriber.cpp)&lt;br /&gt;
target_link_libraries(pose_subscriber ${catkin_LIBRARIES})&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回到工作空间根目录进行 ——catkin_make&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置环境变量 ——source delel/setup.bash (发布者过程以固定，可忽略)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启终端，启动 ros，海龟，第三个终端 ——rosrun 功能包名 文档名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;话题消息的定义与使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#话题消息的定义与使用&#34;&gt;#&lt;/a&gt; 话题消息的定义与使用&lt;/h2&gt;
&lt;h3 id=&#34;自定义话题消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义话题消息&#34;&gt;#&lt;/a&gt; 自定义话题消息&lt;/h3&gt;
&lt;h4 id=&#34;定义msg文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义msg文件&#34;&gt;#&lt;/a&gt; 定义 msg 文件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;touch Person.msg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据接口的定义&lt;/p&gt;
&lt;p&gt;string name&lt;br /&gt;
uint8 sex&lt;br /&gt;
uint8 age&lt;/p&gt;
&lt;p&gt;uint8 unknown = 0&lt;br /&gt;
uint8 male = 1&lt;br /&gt;
uint8 female = 2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;在packagexml中添加功能包依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在packagexml中添加功能包依赖&#34;&gt;#&lt;/a&gt; 在 package.xml 中添加功能包依赖&lt;/h4&gt;
&lt;p&gt;&amp;lt;build_depend&amp;gt;message_generation&amp;lt;/build_depend&amp;gt;&lt;br /&gt;
&amp;lt;exec_depend&amp;gt;message_runtime&amp;lt;/exec_depend&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;在cmakeliststxt添加编译选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在cmakeliststxt添加编译选项&#34;&gt;#&lt;/a&gt; 在 CMakeLists.txt 添加编译选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;find_package( …… message_generation)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add_message_files(FILES Person.msg)&lt;br /&gt;
generate_messages(DEPENDENCIES std_msgs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;catkin_package(…… message_runtime)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编译生成相关语言文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译生成相关语言文件&#34;&gt;#&lt;/a&gt; 编译生成相关语言文件&lt;/h4&gt;
&lt;h4 id=&#34;配置代码编译规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置代码编译规则&#34;&gt;#&lt;/a&gt; 配置代码编译规则&lt;/h4&gt;
&lt;p&gt;*/add_executable(person_publisher src/person_publisher.cpp)&lt;br /&gt;
*/target_link_libraries(person_publisher ${catkin_LIBRARIES})&lt;br /&gt;
*/add_dependencies(person_publisher ${PROJECT_NAME}_generate_messages_cpp)&lt;/p&gt;
&lt;p&gt;*/add_executable(person_subscriber src/person_subscriber.cpp)&lt;br /&gt;
*/target_link_libraries(person_subscriber ${catkin_LIBRARIES})&lt;br /&gt;
*/add_dependencies(person_subscriber ${PROJECT_NAME}_generate_messages_cpp)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425094112.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;客户端client的编程实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端client的编程实现&#34;&gt;#&lt;/a&gt; 客户端 Client 的编程实现&lt;/h2&gt;
&lt;h3 id=&#34;创建功能包-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建功能包-3&#34;&gt;#&lt;/a&gt; 创建功能包&lt;/h3&gt;
&lt;p&gt;catkin_create_pkg learning_service roscpp rospy std_msgs geometry_msgs turtlesim&lt;/p&gt;
&lt;h3 id=&#34;创建客户端代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建客户端代码&#34;&gt;#&lt;/a&gt; 创建客户端代码&lt;/h3&gt;
&lt;h3 id=&#34;配置客户端代码编译规则c&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置客户端代码编译规则c&#34;&gt;#&lt;/a&gt; 配置客户端代码编译规则 (c++)&lt;/h3&gt;
&lt;p&gt;add_executable(turtle_spawn src/turtle_spawn.cpp)&lt;br /&gt;
target_link_libraries(turtle_spawn ${catkin_LIBRARIES})&lt;/p&gt;
&lt;h3 id=&#34;运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行&#34;&gt;#&lt;/a&gt; 运行&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425094547.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务端service的编程实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端service的编程实现&#34;&gt;#&lt;/a&gt; 服务端 Service 的编程实现&lt;/h2&gt;
&lt;h3 id=&#34;创建代码并配置编译规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建代码并配置编译规则&#34;&gt;#&lt;/a&gt; 创建代码并配置编译规则&lt;/h3&gt;
&lt;p&gt;add_executable(turtle_command_server src/turtle_command_server.cpp)&lt;br /&gt;
target_link_libraries(turtle_command_server ${catkin_LIBRARIES})&lt;/p&gt;
&lt;h3 id=&#34;编译并运行服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译并运行服务器&#34;&gt;#&lt;/a&gt; 编译并运行服务器&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095204.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425120556.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务数据的定义与使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务数据的定义与使用&#34;&gt;#&lt;/a&gt; 服务数据的定义与使用&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095447.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义服务数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义服务数据&#34;&gt;#&lt;/a&gt; 自定义服务数据&lt;/h3&gt;
&lt;h4 id=&#34;定义srv文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义srv文件&#34;&gt;#&lt;/a&gt; 定义 srv 文件&lt;/h4&gt;
&lt;h4 id=&#34;在packagexml中添加功能包依赖-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在packagexml中添加功能包依赖-2&#34;&gt;#&lt;/a&gt; 在 package.xml 中添加功能包依赖&lt;/h4&gt;
&lt;p&gt;&amp;lt;build_depend&amp;gt;message_generation&amp;lt;/build_depend&amp;gt;&lt;br /&gt;
&amp;lt;exec_depend&amp;gt;message_runtime&amp;lt;/exec_depend&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;在cmakeliststxt添加编译选项-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在cmakeliststxt添加编译选项-2&#34;&gt;#&lt;/a&gt; 在 CMakeLists.txt 添加编译选项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;find_package(...... message_generation)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add_service_files(FILES Person.srv)&lt;br /&gt;
generates_message(DEPENDENCIES std_msgs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;catkin_package(...... message_runtime)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译&#34;&gt;#&lt;/a&gt; 编译&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095458.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建服务端代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建服务端代码&#34;&gt;#&lt;/a&gt; 创建服务端代码&lt;/h3&gt;
&lt;h3 id=&#34;创建客户端代码-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建客户端代码-2&#34;&gt;#&lt;/a&gt; 创建客户端代码&lt;/h3&gt;
&lt;h3 id=&#34;配置编译规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置编译规则&#34;&gt;#&lt;/a&gt; 配置编译规则&lt;/h3&gt;
&lt;p&gt;add_executable(person_server src/person_server.cpp)&lt;br /&gt;
target_link_libraries(person_server ${catkin_LIBRARIES})&lt;br /&gt;
add_dependencies(person_server ${PROJECT_NAME}_gencpp)&lt;/p&gt;
&lt;p&gt;add_executable(person_client src/person_client.cpp)&lt;br /&gt;
target_link_libraries(person_client ${catkin_LIBRARIES})&lt;br /&gt;
add_dependencies(person_client ${PROJECT_NAME}_gencpp)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095516.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425123046.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;参数的使用与编程方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数的使用与编程方法&#34;&gt;#&lt;/a&gt; 参数的使用与编程方法&lt;/h2&gt;
&lt;h3 id=&#34;参数模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数模型&#34;&gt;#&lt;/a&gt; 参数模型&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425105408.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;创建功能包-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建功能包-4&#34;&gt;#&lt;/a&gt; 创建功能包&lt;/h3&gt;
&lt;p&gt;catkin_create_pkg learning_parameter roscpp rospy std_srvs&lt;/p&gt;
&lt;h3 id=&#34;参数命令行使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数命令行使用&#34;&gt;#&lt;/a&gt; 参数命令行使用&lt;/h3&gt;
&lt;h4 id=&#34;rosparam&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rosparam&#34;&gt;#&lt;/a&gt; rosparam&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;列出当前多有参数&lt;/p&gt;
&lt;p&gt;$ rosparam list&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示某个参数值&lt;/p&gt;
&lt;p&gt;$ rosparam get param_key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置某个参数值&lt;/p&gt;
&lt;p&gt;$ rosparam set param_key param_value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存参数到文件&lt;/p&gt;
&lt;p&gt;$ rosparam dumo file_name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从文件读取参数&lt;/p&gt;
&lt;p&gt;$ rosparam delete param_key&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425123758.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425124156.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编程方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编程方法&#34;&gt;#&lt;/a&gt; 编程方法&lt;/h3&gt;
&lt;h3 id=&#34;配置代码编译规则-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置代码编译规则-2&#34;&gt;#&lt;/a&gt; 配置代码编译规则&lt;/h3&gt;
&lt;p&gt;add_executable(parameter_config src/parameter_config.cpp)&lt;/p&gt;
&lt;p&gt;target_link_libraries(parameter_config ${catkin_LISRARAIES})&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425110535.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;编译并运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译并运行&#34;&gt;#&lt;/a&gt; 编译并运行&lt;/h3&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/categories/ROS/Ubuntu/" />
        <category term="ROS" scheme="https://wlp1231.cn/tags/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/tags/Ubuntu/" />
        <updated>2023-01-11T05:38:35.186Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Ubuntu/Clash%E6%95%99%E7%A8%8B/</id>
        <title>Clash教程</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Ubuntu/Clash%E6%95%99%E7%A8%8B/"/>
        <content type="html">&lt;h3 id=&#34;clash教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clash教程&#34;&gt;#&lt;/a&gt; Clash 教程&lt;/h3&gt;
&lt;h4 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h4&gt;
&lt;p&gt;由于最近在 &lt;code&gt;Ubuntu&lt;/code&gt;  下编程，但是要用到 Google 搜索，毕竟我是面向浏览器编程，所以解决问题全都要 Google, 而且进入 &lt;code&gt;github&lt;/code&gt;  也需要翻墙.&lt;/p&gt;
&lt;h4 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h4&gt;
&lt;p&gt;使用的是 clash, 个人觉得这个软件比较好用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;执行  &lt;code&gt;cd &amp;amp;&amp;amp; mkdir clash&lt;/code&gt;  在用户目录下创建 clash 文件夹。&lt;/p&gt;
&lt;p&gt;下载适合的 Clash 二进制文件并解压重命名为  &lt;code&gt;clash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一般个人的 64 位电脑下载  &lt;code&gt;clash-linux-amd64.tar.gz &lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;下载 clash &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvcmVhbW9uLWRlc2lnbi9jbGFzaC9yZWxlYXNlcw==&#34;&gt;Releases · doreamon-design/clash (github.com)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压并运行它代码如下&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;sudo gunzip clash-linux-arm64-v1.4.2.gz   
mv clash-linux-arm64-v1.4.2 clash
chmod +x clash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对以上代码解释:&lt;/p&gt;
&lt;p&gt;第一行：解压 &lt;code&gt;gz&lt;/code&gt;  文件&lt;/p&gt;
&lt;p&gt;第二行：给文件改名为 clash, 文件名太长很麻烦&lt;/p&gt;
&lt;p&gt;第三行：给文件权限&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在终端  &lt;code&gt;cd&lt;/code&gt;  到 Clash 二进制文件所在的目录，执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -O config.yml 订阅链接
wget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若 &lt;code&gt;Country.mmdb&lt;/code&gt;  连接失败，可在 Windows 下打开网址下载后复制粘贴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;订阅链接获取：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94bi0tNGdxNjJmNTJnZHNzLmNvbS8jL3JlZ2lzdGVyP2NvZGU9dWpmYktOaGk=&#34;&gt;一元机场&lt;/span&gt;，一年 11&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94bi0tZ21xejgzYXdqaC5jby9hdXRoL3JlZ2lzdGVyP2NvZGU9NDFzbA==&#34;&gt;少数人&lt;/span&gt;，略贵&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此时会在 clash 文件下生成 &lt;code&gt;config.yml&lt;/code&gt;  文件，这是配置文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;rm config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即删除它自动生成的 &lt;code&gt;config.yaml&lt;/code&gt;  配置文件&lt;/p&gt;
&lt;p&gt;再把原来商家给你下载的 &lt;code&gt;config.yml&lt;/code&gt;  文件改名为 &lt;code&gt;config.yaml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mv config.yml config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时只有三个文件，即 clash 和 &lt;code&gt;config.yaml&lt;/code&gt;  和 &lt;code&gt;Country.mmdb&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;在系统设置里面设置网络代理，改为手动 改成下图所演示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665752805487.png&#34; alt=&#34;uTools_1665752805487&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着再在管理员权限下执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ./clash -d .
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开浏览器，输入 &lt;code&gt;clash.razord.top&lt;/code&gt;  在这里可以测速，和修改节点代理.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果不想代理就把网络代理设置为” 已禁用”.&lt;/p&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/categories/ROS/Ubuntu/" />
        <category term="ROS" scheme="https://wlp1231.cn/tags/ROS/" />
        <category term="Ubuntu" scheme="https://wlp1231.cn/tags/Ubuntu/" />
        <updated>2023-01-11T05:38:35.183Z</updated>
    </entry>
    <entry>
        <id>https://wlp1231.cn/ROS/Linux/linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</id>
        <title>linux初步学习</title>
        <link rel="alternate" href="https://wlp1231.cn/ROS/Linux/linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h1 id=&#34;linux初步学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux初步学习&#34;&gt;#&lt;/a&gt; linux 初步学习&lt;/h1&gt;
&lt;h2 id=&#34;linux系统结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux系统结构&#34;&gt;#&lt;/a&gt; linux 系统结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;linux 是一个倒树型结构，最大的目录是 &#39;/&#39;(根目录)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;linux系统中的二级目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux系统中的二级目录&#34;&gt;#&lt;/a&gt; linux 系统中的二级目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;/bin              ## 二进制可执行文件，系统常规命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/boot           ## 启动目录，存放系统自动启动文件，内核，初始化程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/dev             ## 系统设备管理文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/etc              ## 大多数系统配置文件存放路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/home          ## 普通用户家目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/lib                ## 函数库（系统内部定义的类似变量的库）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/lib64/          ##64 位函数库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/media         ## 临时挂载点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/mnt              ## 临时挂载点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/run               ## 自动临时设备挂载点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/opt               ## 第三方软件安装路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/proc             ## 系统硬件信息和系统进程信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/root              ## 超级用户家目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/sbin              ## 系统管理命令，通常只有 root 可以执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/srv                ## 系统数据目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/var                ## 系统数据目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/sys               ## 内核相关数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/tmp              ## 临时文件产生目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/usr/               ## 用户相关信息数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h2&gt;
&lt;h3 id=&#34;快捷键rm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快捷键rm&#34;&gt;#&lt;/a&gt; 快捷键 rm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开终端的快捷键： Ctrl + Alt + T&lt;/li&gt;
&lt;li&gt;停止终端的快捷键： Ctrl + C&lt;/li&gt;
&lt;li&gt;关闭终端的快捷键： Ctrl + D&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令&#34;&gt;#&lt;/a&gt; 命令&lt;/h3&gt;
&lt;h4 id=&#34;1-新建文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-新建文件夹&#34;&gt;#&lt;/a&gt; 1.  新建文件夹&lt;/h4&gt;
&lt;p&gt;mkdir + 文件名&lt;/p&gt;
&lt;p&gt;mkdir -p + 文件名 1 / 文件名 2 / 文件名 3 (建立递归目录)&lt;/p&gt;
&lt;p&gt;mkdir text_cpp cd text_cpp/&lt;/p&gt;
&lt;p&gt;vim hello.cpp (新建源文件并写入代码，: 按 Esc 后输入：wq 保存并退出)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE2021.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;g++ hello.cpp -o hello (编译，gcc 无法使用)&lt;/p&gt;
&lt;p&gt;ls (查询)&lt;/p&gt;
&lt;p&gt;./hello (不能存在空格)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210415000648.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm - r hwllo.cpp(删除), -r表示递归删除，也就是删除目录本身和里面的所有内容
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;rm -r -f  (或 rm -rf)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-新建文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-新建文件&#34;&gt;#&lt;/a&gt; 2. 新建文件&lt;/h4&gt;
&lt;p&gt;touch + 文档名&lt;/p&gt;
&lt;p&gt;stat + 文档名 (查询时间)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE2.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;rm + 文档名 (删除文档)&lt;/p&gt;
&lt;p&gt;rm -f + 文档名 (删除文档，无提示)&lt;/p&gt;
&lt;h4 id=&#34;3-gedit图形文本编辑器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-gedit图形文本编辑器&#34;&gt;#&lt;/a&gt; 3. gedit 图形文本编辑器 (???????)&lt;/h4&gt;
&lt;p&gt;gedit file&lt;/p&gt;
&lt;p&gt;ctrl+s 保存&lt;/p&gt;
&lt;p&gt;ctrl+n 打开新的编辑界面&lt;/p&gt;
&lt;p&gt;ctrl+o 打开新文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/123.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-查看文件内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-查看文件内容&#34;&gt;#&lt;/a&gt; 4. 查看文件内容&lt;/h4&gt;
&lt;p&gt;cat + 文件名&lt;/p&gt;
&lt;p&gt;cat -b + 文件名 (显示行号)&lt;/p&gt;
&lt;p&gt;less + 文件名 (分页浏览)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;p&gt;上 | 下 (逐行移动)&lt;/p&gt;
&lt;p&gt;pageup|pagedown (逐行移动)&lt;/p&gt;
&lt;p&gt;/+ 关键字 (高量显示关键字，n 向下匹配，N 向上匹配)&lt;/p&gt;
&lt;p&gt;v (进入 vim 模式 在 vim 模式中按：wq 退回到 less 模式) --&amp;gt; 实测出现问题，进入 vim 模式就无法退出，需用 ctrl + 命令字母&lt;/p&gt;
&lt;p&gt;q (退出)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/cat.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-查询&#34;&gt;#&lt;/a&gt; 5. 查询&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ls&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -l + 文件名 (文件属性)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls + 目录名 (目录中包含的内容)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -d + 目录名 (目录本身)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -a + 目录名 (所有文件包含隐藏的)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -S + 目录名 (查看并按照大小排序)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls -R + 目录名 (查看递归文件目录下所有文件)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/987.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1.png&#34; alt=&#34;1&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;6切换路径&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6切换路径&#34;&gt;#&lt;/a&gt; 6. 切换路径&lt;/h4&gt;
&lt;p&gt;cd  + 目录名 (进入指定目录中)&lt;/p&gt;
&lt;p&gt;cd -  + 目录名 (当前目录和当前目录之前所在目录之间的切换)&lt;/p&gt;
&lt;p&gt;cd ~  + 目录名 (进入当前用户家目录)&lt;/p&gt;
&lt;p&gt;cd ～user (进入 user 家目录)&lt;/p&gt;
&lt;p&gt;cd ..  (进入当前目录的上集目录)&lt;/p&gt;
&lt;h4 id=&#34;7-文件大小统计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-文件大小统计&#34;&gt;#&lt;/a&gt; 7. 文件大小统计&lt;/h4&gt;
&lt;p&gt;wc + 文件名 (显示行数 / 单词数 / 字节数)&lt;/p&gt;
&lt;p&gt;wc -l + 文件名 (行数)&lt;/p&gt;
&lt;p&gt;wc -w + 文件名 (单词数)&lt;/p&gt;
&lt;p&gt;wc -m + 文件名 (字符数)&lt;/p&gt;
&lt;p&gt;wc -c + 文件名 (字节数，udf-8 1 个中文 3 个字节，gb2312 1 个中文 2 个字节)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/999.png&#34; alt=&#34;wode&#34; /&gt;&lt;/p&gt;
</content>
        <category term="ROS" scheme="https://wlp1231.cn/categories/ROS/" />
        <category term="Linux" scheme="https://wlp1231.cn/categories/ROS/Linux/" />
        <category term="Linux" scheme="https://wlp1231.cn/tags/Linux/" />
        <category term="ROS" scheme="https://wlp1231.cn/tags/ROS/" />
        <updated>2023-01-11T05:38:35.180Z</updated>
    </entry>
</feed>
