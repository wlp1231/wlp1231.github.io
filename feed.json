{
    "version": "https://jsonfeed.org/version/1",
    "title": "随笔",
    "subtitle": null,
    "icon": "https://wlp1231.cn/images/favicon.ico",
    "description": "个人博客",
    "home_page_url": "https://wlp1231.cn",
    "items": [
        {
            "id": "https://wlp1231.cn/embedded/esp32/ESP32-S3/",
            "url": "https://wlp1231.cn/embedded/esp32/ESP32-S3/",
            "title": "ESP32-S3",
            "date_published": "2025-08-15T01:32:34.649Z",
            "content_html": "<h3 align = center>ESP32-S3</h3>\n<h4 id=\"资料整理自正点原子自用\"><a class=\"anchor\" href=\"#资料整理自正点原子自用\">#</a> 资料整理自正点原子，自用</h4>\n<h4 id=\"开发环境\"><a class=\"anchor\" href=\"#开发环境\">#</a> 开发环境：</h4>\n<p>vscode + platformio + arduino + esp32</p>\n<h4 id=\"arduino-语言\"><a class=\"anchor\" href=\"#arduino-语言\">#</a> Arduino 语言</h4>\n<p>Arduino 语言是指的是 Arduino 核心库文件提供的各种应用程序编程接口 (API) 集合。这些 API 是对更底层的单片机支持库进行二次封装。使用 C 和 C++ 混合编写。</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145418526.png\" alt=\"image-20250814145418526\" /></p>\n<h4 id=\"gpio-函数\"><a class=\"anchor\" href=\"#gpio-函数\">#</a> GPIO 函数</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145757131.png\" alt=\"image-20250814145757131\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145836371.png\" alt=\"image-20250814145836371\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145911441.png\" alt=\"image-20250814145911441\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814145944036.png\" alt=\"image-20250814145944036\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150013506.png\" alt=\"image-20250814150013506\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150032446.png\" alt=\"image-20250814150032446\" /></p>\n<h4 id=\"外部中断函数\"><a class=\"anchor\" href=\"#外部中断函数\">#</a> 外部中断函数</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150902033.png\" alt=\"image-20250814150902033\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814150916136.png\" alt=\"image-20250814150916136\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814151007813.png\" alt=\"image-20250814151007813\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814151109846.png\" alt=\"image-20250814151109846\" /></p>\n<h4 id=\"串口函数\"><a class=\"anchor\" href=\"#串口函数\">#</a> 串口函数</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814152433030.png\" alt=\"image-20250814152433030\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814152553861.png\" alt=\"image-20250814152553861\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814152940239.png\" alt=\"image-20250814152940239\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153038674.png\" alt=\"image-20250814153038674\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153102472.png\" alt=\"image-20250814153102472\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153259882.png\" alt=\"image-20250814153259882\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153336514.png\" alt=\"image-20250814153336514\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153353471.png\" alt=\"image-20250814153353471\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153500947.png\" alt=\"image-20250814153500947\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153527610.png\" alt=\"image-20250814153527610\" /></p>\n<h4 id=\"定时器函数\"><a class=\"anchor\" href=\"#定时器函数\">#</a> 定时器函数</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153829790.png\" alt=\"image-20250814153829790\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153846878.png\" alt=\"image-20250814153846878\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153940630.png\" alt=\"image-20250814153940630\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814153959322.png\" alt=\"image-20250814153959322\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154022182.png\" alt=\"image-20250814154022182\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154107107.png\" alt=\"image-20250814154107107\" /></p>\n<h4 id=\"pwm-函数\"><a class=\"anchor\" href=\"#pwm-函数\">#</a> PWM 函数</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154530885.png\" alt=\"image-20250814154530885\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814154809968.png\" alt=\"image-20250814154809968\" /></p>\n<h5 id=\"led-pwm-函数\"><a class=\"anchor\" href=\"#led-pwm-函数\">#</a> LED-PWM 函数</h5>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172633922.png\" alt=\"image-20250814172633922\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172654096.png\" alt=\"image-20250814172654096\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172854454.png\" alt=\"image-20250814172854454\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814172921172.png\" alt=\"image-20250814172921172\" /></p>\n<h4 id=\"adc-模拟数字转换器函数\"><a class=\"anchor\" href=\"#adc-模拟数字转换器函数\">#</a> ADC 模拟数字转换器函数</h4>\n<p>模拟 - 数字转换器，可将模拟信号转换为数字信号。</p>\n<p>模拟信号：模拟信号是连续的信号，其数值在一定范围内可取任意值。</p>\n<p>数字信号：数字信号是离散的信号，其数值只能取有限的离散值。通常用二进制表示，包含 0 和 1 两种状态。</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814173848747.png\" alt=\"image-20250814173848747\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174359447.png\" alt=\"image-20250814174359447\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174429637.png\" alt=\"image-20250814174429637\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174450142.png\" alt=\"image-20250814174450142\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174509803.png\" alt=\"image-20250814174509803\" /></p>\n<h4 id=\"iic-串行通信协议函数\"><a class=\"anchor\" href=\"#iic-串行通信协议函数\">#</a> IIC 串行通信协议函数</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814174956132.png\" alt=\"image-20250814174956132\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175322989.png\" alt=\"image-20250814175322989\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175421839.png\" alt=\"image-20250814175421839\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175733437.png\" alt=\"image-20250814175733437\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175850127.png\" alt=\"image-20250814175850127\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175917833.png\" alt=\"image-20250814175917833\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175942311.png\" alt=\"image-20250814175942311\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250814175958788.png\" alt=\"image-20250814175958788\" /></p>\n<h4 id=\"rtc-实时时钟函数\"><a class=\"anchor\" href=\"#rtc-实时时钟函数\">#</a> RTC 实时时钟函数</h4>\n<p>ESP32Time 库：</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250815091644636.png\" alt=\"image-20250815091644636\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250815091743578.png\" alt=\"image-20250815091743578\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20250815091848815.png\" alt=\"image-20250815091848815\" /></p>\n",
            "tags": [
                "嵌入式",
                "esp32",
                "esp32"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/note/typora%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/",
            "url": "https://wlp1231.cn/the-tutorial/note/typora%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/",
            "title": "",
            "date_published": "2023-10-20T13:57:23.405Z",
            "content_html": "<h3 id=\"typora\"><a class=\"anchor\" href=\"#typora\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT10eXBvcmEmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">typora</span> 快捷键大全</h3>\n<h3 id=\"一菜单栏\"><a class=\"anchor\" href=\"#一菜单栏\">#</a> 一：菜单栏</h3>\n<ul>\n<li>文件：alt+F</li>\n<li>编辑：alt+E</li>\n<li>段落：alt+P</li>\n<li>格式：alt+O</li>\n<li>视图：alt+V</li>\n<li>主题：alt+T</li>\n<li>帮助：alt+H</li>\n</ul>\n<h3 id=\"二文件\"><a class=\"anchor\" href=\"#二文件\">#</a> 二：文件</h3>\n<ul>\n<li>新建：Ctrl+N</li>\n<li>新建窗口：Ctrl+Shift+N</li>\n<li>打开：Ctrl+O</li>\n<li>快速打开：Ctrl+P</li>\n<li>保存：Ctrl+S</li>\n<li>另存为：Ctrl+Shift+S</li>\n<li>偏好：Ctrl+,</li>\n<li>关闭：Ctrl+W</li>\n</ul>\n<h3 id=\"三编辑\"><a class=\"anchor\" href=\"#三编辑\">#</a> 三：编辑</h3>\n<ul>\n<li>撤销：Ctrl+Z</li>\n<li>重做：Ctrl+Y</li>\n<li>剪切：Ctrl+X</li>\n<li>复制：Ctrl+C</li>\n<li>粘贴：Ctrl+V</li>\n<li>复制为 MarkDown：Ctrl+Shift+C</li>\n<li>粘贴为纯文本：Ctrl+Shift+V</li>\n<li>全选：Ctrl+A</li>\n<li>选中当前行 / 句：Ctrl+L</li>\n<li>选中当前格式文本：Ctrl+E</li>\n<li>选中当前词：Ctrl+D</li>\n<li>跳转到文首：Ctrl+Home</li>\n<li>跳转到所选内容：Ctrl+J</li>\n<li>跳转到文末：Ctrl+End</li>\n<li>查找：Ctrl+F</li>\n<li>查找下一个：F3</li>\n<li>查找上一个：Shift+F3</li>\n<li>替换：Ctrl+H</li>\n</ul>\n<h3 id=\"四段落\"><a class=\"anchor\" href=\"#四段落\">#</a> 四：段落</h3>\n<ul>\n<li>标题：Ctrl+1/2/3/4/5</li>\n<li>段落：Ctrl+0</li>\n<li>增大标题级别：Ctrl+=</li>\n<li>减少标题级别：Ctrl±</li>\n<li>表格：Ctrl+T</li>\n<li>代码块：Ctrl+Shift+K</li>\n<li>公式块：Ctrl+Shift+M</li>\n<li>引用：Ctrl+Shift+Q</li>\n<li>有序列表：Ctrl+Shift+[</li>\n<li>无序列表：Ctrl+Shift+]</li>\n<li>增加缩进：Ctrl+]</li>\n<li>减少缩进：Ctrl+[</li>\n</ul>\n<h3 id=\"五格式\"><a class=\"anchor\" href=\"#五格式\">#</a> 五：格式</h3>\n<ul>\n<li>加粗：Ctrl+B</li>\n<li>斜体：Ctrl+I</li>\n<li>下划线：Ctrl+U</li>\n<li>代码：Ctrl+Shift+`</li>\n<li>删除线：Alt+Shift+5</li>\n<li>超链接：Ctrl+K</li>\n<li>图像：Ctrl+Shift+I</li>\n<li>清除样式：Ctrl+</li>\n</ul>\n<h3 id=\"六视图\"><a class=\"anchor\" href=\"#六视图\">#</a> 六：视图</h3>\n<ul>\n<li>显示隐藏侧边栏：Ctrl+Shift+L</li>\n<li>大纲视图：Ctrl+Shift+1</li>\n<li>文档列表视图：Ctrl+Shift+2</li>\n<li>文件树视图：Ctrl+Shift+3</li>\n<li>源代码模式：Ctrl+/</li>\n<li>专注模式：F8</li>\n<li>打字机模式：F9</li>\n<li>切换全屏：F11</li>\n<li>实际大小：Ctrl+Shift+0</li>\n<li>放大：Ctrl+Shift+=</li>\n<li>缩小：Ctrl+Shift±</li>\n<li>应用内窗口切换：Ctrl+Tab</li>\n<li>打开 DevTools：Shift+F12</li>\n</ul>\n<p>其他特殊用法<br />\n 1、按一下回车，<strong>取消之前的有序无序标志</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://wlp1231.cn/ROS/Ubuntu/%E5%AE%9A%E7%82%B9%E8%B7%91%E5%8A%A8/",
            "url": "https://wlp1231.cn/ROS/Ubuntu/%E5%AE%9A%E7%82%B9%E8%B7%91%E5%8A%A8/",
            "title": "定点跑动",
            "date_published": "2023-09-25T07:40:47.950Z",
            "content_html": "<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Import the ROS libraries, and load the manifest file which through &lt;depend package=... /> will give us access to the project dependencies</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> aifc <span class=\"token keyword\">import</span> Aifc_read</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> operator <span class=\"token keyword\">import</span> contains</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> roslib</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> rospy</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> serial</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> geometry_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Twist  \t <span class=\"token comment\"># for sending commands to the drone</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">from</span> std_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Empty       \t <span class=\"token comment\"># for land/takeoff/emergency</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">from</span> std_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Header  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">from</span> std_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> String </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">from</span> nav_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Odometry</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">from</span> geometry_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> PoseStamped</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">from</span> geometry_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Point</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ROBOT_MAX_LIN_VEL <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ROBOT_MAX_ANG_VEL <span class=\"token operator\">=</span> <span class=\"token number\">1.82</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>FLAGZ <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>ser <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span>Serial<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">com_vel_callback</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ser<span class=\"token punctuation\">.</span>flushInput<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    vx <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    vy <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    vz <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># print(vx, vy, vz)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    data_tem <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x57</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vx <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vx <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vx <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> vx <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vy <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vy <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vy <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> vy <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>vz<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>vz<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>vz<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span> vz <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    ser<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>data_tem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    ser<span class=\"token punctuation\">.</span>flushInput<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\"># rospy.sleep(0.01)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rosSerial_init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> baud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        ser<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        ser<span class=\"token punctuation\">.</span>baudrate <span class=\"token operator\">=</span> baud</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        ser<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        ser<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">except</span> serial<span class=\"token punctuation\">.</span>SerialException<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        rospy<span class=\"token punctuation\">.</span>logerr<span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to open port\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">if</span> ser<span class=\"token punctuation\">.</span>is_open<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        rospy<span class=\"token punctuation\">.</span>loginfo<span class=\"token punctuation\">(</span><span class=\"token string\">\"Serial Port initialized\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">constrain</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">&lt;</span> low<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> low</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">></span> high<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> high</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RobotInterface</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> navdata_name<span class=\"token punctuation\">,</span> cmd_topic_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        self<span class=\"token punctuation\">.</span>k_p_xy <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        self<span class=\"token punctuation\">.</span>k_d_xy <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        self<span class=\"token punctuation\">.</span>k_yaw <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        self<span class=\"token punctuation\">.</span>limit_cmd_xy <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        self<span class=\"token punctuation\">.</span>target_point <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        self<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> Odometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        self<span class=\"token punctuation\">.</span>move_cmd <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        self<span class=\"token punctuation\">.</span>get_target <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        self<span class=\"token punctuation\">.</span>sub_pose <span class=\"token operator\">=</span> rospy<span class=\"token punctuation\">.</span>Subscriber<span class=\"token punctuation\">(</span>navdata_name<span class=\"token punctuation\">,</span> Odometry<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>callback_pose<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        self<span class=\"token punctuation\">.</span>pub_move_cmd <span class=\"token operator\">=</span> rospy<span class=\"token punctuation\">.</span>Publisher<span class=\"token punctuation\">(</span>cmd_topic_name<span class=\"token punctuation\">,</span> Twist<span class=\"token punctuation\">,</span> queue_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        rospy<span class=\"token punctuation\">.</span>on_shutdown<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>Reset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shutting down the ros...\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">callback_pose</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        self<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> msg</pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">move_cmd_send</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> move_cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        self<span class=\"token punctuation\">.</span>pub_move_cmd<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">(</span>move_cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">set_target_point</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        self<span class=\"token punctuation\">.</span>target_point <span class=\"token operator\">=</span> point</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        self<span class=\"token punctuation\">.</span>get_target <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">quat2eul</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> orientation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        x <span class=\"token operator\">=</span> orientation<span class=\"token punctuation\">.</span>x</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        y <span class=\"token operator\">=</span> orientation<span class=\"token punctuation\">.</span>y</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        z <span class=\"token operator\">=</span> orientation<span class=\"token punctuation\">.</span>z</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        w <span class=\"token operator\">=</span> orientation<span class=\"token punctuation\">.</span>w</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        t0 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> z <span class=\"token operator\">*</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        t1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> w <span class=\"token operator\">*</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        t2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> z <span class=\"token operator\">-</span> w <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        t3 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> z <span class=\"token operator\">+</span> w <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        t4 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        euler_angle <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        euler_angle<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>asin<span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        euler_angle<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>atan2<span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">,</span> t4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        euler_angle<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>atan2<span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> t0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">return</span> euler_angle</pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">global</span> FLAG</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">global</span> FLAGZ</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        cmd <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            err_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_point<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            err_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_point<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            euler_angle <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>quat2eul<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token comment\"># print(self.state.pose.pose.position.x, self.state.pose.pose.position.y, euler_angle.z)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            yaw <span class=\"token operator\">=</span> euler_angle<span class=\"token punctuation\">.</span>z</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token comment\"># print(yaw)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> constrain<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>k_p_xy <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>err_x <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> err_y <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">,</span> ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> constrain<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>k_p_xy <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> err_x <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> err_y <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">,</span> ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> constrain<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>k_yaw <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_point<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span> yaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>ROBOT_MAX_ANG_VEL<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ROBOT_MAX_ANG_VEL<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.003</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.003</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.003</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">if</span> FLAGZ<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        com_vel_callback<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        self<span class=\"token punctuation\">.</span>move_cmd_send<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>           FLAGZ <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token comment\"># print(cmd.linear.x,cmd.linear.y,cmd.angular.z)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token keyword\">if</span> cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    rospy<span class=\"token punctuation\">.</span>init_node<span class=\"token punctuation\">(</span><span class=\"token string\">'CarMecanum'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token comment\"># rospy.init_node(\"serial_example_node\")</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    car_mecanum <span class=\"token operator\">=</span> RobotInterface<span class=\"token punctuation\">(</span><span class=\"token string\">'/camera/odom/sample'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/cmd_vel'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token comment\"># write_sub = rospy.Subscriber(\"/cmd_vel\", Twist, com_vel_callback)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token keyword\">if</span> rosSerial_init<span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/ttyUSB0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        exit<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    rate <span class=\"token operator\">=</span> rospy<span class=\"token punctuation\">.</span>Rate<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    t_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    target <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token comment\"># 90 --> 1.583</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    goal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.86</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.86</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">-</span><span class=\"token number\">1.583</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token comment\"># goal = [[0, 0, 0.2], [0, 0, 0],[0, -1.583, -1.583]]</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    goalx <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    goaly <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    goalz <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    target<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    w <span class=\"token operator\">=</span> <span class=\"token number\">0.05</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> rospy<span class=\"token punctuation\">.</span>is_shutdown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        <span class=\"token comment\"># print(FLAG)</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        <span class=\"token keyword\">if</span> FLAG<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            FLAGZ <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            goalx <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>            goaly <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>            goalz <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token comment\"># if FLAGZ:</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token comment\">#      goalz = goal[2][i]</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> goalx</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> goaly</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        target<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> goalz</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        car_mecanum<span class=\"token punctuation\">.</span>set_target_point<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        car_mecanum<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        rate<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"解释\"><a class=\"anchor\" href=\"#解释\">#</a> 解释</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python</span></pre></td></tr></table></figure><p>这是一个常见的行，指示操作系统使用 Python 来执行这个脚本。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> aifc <span class=\"token keyword\">import</span> Aifc_read</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> operator <span class=\"token keyword\">import</span> contains</pre></td></tr></table></figure><p>这里导入了一些模块，但是在代码中并没有使用它们，可能是不必要的导入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> roslib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> rospy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> serial</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr></table></figure><p>这些是导入了一些重要的 Python 库和模块，包括 ROS 的库（ <code>roslib</code>  和 <code>rospy</code> ）、数学库（ <code>math</code> ）、串口通信库（ <code>serial</code> ）以及时间库（ <code>time</code> ）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> geometry_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Twist    <span class=\"token comment\"># 用于发送控制机器人的命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> std_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Empty         <span class=\"token comment\"># 用于控制机器人的起飞、降落、紧急停止等</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> std_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Header</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> std_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> String</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> nav_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Odometry</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> geometry_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> PoseStamped</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> geometry_msgs<span class=\"token punctuation\">.</span>msg <span class=\"token keyword\">import</span> Point</pre></td></tr></table></figure><p>这些是 ROS 消息类型，用于通过 ROS 话题进行数据传输。每个消息类型都有特定的结构和字段，这些字段可以包含有关机器人状态、命令和传感器数据的信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ROBOT_MAX_LIN_VEL <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ROBOT_MAX_ANG_VEL <span class=\"token operator\">=</span> <span class=\"token number\">1.82</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FLAGZ <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><p>这里定义了一些全局变量，包括机器人的最大线性速度和最大角速度，以及两个布尔变量  <code>FLAG</code>  和  <code>FLAGZ</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ser <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span>Serial<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这是一个串行通信对象，稍后将用于与机器人的串行端口通信。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">com_vel_callback</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是一个回调函数，它用于处理来自 ROS 话题  <code>/cmd_vel</code>  的消息。这个消息通常包含控制机器人的线性速度和角速度。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ser<span class=\"token punctuation\">.</span>flushInput<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里清空了串口输入缓冲区。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vx <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vy <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vz <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z</pre></td></tr></table></figure><p>这里从接收到的消息中提取了线性速度（vx、vy）和角速度（vz）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data_tem <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x57</span></pre></td></tr></table></figure><p>这里创建了一个字节数组  <code>data_tem</code>  和一个计数器  <code>counter</code> ，并将字节  <code>0x57</code>  存储在  <code>data_tem</code>  的第一个位置。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vx <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vx <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vx <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p>这里将线性速度  <code>vx</code>  的各个位数存储在  <code>data_tem</code>  中，通过将速度乘以不同的因子来实现。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> vx <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>这里将一个表示速度方向的位存储在  <code>data_tem</code>  中，如果  <code>vx</code>  大于等于 0，表示正方向，否则是负方向。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vy <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vy <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>vy <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p>这里将线性速度  <code>vy</code>  的各个位数以及速度方向存储在  <code>data_tem</code>  中。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> vy <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>这里存储  <code>vy</code>  的方向信息，与  <code>vx</code>  类似。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>vz<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>vz<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>vz<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p>这里将角速度  <code>vz</code>  的各个位数存储在  <code>data_tem</code>  中，同时也存储了方向信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> vz <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>这里存储  <code>vz</code>  的方向信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data_tem<span class=\"token punctuation\">[</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ser<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>data_tem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ser<span class=\"token punctuation\">.</span>flushInput<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里将一个结束标志（ <code>0xFF</code> ）存储在  <code>data_tem</code>  中，并将整个数据包写入串口。然后清空了串口输入缓冲区。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rosSerial_init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> baud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是初始化串口通信的函数，接受串口名称和波特率作为参数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ser<span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ser<span class=\"token punctuation\">.</span>baudrate <span class=\"token operator\">=</span> baud</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ser<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ser<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">except</span> serial<span class=\"token punctuation\">.</span>SerialException<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    rospy<span class=\"token punctuation\">.</span>logerr<span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to open port\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>在这里，尝试将串口对象的属性设置为传入的串口名称和波特率，并打开串口。如果出现串口打开失败的异常，将记录错误消息并返回 - 1。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> ser<span class=\"token punctuation\">.</span>is_open<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    rospy<span class=\"token punctuation\">.</span>loginfo<span class=\"token punctuation\">(</span><span class=\"token string\">\"Serial Port initialized\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>如果串口成功打开，将记录初始化成功的信息。</p>\n<p>继续解释代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">constrain</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">&lt;</span> low<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> low</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">input</span> <span class=\"token operator\">></span> high<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> high</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span></pre></td></tr></table></figure><p>这是一个限制输入值在指定范围内的函数。如果输入值小于最小值  <code>low</code> ，则将输入值设置为  <code>low</code> ；如果输入值大于最大值  <code>high</code> ，则将输入值设置为  <code>high</code> ；否则，保持输入值不变，然后返回最终结果。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RobotInterface</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是一个自定义的类  <code>RobotInterface</code>  的定义，它包含了一些机器人控制相关的方法和属性。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> navdata_name<span class=\"token punctuation\">,</span> cmd_topic_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是  <code>RobotInterface</code>  类的构造函数，它在创建类的实例时被调用。它接受两个参数  <code>navdata_name</code>  和  <code>cmd_topic_name</code> ，这些参数可能是用于指定 ROS 话题名称的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>k_p_xy <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>self<span class=\"token punctuation\">.</span>k_d_xy <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>self<span class=\"token punctuation\">.</span>k_yaw <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>self<span class=\"token punctuation\">.</span>limit_cmd_xy <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>self<span class=\"token punctuation\">.</span>target_point <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>self<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> Odometry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>self<span class=\"token punctuation\">.</span>move_cmd <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>self<span class=\"token punctuation\">.</span>get_target <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><p>在构造函数中，初始化了一些属性，包括控制器的一些参数（如  <code>k_p_xy</code> 、 <code>k_d_xy</code> 、 <code>k_yaw</code> 、 <code>limit_cmd_xy</code> ）、目标点  <code>target_point</code> 、机器人状态  <code>state</code> 、移动命令  <code>move_cmd</code>  和一个标志  <code>get_target</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>sub_pose <span class=\"token operator\">=</span> rospy<span class=\"token punctuation\">.</span>Subscriber<span class=\"token punctuation\">(</span>navdata_name<span class=\"token punctuation\">,</span> Odometry<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>callback_pose<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>self<span class=\"token punctuation\">.</span>pub_move_cmd <span class=\"token operator\">=</span> rospy<span class=\"token punctuation\">.</span>Publisher<span class=\"token punctuation\">(</span>cmd_topic_name<span class=\"token punctuation\">,</span> Twist<span class=\"token punctuation\">,</span> queue_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rospy<span class=\"token punctuation\">.</span>on_shutdown<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>Reset<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在构造函数中还创建了 ROS 的订阅者和发布者对象，用于接收机器人状态信息和发送移动命令。同时，在 ROS 节点关闭时，会执行  <code>self.Reset</code>  方法。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shutting down the ros...\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这是一个类方法  <code>Reset</code> ，在 ROS 节点关闭时被调用。它简单地打印一条消息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">callback_pose</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    self<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> msg</pre></td></tr></table></figure><p>这是一个回调函数  <code>callback_pose</code> ，它用于处理来自 ROS 话题的机器人状态信息，并将其存储在类属性  <code>self.state</code>  中。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">move_cmd_send</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> move_cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    self<span class=\"token punctuation\">.</span>pub_move_cmd<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">(</span>move_cmd<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这是一个方法  <code>move_cmd_send</code> ，它用于发布机器人的移动命令到 ROS 话题，以实现机器人的运动控制。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">set_target_point</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    self<span class=\"token punctuation\">.</span>target_point <span class=\"token operator\">=</span> point</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    self<span class=\"token punctuation\">.</span>get_target <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr></table></figure><p>这是一个方法  <code>set_target_point</code> ，它接受一个目标点  <code>point</code> ，并将其存储在类属性  <code>self.target_point</code>  中，同时将标志  <code>self.get_target</code>  设置为  <code>True</code> ，表示已经设置了目标点。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">quat2eul</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> orientation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是一个方法  <code>quat2eul</code> ，用于将四元数表示的姿态信息转换为欧拉角（Euler angles）表示的姿态信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是一个方法  <code>run</code> ，它实现了机器人的运动控制逻辑。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">global</span> FLAG</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">global</span> FLAGZ</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cmd <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>在  <code>run</code>  方法中，首先声明了全局变量  <code>FLAG</code>  和  <code>FLAGZ</code> ，然后创建了一个空的  <code>Twist</code>  类型的消息对象  <code>cmd</code> 。接着检查  <code>self.get_target</code>  标志，如果为  <code>True</code> ，表示已经设置了目标点，就执行下面的运动控制逻辑。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>err_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_point<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>err_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_point<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>euler_angle <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>quat2eul<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在运动控制逻辑中，计算了当前机器人位置与目标点之间的误差，包括线性坐标  <code>err_x</code>  和  <code>err_y</code> ，以及姿态角度  <code>euler_angle</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yaw <span class=\"token operator\">=</span> euler_angle<span class=\"token punctuation\">.</span>z</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> constrain<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>k_p_xy <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>err_x <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> err_y <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">,</span> ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> constrain<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>k_p_xy <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> err_x <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> err_y <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>yaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">,</span> ROBOT_MAX_LIN_VEL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> constrain<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>k_yaw <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_point<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span> yaw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>ROBOT_MAX_ANG_VEL<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ROBOT_MAX_ANG_VEL<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>根据误差和一些控制参数，计算出新的线性速度和角速度命令  <code>cmd</code> 。这里使用了  <code>constrain</code>  函数来确保速度命令不超过最大值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.003</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.003</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.003</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>这里进一步处理线性速度和角速度命令，将非常小的值（小于 0.003）设为 0，以避免微小的速度命令。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> FLAGZ<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>如果  <code>FLAGZ</code>  标志为  <code>True</code> ，表示需要停止机器人的线性运动。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>com_vel_callback<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>self<span class=\"token punctuation\">.</span>move_cmd_send<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>调用  <code>com_vel_callback</code>  函数将命令  <code>cmd</code>  发送给机器人，然后使用  <code>self.move_cmd_send(cmd)</code>  发布命令到 ROS 话题。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   FLAGZ <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr></table></figure><p>这里检查如果机器人的线性速度  <code>cmd.linear.x</code>  和  <code>cmd.linear.y</code>  都为零，就将  <code>FLAGZ</code>  设置为  <code>True</code> ，表示机器人的线性运动已经停止。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> cmd<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> cmd<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr></table></figure><p>这里检查如果机器人的角速度  <code>cmd.angular.z</code>  和线性速度  <code>cmd.linear.x</code>  以及  <code>cmd.linear.y</code>  都为零，就将  <code>FLAG</code>  设置为  <code>True</code> ，表示机器人的运动已经停止。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是 Python 中的一个惯用用法，表示如果这个脚本被直接运行而不是被导入为模块时，才执行以下代码块。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rospy<span class=\"token punctuation\">.</span>init_node<span class=\"token punctuation\">(</span><span class=\"token string\">'CarMecanum'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里初始化了一个 ROS 节点，节点名称为  <code>'CarMecanum'</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>car_mecanum <span class=\"token operator\">=</span> RobotInterface<span class=\"token punctuation\">(</span><span class=\"token string\">'/camera/odom/sample'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/cmd_vel'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>创建了一个  <code>RobotInterface</code>  类的实例  <code>car_mecanum</code> ，并传入了两个参数，分别是机器人状态话题名称和移动命令话题名称。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> rosSerial_init<span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/ttyUSB0\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    exit<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>调用  <code>rosSerial_init</code>  函数，初始化串行通信，如果初始化失败则退出脚本。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rate <span class=\"token operator\">=</span> rospy<span class=\"token punctuation\">.</span>Rate<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>创建一个 ROS 的速率控制对象，设置为 100Hz，即每秒循环 100 次。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>target <span class=\"token operator\">=</span> Twist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>获取当前时间，并创建一个空的  <code>Twist</code>  类型的消息对象  <code>target</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>goal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.86</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.583</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>定义了一个目标点列表  <code>goal</code> ，它包含了三个子列表，每个子列表表示一个目标点的线性速度和角速度信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>goalx <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>goaly <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>goalz <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>target<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>w <span class=\"token operator\">=</span> <span class=\"token number\">0.05</span></pre></td></tr></table></figure><p>初始化了一些变量，包括索引  <code>i</code> ，以及目标点的初始值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> rospy<span class=\"token punctuation\">.</span>is_shutdown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>这是一个 ROS 节点的主循环，只要 ROS 节点没有被关闭，就会一直执行以下代码块。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> FLAG<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    FLAG <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    FLAGZ <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    goalx <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    goaly <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    goalz <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>如果  <code>FLAG</code>  为  <code>True</code> ，表示当前目标点已经达到，程序会休眠 2 秒，然后将  <code>FLAG</code>  和  <code>FLAGZ</code>  重置为  <code>False</code> ，并切换到下一个目标点。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> goalx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>target<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> goaly</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>target<span class=\"token punctuation\">.</span>angular<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> goalz</pre></td></tr></table></figure><p>将计算好的目标点的线性速度和角速度信息存储在  <code>target</code>  中。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>car_mecanum<span class=\"token punctuation\">.</span>set_target_point<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>car_mecanum<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rate<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过  <code>car_mecanum</code>  对象的方法设置目标点，然后调用  <code>run</code>  方法执行机器人的运动控制，最后使用速率控制对象  <code>rate</code>  控制循环的频率。</p>\n<p>这就是代码的主要逻辑和功能。它是一个 ROS 控制机器人运动的程序，根据一系列预定义的目标点来控制机器人的运动。当达到一个目标点后，会等待一段时间然后切换到下一个目标点。同时，通过串口通信将机器人的速度命令发送给机器人。</p>\n",
            "tags": [
                "ROS",
                "note"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/note/oj%E5%88%A4%E9%A2%98%E7%B3%BB%E7%BB%9F/",
            "url": "https://wlp1231.cn/the-tutorial/note/oj%E5%88%A4%E9%A2%98%E7%B3%BB%E7%BB%9F/",
            "title": "OJ 判题",
            "date_published": "2023-09-12T16:06:44.523Z",
            "content_html": "<h3 id=\"oj判题系统\"><a class=\"anchor\" href=\"#oj判题系统\">#</a> oj 判题系统</h3>\n<h4 id=\"项目介绍\"><a class=\"anchor\" href=\"#项目介绍\">#</a> 项目介绍</h4>\n<p>OJ = onlone judge 在线判题评测系统</p>\n<p>用户可以选择题目，在线做题，编写代码并提交代码；系统会对用户提交的代码，根据出题人设置的答案，来判断用户提交的代码是否正确。</p>\n<p>ACM：程序设计竞赛</p>\n<p>OJ 系统难题：判题系统</p>\n<p>用于在线评测编程题目代码的系统，能够根据用户提交的代码，使用出题人预先设定的输入和输出进行编译、运行</p>\n<p>判题系统作为一个 API</p>\n<h4 id=\"oj-系统属性\"><a class=\"anchor\" href=\"#oj-系统属性\">#</a> OJ 系统属性</h4>\n<p>题目限制：时间、内存</p>\n<p>题目介绍</p>\n<p>题目输入</p>\n<p>题目输出</p>\n<p>输入样例</p>\n<p>输出样例</p>\n<p>其他限制：不能随便引入包、随便历遍、暴力破解 =&gt; 安全性</p>\n<p>判题过程是异步的 =&gt;  异步化</p>\n<p>提交后会生成提交记录，有结果和运行信息</p>\n<p>普通测评：管理员设置题日的输入和输出用例，比如我输入 1，你要输出 2 才是正确的；交给判题机去执行用户<br />\n的代码，给用户的代码喂输入用例，比如 1，看用户程序的执行结果是否和标准答案的输出一致。<br />\n(比对用例文件)</p>\n<p>特殊测评 (SPJ): 管理员设置题日的输入和输出，比如我输入 1，用户的答案只要是 &gt; 0 或 &lt; 2 都是正确的；特判程序，不是通过对比用例文件是否一致这种死板的程序来检验，而是要专门根据这道题目写一个特殊的判断程<br />\n序，程序接收题目的输入 (1)、标准输出用例 (2)、用户的结果 (1.5)，特判程序根据这些值来比较是否正确。</p>\n<p>交互测评：让用户输入一个例子，就给一个输出结果，交互比较灵活，没办法通过简单的、死板的输入输<br />\n出文件来搞定</p>\n<h4 id=\"做项目的原因\"><a class=\"anchor\" href=\"#做项目的原因\">#</a> 做项目的原因</h4>\n<p>CRUD，更多是编程思想、计算机基础、结构设计、可拓展性强</p>\n<h4 id=\"做项目的流程\"><a class=\"anchor\" href=\"#做项目的流程\">#</a> 做项目的流程</h4>\n<ol>\n<li>项目介绍、项目调研、需求分析</li>\n<li>核心业务流程 =&gt; 这个项目最核心的功能</li>\n<li>项目要做的功能（功能模块）</li>\n<li>技术选型（技术预研）</li>\n<li>项目初始化</li>\n<li>项目开发</li>\n<li>测试</li>\n<li>优化</li>\n<li>代码提交、代码审核</li>\n<li>产品验收</li>\n<li>上线</li>\n</ol>\n<p>写文档、持续调研、持续记录总结</p>\n<h4 id=\"现有系统调研\"><a class=\"anchor\" href=\"#现有系统调研\">#</a> 现有系统调研</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0hpbWl0WkgvSE9KKCVFOSU4MCU4MiVFNSU5MCU4OCVFNSVBRCVBNiVFNCVCOSVBMCk=\">https://github.com/HimitZH/HOJ (适合学习)</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1FpbmdkYW9VL09ubGluZUp1ZGdlKHB5dGhvbiwlRTQlQjglOEQlRTUlQTUlQkQlRTUlQUQlQTYlRUYlQkMlOEMlRTUlQkUlODglRTYlODglOTAlRTclODYlOUYp\"> https://github.com/QingdaoU/OnlineJudge (python, 不好学，很成熟)</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2h6eGllL3ZvaiglRTYlOTglOUYlRTYlOTglOUYlRTYlQjIlQTElRTklODIlQTMlRTQlQjklODglRTUlQTQlOUElRUYlQkMlOEMlRTYlQjIlQTElRTklODIlQTMlRTQlQjklODglRTYlODglOTAlRTclODYlOUYlRUYlQkMlOEMlRTQlQkQlODYlRTclOUIlQjglRTUlQUYlQjklRTUlQTUlQkQlRTUlQUQlQTYp\"> https://github.com/hzxie/voj (星星没那么多，没那么成熟，但相对好学)</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZmbGVha2luZy4vdW9qKHBocCVFNSVBRSU5RSVFNyU4RSVCMCVFNyU5QSU4NCk=\"> https://github.com/vfleaking./uoj (php 实现的)</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3poYmx1ZS9odXN0b2ooJUU2JTg4JTkwJUU3JTg2JTlGJUVGJUJDJThDJUU0JUJEJTg2JUU2JTk4JUFGcGhwKQ==\"> https://github.com/zhblue/hustoj (成熟，但是 php)</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2h5ZHJvLWRldi9IeWRybyglRTUlOEElOUYlRTglODMlQkQlRTUlQkMlQkElRTUlQTQlQTclRUYlQkMlOENOb2RlLmpzJUU1JUFFJTlFJUU3JThFJUIwKQ==\"> https://github.com/hydro-dev/Hydro (功能强大，Node.js 实现)</span></p>\n<h4 id=\"实现核心\"><a class=\"anchor\" href=\"#实现核心\">#</a> 实现核心</h4>\n<ol>\n<li>\n<p>权限校验</p>\n<p>谁能提交代码、查看代码</p>\n</li>\n<li>\n<p>代码沙箱（安全沙箱）</p>\n<p>防止用户代码藏毒：写个木马文件、修改系统权限</p>\n<p>沙箱：隔离的、安全的环境，用户的代码不会影响到沙箱之外的系统运行</p>\n<p>资源分配：限制用户程序的占用资源</p>\n</li>\n<li>\n<p>判题的规则</p>\n<p>题目用例的对比、结果验证</p>\n</li>\n<li>\n<p>任务调度</p>\n<p>服务器资源有限，用户需要排队，依次判题</p>\n</li>\n</ol>\n<h4 id=\"核心业务流程\"><a class=\"anchor\" href=\"#核心业务流程\">#</a> 核心业务流程</h4>\n<p>用户  =&gt; 浏览题目 =&gt; 提交题目代码  =&gt; 业务后端  =&gt;  数据库 =&gt; 检查用户是否登录  =&gt; 题目是否存在  =&gt; 得到题目信息  =&gt; 返回给业务后端  =&gt;   提交代码和用例  =&gt; 判题模块  =&gt; 编译执行  =&gt; 返回结果  =&gt; 业务后端  =&gt; 用户</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1693758500624.png\" alt=\"1693758500624\" /></p>\n<p>时序图</p>\n<p>用户    前端页面     后端主业务    消息队列    判题服务    代码沙箱    数据库</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694096473472.png\" alt=\"1694096473472\" /></p>\n<p>判题服务：获取题目信息、预计的输入输出结果，返回给主业务后端：用户答案是否正确</p>\n<p>代码沙箱：只负责运行代码，给出结果，不负责判断结果是否正确</p>\n<p>实现解耦</p>\n<h4 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h4>\n<ol>\n<li>题目模块\n<ul>\n<li>创建题目</li>\n<li>删除题目</li>\n<li>修改题目</li>\n<li>搜索题目</li>\n<li>在线做题</li>\n<li>提交代码</li>\n</ul>\n</li>\n<li>用户模块\n<ul>\n<li>注册</li>\n<li>登录</li>\n</ul>\n</li>\n<li>判题模块\n<ul>\n<li>提交判题（结果是否正确）</li>\n<li>错误处理（内存溢出、超时、安全性）</li>\n<li>自主实现（代码沙箱）</li>\n<li>开放接口</li>\n</ul>\n</li>\n<li>在线做题、在线提交</li>\n</ol>\n<h4 id=\"拓展思路\"><a class=\"anchor\" href=\"#拓展思路\">#</a> 拓展思路</h4>\n<ol>\n<li>支持多种语言</li>\n<li>remote judge</li>\n<li>完善的评测功能：普通评测、特殊评测、交互评测、在线自测、子任务分组评测、文件 io</li>\n<li>统计分析用户判题记录</li>\n<li>权限校验</li>\n</ol>\n<h4 id=\"技术选型\"><a class=\"anchor\" href=\"#技术选型\">#</a> 技术选型</h4>\n<p>前端：Vue3、Acro Design 组件库 在线代码编辑器、在线文档浏览</p>\n<p>Java 进程控制、Java 安全管理器、部分 JVM 知识点</p>\n<p>虚拟机（云服务器）、Docker（代码沙箱实现）</p>\n<p>Spring Cloud 微服务、消息队列、多种设计模式</p>\n<h4 id=\"架构设计\"><a class=\"anchor\" href=\"#架构设计\">#</a> 架构设计</h4>\n<p>分层架构</p>\n<p>用户层    app   pc 端    移动端</p>\n<p>接入层    Nginx    API 网关    负载均衡项目</p>\n<p>业务层</p>\n<p>服务层</p>\n<p>存储层</p>\n<p>资源层</p>\n<h4 id=\"主流-oj-系统实现方案\"><a class=\"anchor\" href=\"#主流-oj-系统实现方案\">#</a> 主流 OJ 系统实现方案</h4>\n<p>开发原则：能复用就复用</p>\n<h5 id=\"1-使用现成的-oj-系统\"><a class=\"anchor\" href=\"#1-使用现成的-oj-系统\">#</a> 1. 使用现成的 OJ 系统</h5>\n<p>judge0，这是一个非常成熟的商业 OJ 项目，支持 60 多种编程语言</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2p1ZGdlMC9qdWRnZTA=\">https://github.com/judge0/judge0</span></p>\n<h5 id=\"2-使用现成的服务其他人实现了的代码沙箱-判题系统\"><a class=\"anchor\" href=\"#2-使用现成的服务其他人实现了的代码沙箱-判题系统\">#</a> 2. 使用现成的服务 —— 其他人实现了的代码沙箱、判题系统</h5>\n<p>judge0 提供了判题 API</p>\n<p>Judge0 API 地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXBpZGFwaS5jb20vanVkZ2UwLW9mZmljaWFsL2FwaS9qdWRnZTAtY2U=\">https://rapidapi.com/judge0-official/api/judge0-ce</span></p>\n<p>官方文档： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZS5qdWRnZTAuY29tLyNzdWJtaXNzaW9ucy1zdWJtaXNzaW9uLXBvc3Q=\">https://ce.judge0.com/#submissions-submission-post</span></p>\n<h5 id=\"3-自主开发\"><a class=\"anchor\" href=\"#3-自主开发\">#</a> 3. 自主开发</h5>\n<p>适合学习，但不适合商用</p>\n<h5 id=\"4-把-ai-当作代码沙箱\"><a class=\"anchor\" href=\"#4-把-ai-当作代码沙箱\">#</a> 4. 把 AI 当作代码沙箱</h5>\n<h5 id=\"5-模拟浏览器远程使用其他人的-oj-系统\"><a class=\"anchor\" href=\"#5-模拟浏览器远程使用其他人的-oj-系统\">#</a> 5. 模拟浏览器远程使用其他人的 OJ 系统</h5>\n<h4 id=\"前端项目初始化创建一个通用模板\"><a class=\"anchor\" href=\"#前端项目初始化创建一个通用模板\">#</a> 前端项目初始化 —— 创建一个通用模板</h4>\n<h5 id=\"1-确认环境\"><a class=\"anchor\" href=\"#1-确认环境\">#</a> 1. 确认环境</h5>\n<p>nodejs =&gt; v18 or 14</p>\n<p>npm v8 以上</p>\n<h5 id=\"2-初始化\"><a class=\"anchor\" href=\"#2-初始化\">#</a> 2. 初始化</h5>\n<p>使用 vue-cli 脚手架</p>\n<pre><code>npm install -g @vue/cli\n</code></pre>\n<p>检测安装是否成功</p>\n<pre><code>vue -v\n</code></pre>\n<p>创建新的 vue 项目</p>\n<pre><code class=\"language-vue\">vue create project-name\n</code></pre>\n<p>选择组件库：Babel、TypeScript、Router、Vuex、Linter/Formatter</p>\n<p>运行项目，project.json</p>\n<h5 id=\"3-前端工程配置\"><a class=\"anchor\" href=\"#3-前端工程配置\">#</a> 3. 前端工程配置</h5>\n<p>插件：vue.js    prettier</p>\n<p>自己整合</p>\n<ul>\n<li>代码规范 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lc2xpbnQub3JnL2RvY3MvbGF0ZXN0L3VzZS9nZXR0aW5nLXN0YXJ0ZWQ=\">https://eslint.org/docs/latest/use/getting-started</span></li>\n<li>代码美化 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmV0dGllci5pby9kb2NzL2VuL2luc3RhbGwuaHRtbA==\">https://prettier.io/docs/en/install.html</span></li>\n<li>直接整合 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL2VzbGludC1wbHVnaW4tcHJldHRpZXIjcmVjb21tZW5kZWQtY29uZmlndXJhdGlvbg==\">https://github.com/prettier/eslint-plugin-prettier#recommended-configuration</span></li>\n</ul>\n<h5 id=\"4-引入组件-arco-design-vue\"><a class=\"anchor\" href=\"#4-引入组件-arco-design-vue\">#</a> 4. 引入组件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNvLmRlc2lnbi92dWUvZG9jcy9zdGFydA==\">Arco Design Vue</span></h5>\n<p>安装</p>\n<p>···</p>\n<p>按照快速入门</p>\n<p>改变 main.js</p>\n<h4 id=\"项目通用布局\"><a class=\"anchor\" href=\"#项目通用布局\">#</a> 项目通用布局</h4>\n<p>新建布局文件 layouts/BasicLayout.vue</p>\n<p>在 app.vue 中引入</p>\n<pre><code class=\"language-vue\">  &lt;div id=&quot;app&quot;&gt;\n    &lt;BasicLayout /&gt;\n  &lt;/div&gt;\n</code></pre>\n<p>布局 —— 上中下布局</p>\n<p>导航栏（菜单） —— 设置为全局 components/GlobalHeader.vue</p>\n<p>菜单设置根据路由文件动态生成 router/index.ts</p>\n<ul>\n<li>\n<p>提取通用路由文件</p>\n</li>\n<li>\n<p>菜单组件读取路由，动态渲染菜单项</p>\n</li>\n<li>\n<p>绑点跳转事件</p>\n</li>\n<li>\n<p>同步路由到菜单项</p>\n<pre><code class=\"language-vue\">const router = useRouter();\n\n// 默认主页\nconst selectedKeys = ref([&quot;/&quot;]);\n\n// 路由跳转时，更新选中的菜单项\nrouter.afterEach((to, from, failure) =&gt; &#123;\n  selectedKeys.value = [to.path];\n&#125;);\n\n// 点击菜单项更新路由\nconst doMenuClick = (key: string) =&gt; &#123;\n  router.push(&#123;\n    path: key,\n  &#125;);\n&#125;;\n</code></pre>\n</li>\n</ul>\n<p>思路：点击菜单项 =&gt; 触发点击事件 =&gt; 跳转并更新路由 =&gt; 更新菜单项选中状态</p>\n<h4 id=\"全局状态管理\"><a class=\"anchor\" href=\"#全局状态管理\">#</a> 全局状态管理</h4>\n<p>Vuex 提供了一套增删改查全局变量的 API</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1693883335730.png\" alt=\"1693883335730\" /></p>\n<p>所有页面全局共享的变量</p>\n<p>适合作为全局状态的数据：已登录用户信息</p>\n<p>使用 vuex<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS8=\"> 开始 | Vuex (vuejs.org)</span></p>\n<p>state：存储状态信息</p>\n<p>mutation：要求尽量同步，定义了对变量的增删改方法</p>\n<p>actions：执行异步操作，触发 mutation 的更改，即 actions 调用 mutation</p>\n<p>modules：模块，把一个大的 state 划分为多个小模块</p>\n<p>使用思路：</p>\n<ul>\n<li>\n<p>在 store 目录下新建模块，如 user</p>\n</li>\n<li>\n<p>在 store 目录下的 index.ts 中引入 user 模块</p>\n</li>\n<li>\n<p>在 vue 页面中获取 user 信息</p>\n<pre><code class=\"language-vue\">const store = useStore();\nstore.state.user?.userInfo\n</code></pre>\n</li>\n<li>\n<p>在 vue 页面中使用 dispatch 调用 actions</p>\n<pre><code class=\"language-vue\">store.dispatch(&quot;模块名/actions里的方法名&quot;,&#123;传入的参数&#125;)\n如：\nstore.dispatch(&quot;userr/getUserInfo&quot;&#123;userInfo: &quot;xxx&quot;&#125;)\n</code></pre>\n</li>\n</ul>\n<h4 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h4>\n<h4 id=\"全局权限管理\"><a class=\"anchor\" href=\"#全局权限管理\">#</a> 全局权限管理</h4>\n<p>目的：能够通用地定义哪个页面需要什么权限</p>\n<p>思路：</p>\n<ul>\n<li>\n<p>在路由配置文件中定义某个路由的访问权限</p>\n</li>\n<li>\n<p>在全局页面组件 app.vue 中，绑定一个全局路由监听，每次访问页面前，根据用户信息判断用户是否有权限访问该页面</p>\n<pre><code class=\"language-vue\">router.beforeEach((to, from, next) =&gt; &#123;\n  if (to.meta?.access === &quot;canAdmin&quot;) &#123;\n    if (store.state.user.loginUser?.role !== &quot;admin&quot;) &#123;\n      next(&quot;/noAuth&quot;);\n      return;\n    &#125;\n  &#125;\n  next();\n&#125;);\n</code></pre>\n<p>to 的信息为路由信息</p>\n</li>\n<li>\n<p>根据配置控制菜单项的显隐</p>\n<ul>\n<li>\n<p>routes.ts 给路由新增一个标志位，根据标志位过滤</p>\n<pre><code class=\"language-vue\">const visibleRoutes = routes.filter((item, index) =&gt; &#123;\n  if (item.meta?.hideInMenu) &#123;\n    return false;\n  &#125;\n  return true;\n&#125;);\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>根据权限隐藏菜单项</p>\n<ul>\n<li>使用计算属性，当登录用户信息发生变更时，触发菜单栏的重新渲染</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"全局项目入口\"><a class=\"anchor\" href=\"#全局项目入口\">#</a> 全局项目入口</h4>\n<h4 id=\"后端项目初始化\"><a class=\"anchor\" href=\"#后端项目初始化\">#</a> 后端项目初始化</h4>\n<p>构建通用后端框架</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZlcmRpa29vbWVuL29wZW5hcGktdHlwZXNjcmlwdC1jb2RlZ2Vu\">https://github.com/ferdikoomen/openapi-typescript-codegen</span></p>\n<p>AOP：面向切面思想</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694098554332.png\" alt=\"1694098554332\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694098572227.png\" alt=\"1694098572227\" /></p>\n<p>AOP 需要做的三件事：</p>\n<ol>\n<li>在哪里切入，也就是权限校验和日志记录在哪些代码里执行</li>\n<li>在什么时候切入，即在业务代码执行前还是执行后</li>\n<li>切入后做什么事，如权限校验或日志记录等</li>\n</ol>\n<p>使用：</p>\n<ol>\n<li>\n<p>引入依赖</p>\n</li>\n<li>\n<p>AOP 切面类添加 @Aspect 注解</p>\n</li>\n<li>\n<p>AOP 切面类添加 @Componet 注解，将该类交给 Spring 管理</p>\n</li>\n<li>\n<p>在该类中实现 Advice，即</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>wideth<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Before</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 定义一个切点：所有被 GetMapping 注解修饰的方法会织入 advice</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.springframework.web.bind.annotation.GetMapping)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logAdvicePointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// Before 表示 logAdvice 将在目标方法执行前执行</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logAdvicePointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 这里只是一个示例，你可以写任何处理逻辑</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get请求的advice触发了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>package cn.wideth.controller;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(value = &quot;/aop&quot;)\npublic class AopController &#123;\n\n    @GetMapping(value = &quot;/getTest&quot;)\n    public JSONObject aopTest() &#123;\n        return JSON.parseObject(&quot;&#123;\\&quot;message\\&quot;:\\&quot;SUCCESS\\&quot;,\\&quot;code\\&quot;:200&#125;&quot;);\n    &#125;\n\n    @PostMapping(value = &quot;/postTest&quot;)\n    @ApiOperation(value = &quot;aop测试信息&quot;)\n    public JSONObject aopTest2(@RequestParam(&quot;id&quot;) String id) &#123;\n        return JSON.parseObject(&quot;&#123;\\&quot;message\\&quot;:\\&quot;SUCCESS\\&quot;,\\&quot;code\\&quot;:200&#125;&quot;);\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>相关注解</p>\n<ul>\n<li>\n<p>@Pointcut 注解，用来定义一个切面，即上文中所关注的某件事情的入口，切入点定义了事件触发时机。</p>\n<p>定义需要拦截的东西，两个常用的表达式：一个是使用 execution ()，另一个是使用 annotation ()。</p>\n<pre><code>&quot;execution(* com.mutest.controller..*.*(..))&quot;\n</code></pre>\n<ul>\n<li>第一个 * 号的位置：表示返回值类型，* 表示所有类型。</li>\n<li>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，在本例中指 com.mutest.controller 包、子包下所有类的方法。</li>\n<li>第二个 * 号的位置：表示类名，* 表示所有类。</li>\n<li>*(…)：这个星号表示方法名， * 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</li>\n</ul>\n<p>annotation () 方式是针对某个注解来定义切面</p>\n</li>\n<li>\n<p>@Around 注解用于修饰 Around 增强处理</p>\n<p>@Around 可以自由选择增强动作与目标方法的执行顺序，调用 ProceedingJoinPoint 参数的 procedd () 方法才会执行目标方法。</p>\n<p>@Around 可以改变执行目标方法的参数值，也可以改变执行目标方法之后的返回值</p>\n</li>\n<li>\n<p>@Before 注解指定的方法在切面切入目标方法之前执行，可以做一些 Log 处理，也可以做一些信息的统计，比如获取用户的请求 URL 以及用户的 IP 地址等等</p>\n</li>\n<li>\n<p>@After 注解和 @Before 注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 Log 处理。</p>\n</li>\n<li>\n<p>@AfterReturning 注解和 @After 有些类似，区别在于 @AfterReturning 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理</p>\n</li>\n<li>\n<p>当被切方法执行过程中抛出异常时，会进入 @AfterThrowing 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"前后端联调\"><a class=\"anchor\" href=\"#前后端联调\">#</a> 前后端联调</h4>\n<p>前端发送请求调用后端接口</p>\n<h5 id=\"使用工具\"><a class=\"anchor\" href=\"#使用工具\">#</a> 使用工具</h5>\n<ol>\n<li>\n<p>Axios</p>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9heGlvcy1odHRwLmNvbS9kb2NzL2ludHJv\">https://axios-http.com/docs/intro</span></p>\n</li>\n<li>\n<p>自动生成请求的 API</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZlcmRpa29vbWVuL29wZW5hcGktdHlwZXNjcmlwdC1jb2RlZ2Vu\">https://github.com/ferdikoomen/openapi-typescript-codegen</span></p>\n</li>\n</ol>\n<h4 id=\"用户登录\"><a class=\"anchor\" href=\"#用户登录\">#</a> 用户登录</h4>\n<p>自动登录</p>\n<ol>\n<li>\n<p>再 store/user.ts 编写获取远程登录用户信息的代码</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TODO 远程登录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> UserControllerService<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginUserUsingGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updateUser\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updateUser\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>loginUser<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          userRole<span class=\"token operator\">:</span> <span class=\"token constant\">ACCESS_ENUM</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_LOGIN</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>触发 getLoginUser 函数的位置</p>\n<ul>\n<li>路由拦截</li>\n<li>全局页面入口 App.vue</li>\n<li>全局通用布局</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"全局权限管理优化\"><a class=\"anchor\" href=\"#全局权限管理优化\">#</a> 全局权限管理优化</h4>\n<ol>\n<li>新建 access/index.ts 文件，把原有的路由拦截、权限校验放在独立的文件中</li>\n</ol>\n<h4 id=\"支持多套布局\"><a class=\"anchor\" href=\"#支持多套布局\">#</a> 支持多套布局</h4>\n<ol>\n<li>\n<p>在 routes 路由文件中新建一套用户路由，使用子路由</p>\n</li>\n<li>\n<p>创建新的 layout、view 文件</p>\n</li>\n<li>\n<p>在 app.vue 根页面中通过 if-else 区分布局</p>\n<pre><code class=\"language-vue\">    &lt;template v-if=&quot;route.path.startsWith('/user')&quot;&gt;\n      &lt;router-view /&gt;\n    &lt;/template&gt;\n    &lt;template v-else&gt;\n      &lt;BasicLayout /&gt;\n    &lt;/template&gt;\n</code></pre>\n</li>\n</ol>\n<p>登录成功</p>\n<p>使用 await 同步更新用户信息状态</p>\n<p>跳转进入系统页面</p>\n<p>使用 router, 使用 replace，不会占用浏览器历史记录的堆栈，会直替换当前登录页</p>\n<pre><code class=\"language-vue\">router.push(&#123;\n\tpath: &quot;/&quot;,\n\treplace: true,\n&#125;)\n</code></pre>\n<h4 id=\"登录页面\"><a class=\"anchor\" href=\"#登录页面\">#</a> 登录页面</h4>\n<p>核心：表单</p>\n<h4 id=\"后端接口开发\"><a class=\"anchor\" href=\"#后端接口开发\">#</a> 后端接口开发</h4>\n<ol>\n<li>\n<p>根据功能设计库表</p>\n<p>用户表 只有管理员才能发布和管理题目</p>\n<p>题目表</p>\n<ul>\n<li>\n<p>题目标题</p>\n</li>\n<li>\n<p>题目内容：介绍、输入输出提示</p>\n</li>\n<li>\n<p>题目标签：json 数组字符串，栈、队列、简单、中等、困难等</p>\n</li>\n<li>\n<p>题目答案：管理员设置</p>\n</li>\n<li>\n<p>输入输出：</p>\n<ul>\n<li>\n<p>输入输出属于判题相关字段</p>\n</li>\n<li>\n<p>如果用例文件不是很大，小于 512KB，可以直接存在数据库中，否则应该处在文件中，数据库只存文件的 url</p>\n</li>\n<li>\n<p>当不需要某些字段去倒查这条数据时，且这些字段属于同一类值，可以使用 json 数组存储</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"input\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1 2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"output\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3 4\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">\"input\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1 2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">\"output\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3 4\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这样便于扩展，且需要变更字段时不用修改数据库表</p>\n<p>判题限制：时间、大小等同样可以使用 json 数组</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>题目提交表</p>\n<p>哪个用户提交了哪道题，存放判题结果</p>\n<ul>\n<li>\n<p>提交用户 id</p>\n</li>\n<li>\n<p>题目 id</p>\n</li>\n<li>\n<p>编程语言</p>\n</li>\n<li>\n<p>用户代码</p>\n</li>\n<li>\n<p>判题状态</p>\n</li>\n<li>\n<p>判题信息：json 对象</p>\n</li>\n</ul>\n<p>判题信息枚举值：</p>\n<p>Accepted 成功<br />\n Wrong Answer 答案错误<br />\n Compile Error 编译错误<br />\n Memory Limit Exceeded 内存溢出<br />\n Time Limit Exceeded 超时<br />\n Presentation Error 展示错误<br />\n Output Limit Exceeded 输出溢出<br />\n Waiting 等待中<br />\n Dangerous Operation 危险操作<br />\n Runtime Error 运行错误（用户程序的问题）<br />\nSystem Error 系统错误（做系统人的问题）</p>\n</li>\n<li>\n<p>自动生成对数据库基本的增删改查（mapper 和 service 层的基本功能）</p>\n</li>\n<li>\n<p>编写 Controller 层，实现基本的增删改查和权限校验</p>\n</li>\n<li>\n<p>根据业务定制开发新功能</p>\n</li>\n</ol>\n<p>数据库索引：</p>\n<ol>\n<li>\n<p>什么时候使用索引</p>\n<p>当数据量很大时</p>\n</li>\n<li>\n<p>如何选择索引</p>\n<p>从业务出发，无论是单个索引、还是联合索引，都要从时间的查询语句、字段枚举值的区分度、字段的类型考虑选择区分度大的字段充当索引</p>\n</li>\n</ol>\n<p>对上述表的 json 字段，为了更方便的管理，给其独立编写新的类，如：judgeConfig、judgeInfo、judgeCase</p>\n<p>定义 vo 类，封装信息，专门返回给前端的类，信息过滤，防止信息泄露，还可以节约网络传输大小</p>\n<p>需要对象类转封装类，封装类转对象类：封装类和对象类的某些属性类型可能不一样</p>\n<p>为了防止用户按照 id 顺序爬取题目，id 的生成规则改为 ASSING_ID，而不是顺序自增</p>\n<h3 id=\"前端界面开发\"><a class=\"anchor\" href=\"#前端界面开发\">#</a> 前端界面开发</h3>\n<h5 id=\"需要的页面\"><a class=\"anchor\" href=\"#需要的页面\">#</a> 需要的页面：</h5>\n<ul>\n<li>用户注册</li>\n<li>用户登录</li>\n<li>创建题目界面</li>\n<li>题目管理页面</li>\n<li>题目列表页</li>\n<li>题目详情页</li>\n<li>题目提交列表页</li>\n</ul>\n<h4 id=\"接入需要的组件\"><a class=\"anchor\" href=\"#接入需要的组件\">#</a> 接入需要的组件</h4>\n<h5 id=\"markdown-编辑器\"><a class=\"anchor\" href=\"#markdown-编辑器\">#</a> Markdown 编辑器</h5>\n<p>使用 Md 编辑器</p>\n<p>安装 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVkYW5jZS9ieXRlbWQ=\">https://github.com/bytedance/bytemd</span></p>\n<pre><code class=\"language-npm\">npm i @bytemd/vue-next\nnpm i @bytemd/plugin-highlight @bytemd/plugin-gfm\n</code></pre>\n<h5 id=\"代码优化\"><a class=\"anchor\" href=\"#代码优化\">#</a> 代码优化</h5>\n<ol>\n<li>菜单项的权限控制与显示隐藏\n<ul>\n<li>删除或隐藏不需要的菜单项</li>\n<li>设置 mate.access 和</li>\n</ul>\n</li>\n<li>页面修复\n<ul>\n<li>使用 Arco Design 的表格组件 page-change</li>\n<li>watchEffect () 监听传递函数的所有变量，当发生改变时，重新加载</li>\n</ul>\n</li>\n<li>1</li>\n</ol>\n<h3 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h3>\n<p>计算 A + B</p>\n<p>输入两个整数 a 和 b，要求小于等于 1000</p>\n<p>输出 a+b 的值</p>\n<p>样例输入</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><p>样例输出</p>\n<pre><code class=\"language-JAVA\">4\n</code></pre>\n<p>你可以使用 C、C++、JAVA</p>\n<h4 id=\"后端判题模块预开发\"><a class=\"anchor\" href=\"#后端判题模块预开发\">#</a> 后端判题模块预开发</h4>\n<h5 id=\"判题模块与代码沙箱的关系\"><a class=\"anchor\" href=\"#判题模块与代码沙箱的关系\">#</a> 判题模块与代码沙箱的关系</h5>\n<p>判题模块：调用代码沙箱，把代码和输入交给代码沙箱就可以了，对代码沙箱返回的结果进行判断</p>\n<p>代码沙箱：只负责接受代码和输入，返回编译运行的结果，不负责判题（可以作为独立的项目 / 服务，提供给其他需要执行代码的项目使用）</p>\n<p>两个模块完全解耦，通过 API 交互</p>\n<h4 id=\"java开发知识\"><a class=\"anchor\" href=\"#java开发知识\">#</a> Java 开发知识</h4>\n<h5 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h5>\n<h4 id=\"代码沙箱开发\"><a class=\"anchor\" href=\"#代码沙箱开发\">#</a> 代码沙箱开发</h4>\n<h5 id=\"接口定义\"><a class=\"anchor\" href=\"#接口定义\">#</a> 接口定义</h5>\n<ul>\n<li>定义代码沙箱接口，提高通用性，接口规范</li>\n<li>项目只调用接口，不调用具体的实现类，这样在使用其他代码沙箱实现类时，就不用修改名称</li>\n</ul>\n<p>Lonbox Builder 注解：</p>\n<pre><code class=\"language-JAVA\">@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n</code></pre>\n<ul>\n<li>@Builder 构造器</li>\n<li>@NoArgsConstructor 无参构造条件</li>\n<li>@AllArgsConstructor 为当前类添加所有类都有的构造函数</li>\n</ul>\n<p>加了以上注解的类，在新建对象时，可以不用 new，直接使用.builder 构建，在构建时就可以传入参数，链式</p>\n<h5 id=\"三种代码沙箱的实现方式\"><a class=\"anchor\" href=\"#三种代码沙箱的实现方式\">#</a> 三种代码沙箱的实现方式</h5>\n<ul>\n<li>\n<p>本地样例代码沙箱</p>\n</li>\n<li>\n<p>远程代码沙箱</p>\n</li>\n<li>\n<p>第三方代码沙箱</p>\n</li>\n</ul>\n<h5 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h5>\n<p>工厂模式</p>\n<ul>\n<li>\n<p>根据用户传入的字符串参数来生成相应的代码沙箱实现类</p>\n<pre><code class=\"language-JAVA\">    public static CodeSandbox newInstance(String type) &#123;\n        switch (type) &#123;\n            case &quot;remote&quot;:\n                return new RemoteCodeSandbox();\n            case &quot;thirdParty&quot;:\n                return new ThirdPartyCodeSandbox();\n            default:\n                return new ExampleCodeSandbox();\n        &#125;\n    &#125;\n</code></pre>\n</li>\n<li>\n<p>如果确认代码沙箱示例不会出现线程安全问题，可以使用单例工程模式</p>\n</li>\n</ul>\n<p>代理模式</p>\n<p>代码沙箱能力增强</p>\n<p>如当我们需要在调用代码沙箱前，输出请求参数日志，在代码沙箱调用后，输出响应日志</p>\n<p>避免重复的编写 log 代码，执行 log，使用代理模式</p>\n<ul>\n<li>\n<p>提供一个 Proxy ，来增强代码沙箱的能力</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1694275758016.png\" alt=\"1694275758016\" /></p>\n</li>\n<li>\n<p>步骤：</p>\n<ul>\n<li>\n<p>实现被代理的接口</p>\n</li>\n<li>\n<p>通过构造函数接受被代理接口的实现类</p>\n</li>\n<li>\n<p>调用类代理接口的实现类，在调用前后对其新增功能</p>\n</li>\n<li>\n<p>被代理接口的定义可以使用 final ，只会被定义一次</p>\n<pre><code class=\"language-JAVA\">    private final CodeSandbox codeSandbox;\n\n\n    public CodeSandboxProxy(CodeSandbox codeSandbox) &#123;\n        this.codeSandbox = codeSandbox;\n    &#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"策略模式\"><a class=\"anchor\" href=\"#策略模式\">#</a> 策略模式</h5>\n<h5 id=\"参数配置化\"><a class=\"anchor\" href=\"#参数配置化\">#</a> 参数配置化</h5>\n<p>把项目中的一些可以交给用户去自定义的选项或字符串，写到配置文件中去，这样开发者只需要修改配置文件，而不用去看代码就可以使用更多功能</p>\n<ul>\n<li>\n<p>在配置文件 application.yml 中</p>\n<pre><code class=\"language-YML\"># 参数配置化\ntestValue:\n  type: te\n</code></pre>\n</li>\n<li>\n<p>在需要调用该参数的地方使用 @Value 注解</p>\n<pre><code class=\"language-JAVA\">@Value(&quot;$&#123;testValue.type: example&#125;&quot;)\nprivate String type;\n</code></pre>\n</li>\n</ul>\n<h4 id=\"判题服务完整开发\"><a class=\"anchor\" href=\"#判题服务完整开发\">#</a> 判题服务完整开发</h4>\n<h5 id=\"判题服务流程\"><a class=\"anchor\" href=\"#判题服务流程\">#</a> 判题服务流程：</h5>\n<ul>\n<li>传入题目 id，获取对应题目信息、提交信息</li>\n<li>如果判题状态不为等待中，就不用再次判题</li>\n<li>修改题目判题状态（改为判题中），只有状态为等待中才进行判题</li>\n<li>调用代码沙箱，获取返回结果</li>\n<li>根据代码沙箱的返回结果设置题目的判题状态和信息</li>\n</ul>\n<h5 id=\"策略模式-2\"><a class=\"anchor\" href=\"#策略模式-2\">#</a> 策略模式</h5>\n<p>不同的编程语言需要的判题限制可能是不同的</p>\n<p>采用策略模式，根据不同的情况使用不同的策略</p>\n<h4 id=\"代码沙箱\"><a class=\"anchor\" href=\"#代码沙箱\">#</a> 代码沙箱</h4>\n<h5 id=\"核心实现流程\"><a class=\"anchor\" href=\"#核心实现流程\">#</a> 核心实现流程</h5>\n<p>知道 Java 代码的执行过程、</p>\n<p>Java 进程执行管理类：Process</p>\n<ol>\n<li>把用户的代码保存为文件</li>\n<li>编译代码，得到 class 文件</li>\n<li>执行代码，得到输出结果</li>\n</ol>\n<h4 id=\"代码沙箱docker实现\"><a class=\"anchor\" href=\"#代码沙箱docker实现\">#</a> 代码沙箱 Docker 实现</h4>\n<h5 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h5>\n<p>为什么使用 Docker：把不同的程序与宿主机进行隔离，使得某个程序的执行不会影响到系统本机</p>\n<h5 id=\"消息队列\"><a class=\"anchor\" href=\"#消息队列\">#</a> 消息队列</h5>\n<p>耦合度高</p>\n<p>遇到的问题：</p>\n<p>远程开发的时候，因为 docker 是需要安装到 linux 系统上的，使用 ubuntu，在写 docker 代码的时候需要远程连接并且能运行，idea 自己带的一个连接工具只能修改远端代码，但是无法使用 ubuntu 的环境运行，也就是在 windows 系统上无法运行，因为没有安装 docker，然后 idea2021.3 版本以后新出了一个 remote development 能进行远程运行，就去下载了 2021.3 版本，下完后发现使用不是很方便，很多配置环境的设置都找不到，然后又去下载了 jetbrains，使用这个进行远程开发，这个和 remote development 其实是一样的，只是和 idea 分离开，界面也更加友好，在成功连接后又下载 maven 依赖，第一个出现的问题是下载速度慢，而且下完之后会出现有部分依赖无法找到的情况，然后又上网找资料，发现是 maven3.8.1 以上会有一个不安全连接的限制，又去修改 maven 的 settings 文件，依赖成功下好后又出现 pom 文件不暴红，但是 java 文件引入这些依赖的时候有爆红，试过清空缓存，重启都没有解决，最后没办法了把 ubuntu 的远程文件全部清空重头来一遍就莫名其妙的解决了，</p>\n",
            "tags": [
                "教程",
                "note"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/note/%E7%AE%97%E6%B3%95/",
            "url": "https://wlp1231.cn/the-tutorial/note/%E7%AE%97%E6%B3%95/",
            "title": "算法",
            "date_published": "2023-09-12T16:06:39.791Z",
            "content_html": "<h4 id=\"算法\"><a class=\"anchor\" href=\"#算法\">#</a> 算法</h4>\n<h5 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h5>\n<pre><code class=\"language-Java\">1. 链表倒序\n非递归\nArrayList 的 add方法可以指定插入位置\n顺序查询ListNode.next，存入ArrayList的第一个位置，返回ArrayList\n递归\n首先传入待倒序链表\n对链表判空\n对ListNode.next调用倒序函数\n把ListNode.val传给ArrayList\n    \n2. 链表反转——双链表\n    创建新链表 ListNode newnode = null\n    对反转链表head判空\n    存temp = head.next\n    把head.next指向newNode // 成为了新的链表\n    把head给newNode\n    head = temp //变回原来的链表\n    \n3. 合并排序列表——哨兵节点\n    ListNode a = new ListNode(0);\n\tListNode b = a;\n\n4. 公共节点——历遍所有节点，有公共节点必然会同时到达公共节点\n        ListNode l1 = pHead1;\n        ListNode l2 = pHead2;\n历遍所有节点，直到l1 = l2\n    三元运算符\n    \n5. 链表中环的入口\n    快链表和慢链表，有环会相遇，无环快链表指向null\n    有环，初始化快链表，以相同的速度历遍，再次相遇的点为环入口\n    \n6. 倒数第K个节点\n    先行一步，快链表比快链表先走K步\n    \n7. 删除重复节点\n    Map&lt;Integer,Integer&gt; mp = new HashMap&lt;&gt;()\n    使用put和get方法\n    历遍，使用哈希表记录每个值出现的次数\n    再次历遍，删除次数不等于1的节点\n    \n\n</code></pre>\n<h5 id=\"其他算法\"><a class=\"anchor\" href=\"#其他算法\">#</a> 其他算法</h5>\n<pre><code class=\"language-JAVA\">字符串：\n    工具：\n    charAt（） 比较使用 == ''\n    HashMap&lt;Character,Integer&gt;\n    StringBuilder\n    StringBuffer\n    equalsIgnoreCase // 不缺分大小写\n    toUpperCase() // 转大写\n    toLowerCase() // 转小写\n    char转换为String String.valueOf()\n    cahr 通过 -32 转小写 +32 转大写\n    cahr 也可通过Character 的toUpperCase() 和 toLowerCase() 妆花大小写\n    String.substring(i) // 截取i及之后的字符串\n    String.substring(i,j) // 截取i 到j-1间的字符串\n    a.CompareTo(b) // 比较字符串大小,拼接时shi'y，&gt;0 a &gt; b; &lt;0 a &lt; b \n数组：\n    工具：\n    \n</code></pre>\n<h5 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h5>\n<pre><code class=\"language-JAVA\">System.in\n    Scanner in = new Scanner(System.in)\n    in.next() // 读取到下一个非空字符\n    in.nextLine() // 读取一整行，直到有换行符（回车），包括空格和换行符\n    in.nextInt // 整数输入\n    in.next(),charAt(0) // 字符的输入\n    in.nextFloat() // 浮点型的输入\n    in.hasNext() // 以空格\n    in.hasNextLine() // 以回车作为结束标志\n    \n</code></pre>\n<h5 id=\"进制转换\"><a class=\"anchor\" href=\"#进制转换\">#</a> 进制转换：</h5>\n<pre><code class=\"language-JAVA\">//10进制转换 16进制\n System.out.println(Integer.toHexString(val));\n System.out.println(String.format(&quot;%x&quot;, val));\n //10进制转换 8进制\n System.out.println(Integer.toOctalString(val));\n System.out.println(String.format(&quot;%o&quot;, val));\n //10进制转换 2进制\n System.out.println(Integer.toBinaryString(val));\n \n //16进制转换 10进制\n System.out.println(Integer.valueOf(&quot;f&quot;, 16));\n //8进制转换 10进制\n System.out.println(Integer.valueOf(&quot;11&quot;, 8));\n //2进制转换 10进制\n System.out.println(Integer.valueOf(&quot;0101&quot;, 2));\n\n</code></pre>\n<h5 id=\"递归-回溯\"><a class=\"anchor\" href=\"#递归-回溯\">#</a> 递归 + 回溯</h5>\n<p>递归：</p>\n<p>把一个大型问题层层转化为一个与原问题相似的小问题</p>\n<p>如果是线性递归，子问题直接回到父问题，不需要回溯</p>\n<p>如果是树形递归，父问题有很多分支，需要从子问题回到父问题，进入另一个子问题，需要回溯父问题的状态，才能进入下一个子问题</p>\n<pre><code class=\"language-JAVA\">1. 没有重复项数字的全排列\n    全排列：对数组元素进行元素交换，时每一种排列都可能出现\n    思路：每个元素都放到第一位进行历遍排序\n    递归条件：\n    1. 终止条件：要交换位置的下标到了数组最后一位，结束本次排序\n    2. 返回值：把前面已经确认好位置的元素返回给父问题\n    3. 本级任务：历遍从它开始的后续元素\n    \n    全排列：\n    1. 当待排序数被取完时结束\n    2. 对每一个数进行标记，取出作为第一个元素单独存放，inedx\n    3. 执行递归，依次把剩余的数取出放到标记数后面\n    4. 在删除的位置恢复被取出的数\n    5. 删除上一次被标记数 index.size-1\n    \n有重复数，递归+回溯+hashmap  \nimport java.util.*;\n\n\npublic class Solution &#123;\n    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param num int整型一维数组 \n     * @return int整型ArrayList&lt;ArrayList&lt;&gt;&gt;\n     */\n    public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permuteUnique (int[] num) &#123;\n        // write code here\n        Arrays.sort(num);\n        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n        for(int n : num)&#123;\n            list.add(n);\n        &#125;\n        ArrayList&lt;Integer&gt; index = new ArrayList&lt;&gt;();\n        recursion(list,index);\n        LinkedHashMap&lt;ArrayList&lt;Integer&gt;, Integer&gt; map = new LinkedHashMap&lt;&gt;();\n        for(int i = 0; i &lt; ans.size(); i++)&#123;\n            map.put(ans.get(i),map.getOrDefault(ans.get(i),0)+1);\n        &#125;\n        \n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; newans = new ArrayList&lt;&gt;();\n        Set&lt;Map.Entry&lt;ArrayList&lt;Integer&gt;,Integer&gt;&gt; en = map.entrySet();\n        for(Map.Entry&lt;ArrayList&lt;Integer&gt;,Integer&gt; e : en)&#123;\n            newans.add(e.getKey());\n        &#125;\n        return newans;\n        // return ans;\n    &#125;\n\n    public void recursion(ArrayList&lt;Integer&gt; list,ArrayList&lt;Integer&gt; index)&#123;\n        if(list.isEmpty())&#123;\n            ans.add(new ArrayList&lt;Integer&gt;(index));\n        &#125;else&#123;\n            for(int i = 0; i &lt; list.size(); i++)&#123;\n                Integer temp = list.remove(i);\n                index.add(temp);\n                recursion(list,index);\n                list.add(i,temp);\n                index.remove(index.size()-1);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"dfs-深度优先搜索算法\"><a class=\"anchor\" href=\"#dfs-深度优先搜索算法\">#</a> DFS 深度优先搜索算法</h5>\n<pre><code class=\"language-JAVA\">1. 矩阵路径\n    回溯 + 递归\n    1. 确认结束条件\n    2. 取出当前路径节点，防止回退路径\n    3. 分别查询当前路径节点的四个方向，看是否符合要求\n    4. 恢复当前路径节点\n    5，返回\nimport java.util.*;\n\n\npublic class Solution &#123;\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param matrix char字符型二维数组 \n     * @param word string字符串 \n     * @return bool布尔型\n     */\n    public boolean hasPath (char[][] matrix, String word) &#123;\n        // write code here\n        char[] words = word.toCharArray();\n        for(int i = 0; i &lt; matrix.length; i++)&#123;\n            for(int j = 0; j &lt; matrix[0].length; j++)&#123;\n                if(dfs(matrix,words,i,j,0))&#123;\n                    return true;\n                &#125;\n            &#125;\n        &#125;\n        return false;\n    &#125;\n\n    public boolean dfs(char[][] matrix, char[] words, int i, int j, int index)&#123;\n         \n        if(index == words.length - 1)&#123;\n            return true;\n        &#125;\n        char temp = matrix[i][j];\n        matrix[i][j] = '.';\n        boolean res = dfs(matrix,words,i+1,j,index+1)||dfs(matrix,words,i-1,j,index+1)||dfs(matrix,words,i,j+1,index+1)||dfs(matrix,words,i,j-1,index+1);\n        matrix[i][j] = temp;\n        return res;\n\n\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"栈-stack\"><a class=\"anchor\" href=\"#栈-stack\">#</a> 栈 Stack</h5>\n<h5 id=\"队列-deque\"><a class=\"anchor\" href=\"#队列-deque\">#</a> 队列 Deque</h5>\n<h5 id=\"双向队列-arraydeque\"><a class=\"anchor\" href=\"#双向队列-arraydeque\">#</a> 双向队列 ArrayDeque</h5>\n<pre><code class=\"language-JAVA\">1. 栈的压入弹出序列\n    栈顶元素等于当前需要弹出的元素，则弹出，否则继续进栈\n    第一个元素必须先进栈\n    进栈次数要等于待进栈元素个数\n</code></pre>\n<h5 id=\"动态规划\"><a class=\"anchor\" href=\"#动态规划\">#</a> 动态规划</h5>\n<pre><code class=\"language-JAVA\">思想：\n    将待求解问题分解成若干个相互关联的小问题，先求解小问题，然后从这些小问题的解得到原问题的解\n    \n1. 连续子数组的最大和\n    如果加上后面一个元素，反而小于刚加上的元素，那么直接使用刚加上的元素作为新的子数组头\n    若要输出最大和对应的子数组，则添加标记位 lift 和 right\n    添加最大区间标记位\n</code></pre>\n",
            "tags": [
                "教程",
                "note",
                "note"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/note/idea%20%E5%B0%8F%E7%9F%A5%E8%AF%86/",
            "url": "https://wlp1231.cn/the-tutorial/note/idea%20%E5%B0%8F%E7%9F%A5%E8%AF%86/",
            "title": "小知识",
            "date_published": "2023-08-23T06:48:16.993Z",
            "content_html": "<h4 id=\"idea-小知识\"><a class=\"anchor\" href=\"#idea-小知识\">#</a> idea 小知识</h4>\n<h4 id=\"插件\"><a class=\"anchor\" href=\"#插件\">#</a> 插件</h4>\n<ul>\n<li>Maven Helper -- &gt; 查看 maven 的依赖树</li>\n<li>MybatisX</li>\n<li>statistic --&gt; 统计文件大小</li>\n</ul>\n<h4 id=\"快捷方式\"><a class=\"anchor\" href=\"#快捷方式\">#</a> 快捷方式</h4>\n<ul>\n<li>\n<p>代码片段</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1692771918092.png\" alt=\"uTools_1692771918092\" /></p>\n</li>\n<li></li>\n</ul>\n<p>mybatis + pagehelper 进行分页</p>\n<p>mybatisplus 自己有分页插件</p>\n",
            "tags": [
                "教程",
                "note",
                "note"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/programming/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/",
            "url": "https://wlp1231.cn/the-tutorial/programming/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/",
            "title": "MySQL安装与配置",
            "date_published": "2023-01-27T02:04:36.879Z",
            "content_html": "<h3 id=\"mysql安装与配置\"><a class=\"anchor\" href=\"#mysql安装与配置\">#</a> mysql 安装与配置</h3>\n<h4 id=\"mysql下载-httpsdownloadsmysqlcomarchivesinstaller\"><a class=\"anchor\" href=\"#mysql下载-httpsdownloadsmysqlcomarchivesinstaller\">#</a> mysql 下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZHMubXlzcWwuY29tL2FyY2hpdmVzL2luc3RhbGxlci8=\">https://downloads.mysql.com/archives/installer/</span></h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107123925400.png\" alt=\"image-20230107123925400\" /></p>\n<h4 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h4>\n<ol>\n<li>\n<p>自定义安装</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125634171.png\" alt=\"image-20230107125634171\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125835214.png\" alt=\"image-20230107125835214\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125900797.png\" alt=\"image-20230107125900797\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107125934160.png\" alt=\"image-20230107125934160\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130033250.png\" alt=\"image-20230107130033250\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130115968.png\" alt=\"image-20230107130115968\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130139616.png\" alt=\"image-20230107130139616\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130220517.png\" alt=\"image-20230107130220517\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130249376.png\" alt=\"image-20230107130249376\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130314661.png\" alt=\"image-20230107130314661\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130332108.png\" alt=\"image-20230107130332108\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130354483.png\" alt=\"image-20230107130354483\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130442681.png\" alt=\"image-20230107130442681\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130521264.png\" alt=\"image-20230107130521264\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130551721.png\" alt=\"image-20230107130551721\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130614669.png\" alt=\"image-20230107130614669\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130637605.png\" alt=\"image-20230107130637605\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130653957.png\" alt=\"image-20230107130653957\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130715736.png\" alt=\"image-20230107130715736\" /></p>\n</li>\n<li>\n<p>验证安装</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130906125.png\" alt=\"image-20230107130906125\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107130951848.png\" alt=\"image-20230107130951848\" /></p>\n</li>\n</ol>\n<h4 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h4>\n<ol>\n<li>\n<p>找到 MySQL 安装路径，复制 bin 目录路径</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131154571.png\" alt=\"image-20230107131154571\" /></p>\n</li>\n<li>\n<p>添加变量</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131258848.png\" alt=\"image-20230107131258848\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131316576.png\" alt=\"image-20230107131316576\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131546067.png\" alt=\"image-20230107131546067\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131636492.png\" alt=\"image-20230107131636492\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107131720531.png\" alt=\"image-20230107131720531\" /></p>\n</li>\n<li>\n<p>验证，终端输入 <code>mysql -u root -p</code></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107132748799.png\" alt=\"image-20230107132748799\" /></p>\n</li>\n</ol>\n",
            "tags": [
                "教程",
                "编程",
                "教程",
                "编程",
                "mysql"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/programming/vscode%20c++%20%E9%85%8D%E7%BD%AE%20Windows/",
            "url": "https://wlp1231.cn/the-tutorial/programming/vscode%20c++%20%E9%85%8D%E7%BD%AE%20Windows/",
            "title": "vscode c++ 配置 Windows",
            "date_published": "2023-01-11T05:38:35.208Z",
            "content_html": "<h4 id=\"vscode-c-配置-windows\"><a class=\"anchor\" href=\"#vscode-c-配置-windows\">#</a> vscode c++ 配置 Windows</h4>\n<h5 id=\"vscode安装\"><a class=\"anchor\" href=\"#vscode安装\">#</a> vscode 安装</h5>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">vscode 官网下载</span></li>\n<li>安装位置可自定义</li>\n</ul>\n<h5 id=\"vscode配置\"><a class=\"anchor\" href=\"#vscode配置\">#</a> vscode 配置</h5>\n<ul>\n<li>\n<p>插件安装</p>\n<ul>\n<li>\n<p>汉化</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665229009280.png\" alt=\"uTools_1665229009280\" /></p>\n</li>\n<li>\n<p>c++</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230054513.png\" alt=\"uTools_1665230054513\" /></p>\n</li>\n<li>\n<p>code run</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230109604.png\" alt=\"uTools_1665230109604\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p>创建新文件夹，创建 cpp 文件</p>\n<ul>\n<li><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230392381.png\" alt=\"uTools_1665230392381\" /></li>\n</ul>\n</li>\n<li>\n<p>MinGW 安装</p>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWluZ3ctdzY0L2ZpbGVzL21pbmd3LXc2NC9taW5ndy13NjQtcmVsZWFzZS8=\">MinGW 官网下载</span></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230644695.png\" alt=\"uTools_1665230644695\" /></p>\n</li>\n<li>\n<p>在自己想要存放的位置解压，复制存放路径，需进入到 bin 目录，如 D:\\code\\sdk\\mingw64\\bin</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230771519.png\" alt=\"uTools_1665230771519\" /></p>\n</li>\n<li>\n<p>配置路径，进入此电脑，鼠标右键，点击属性</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230911995.png\" alt=\"uTools_1665230911995\" /></p>\n</li>\n<li>\n<p>高级属性设置，环境变量</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665230996267.png\" alt=\"uTools_1665230996267\" /></p>\n</li>\n<li>\n<p>系统变量，path，编辑</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665231084586.png\" alt=\"uTools_1665231084586\" /></p>\n</li>\n<li>\n<p>新建，把复制的路径保存好</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665231156959.png\" alt=\"uTools_1665231156959\" /></p>\n</li>\n<li>\n<p>cmd 验证安装 gcc - v</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665231290607.png\" alt=\"uTools_1665231290607\" /></p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"运行cpp\"><a class=\"anchor\" href=\"#运行cpp\">#</a> 运行 cpp</h5>\n<ul>\n<li>\n<p>重启 vscode</p>\n</li>\n<li>\n<p>进入 cpp 代码界面，鼠标右键，run code</p>\n</li>\n<li>\n<p>按 F5 调试，一直选第一个，配置文件生成成功</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20221008202202.png\" alt=\"QQ截图20221008202202\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20221008202252.png\" alt=\"QQ截图20221008202252\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20221008202323.png\" alt=\"QQ截图20221008202323\" /></p>\n</li>\n</ul>\n<h5 id=\"vscode设置\"><a class=\"anchor\" href=\"#vscode设置\">#</a> vscode 设置</h5>\n<ul>\n<li>\n<p>输出到终端</p>\n<p>文件 --&gt; 首选项 --&gt; 设置，输入 run in terminal ，勾选 Whether to run code in Integrated Terminal</p>\n</li>\n</ul>\n<p>​</p>\n",
            "tags": [
                "教程",
                "编程",
                "编程",
                "vscode"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/programming/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/",
            "url": "https://wlp1231.cn/the-tutorial/programming/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/",
            "title": "socket通信机制详解",
            "date_published": "2023-01-11T05:38:35.206Z",
            "content_html": "<h1 id=\"socket通信机制详解\"><a class=\"anchor\" href=\"#socket通信机制详解\">#</a> socket 通信机制详解</h1>\n<p>我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页时，浏览器的进程怎么与 web 服务器通信的？当你用 <code>QQ</code>  聊天时， <code>QQ</code>  进程怎么与服务器或你好友所在的 <code>QQ</code>  进程通信？这些都得靠 socket？那什么是 socket？socket 的类型有哪些？还有 socket 的基本函数，这些都是本文想介绍的。本文的主要内容如下：</p>\n<ul>\n<li>1、网络中进程之间如何通信？</li>\n<li>2、Socket 是什么？</li>\n<li>3、socket 的基本操作\n<ul>\n<li>3.1、socket () 函数</li>\n<li>3.2、bind () 函数</li>\n<li>3.3、listen ()、connect () 函数</li>\n<li>3.4、accept () 函数</li>\n<li>3.5、read ()、write () 函数等</li>\n<li>3.6、close () 函数</li>\n</ul>\n</li>\n<li>4、socket 中 TCP 的三次握手建立连接详解</li>\n<li>5、socket 中 TCP 的四次握手释放连接详解</li>\n<li>6、一个例子（实践一下）</li>\n<li>7、留下一个问题，欢迎大家回帖回答！！！</li>\n</ul>\n<h1 id=\"1-网络中进程之间如何通信\"><a class=\"anchor\" href=\"#1-网络中进程之间如何通信\">#</a> 1、网络中进程之间如何通信？</h1>\n<p>本地的进程间通信（ <code>IPC</code> ）有很多种方式，但可以总结为下面 4 类：</p>\n<ul>\n<li>消息传递（管道、FIFO、消息队列）</li>\n<li>同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</li>\n<li>共享内存（匿名的和具名的）</li>\n<li>远程过程调用（ <code>Solaris</code>  门和 <code>Sun RPC</code> ）</li>\n</ul>\n<p>但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程 <code>PID</code>  唯一标识一个进程，但是在网络中这是行不通的。其实 <code>TCP/IP</code>  协议族已经帮我们解决了这个问题，网络层的 “ <code>**ip地址**”</code>  可以唯一标识网络中的主机，而传输层的 “<strong>协议 + 端口</strong>” 可以唯一标识主机中的应用程序（进程）。这样利用三元组（ <code>ip</code>  地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。</p>\n<p>使用 <code>TCP/IP</code>  协议的应用程序通常采用应用编程接口：UNIX BSD 的套接字（socket）和 UNIX System V 的 <code>TLI</code>  已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用 socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说 “一切皆 socket”。</p>\n<h1 id=\"2-什么是socket\"><a class=\"anchor\" href=\"#2-什么是socket\">#</a> 2、什么是 Socket？</h1>\n<p>上面我们已经知道网络中的进程是通过 socket 来通信的，那什么是 socket 呢？socket 起源于 Unix，而 Unix/Linux 基本哲学之一就是 “一切皆文件”，都可以用 “打开 open –&gt; 读写 write/read –&gt; 关闭 close” 模式来操作。我的理解就是 Socket 就是该模式的一个实现，socket 即是一种特殊的文件，一些 socket 函数就是对其进行的操作（读 / 写 IO、打开、关闭），这些函数我们在后面进行介绍。</p>\n<blockquote>\n<h3 id=\"socket一词的起源\"><a class=\"anchor\" href=\"#socket一词的起源\">#</a> socket 一词的起源</h3>\n<p>在组网领域的首次使用是在 1970 年 2 月 12 日发布的文献<span class=\"exturl\" data-url=\"aHR0cDovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9yZmMzMy8=\"> IETF RFC33</span> 中发现的，撰写者为 Stephen Carr、Steve Crocker 和 <code>Vint </code> Cerf。根据美国计算机历史博物馆的记载， <code>Croker</code>  写道：“命名空间的元素都可称为套接字接口。一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。” 计算机历史博物馆补充道：“这比 BSD 的套接字接口定义早了大约 12 年。”</p>\n</blockquote>\n<h1 id=\"3-socket的基本操作\"><a class=\"anchor\" href=\"#3-socket的基本操作\">#</a> 3、socket 的基本操作</h1>\n<p>既然 socket 是 “open—write/read—close” 模式的一种实现，那么 socket 就提供了这些操作对应的函数接口。下面以 TCP 为例，介绍几个基本的 socket 接口函数。</p>\n<h2 id=\"31-socket函数\"><a class=\"anchor\" href=\"#31-socket函数\">#</a> 3.1、socket () 函数</h2>\n<pre><code>int socket(int domain, int type, int protocol);\n</code></pre>\n<p>socket 函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而 ****socket ()**** 用于创建一个 socket 描述符（socket descriptor），它唯一标识一个 socket。这个 socket 描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p>\n<p>正如可以给 fopen 的传入不同参数值，以打开不同的文件。创建 socket 的时候，也可以指定不同的参数创建不同的 socket 描述符，socket 函数的三个参数分别为：</p>\n<ul>\n<li>domain：即协议域，又称为协议族（family）。常用的协议族有， <code>AF_INET、AF_INET6、AF_LOCAL</code> （或称 AF_UNIX，Unix 域 socket）、AF_ROUTE 等等。协议族决定了 socket 的地址类型，在通信中必须采用对应的地址，如 <code>AF_INET</code>  决定了要用 <code>ipv4</code>  地址（32 位的）与端口号（16 位的）的组合、AF_UNIX 决定了要用一个绝对路径名作为地址。</li>\n<li>type：指定 socket 类型。常用的 socket 类型有， <code>SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET</code>  等等（socket 的类型有哪些？）。</li>\n<li>protocol：故名思意，就是指定协议。常用的协议有， <code>IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC</code>  等，它们分别对应 TCP 传输协议、 <code>UDP</code>  传输协议、 <code>STCP</code>  传输协议、 <code>TIPC</code>  传输协议（这个协议我将会单独开篇讨论！）。</li>\n</ul>\n<p>注意：并不是上面的 type 和 protocol 可以随意组合的，如 SOCK_STREAM 不可以跟 <code>IPPROTO_UDP</code>  组合。当 protocol 为 0 时，会自动选择 type 类型对应的默认协议。</p>\n<p>当我们调用 ****socket**** 创建一个 socket 时，返回的 socket 描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用 bind () 函数，否则就当调用 connect ()、listen () 时系统会自动随机分配一个端口。</p>\n<h2 id=\"32-bind函数\"><a class=\"anchor\" href=\"#32-bind函数\">#</a> 3.2、bind () 函数</h2>\n<p>正如上面所说 bind () 函数把一个地址族中的特定地址赋给 socket。例如对应 <code>AF_INET</code> 、 <code>AF_INET6</code>  就是把一个 <code>ipv4</code>  或 <code>ipv6</code>  地址和端口号组合赋给 socket。</p>\n<pre><code>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre>\n<p>函数的三个参数分别为：</p>\n<ul>\n<li>\n<p>sockfd：即 socket 描述字，它是通过 socket () 函数创建了，唯一标识一个 socket。bind () 函数就是将给这个描述字绑定一个名字。</p>\n</li>\n<li>\n<p>addr：一个</p>\n<p>const</p>\n<p>struct</p>\n<p>sockaddr * 指针，指向要绑定给 sockfd 的协议地址。这个地址结构根据地址创建 socket 时的地址协议族的不同而不同，如 ipv4 对应的是：</p>\n<pre><code>struct sockaddr_in &#123;\n    sa_family_t    sin_family; /* address family: AF_INET */\n    in_port_t      sin_port;   /* port in network byte order */\n    struct in_addr sin_addr;   /* internet address */\n&#125;;\n\n/* Internet address. */\nstruct in_addr &#123;\n    uint32_t       s_addr;     /* address in network byte order */\n&#125;;\n</code></pre>\n<p>ipv6 对应的是：</p>\n<pre><code>struct sockaddr_in6 &#123; \n    sa_family_t     sin6_family;   /* AF_INET6 */ \n    in_port_t       sin6_port;     /* port number */ \n    uint32_t        sin6_flowinfo; /* IPv6 flow information */ \n    struct in6_addr sin6_addr;     /* IPv6 address */ \n    uint32_t        sin6_scope_id; /* Scope ID (new in 2.4) */ \n&#125;;\n\nstruct in6_addr &#123; \n    unsigned char   s6_addr[16];   /* IPv6 address */ \n&#125;;\n</code></pre>\n<p>Unix 域对应的是：</p>\n<pre><code>#define UNIX_PATH_MAX    108\n\nstruct sockaddr_un &#123; \n    sa_family_t sun_family;               /* AF_UNIX */ \n    char        sun_path[UNIX_PATH_MAX];  /* pathname */ \n&#125;;\n</code></pre>\n</li>\n<li>\n<p>addrlen：对应的是地址的长度。</p>\n</li>\n</ul>\n<p>通常服务器在启动的时候都会绑定一个众所周知的地址（如 ip 地址 + 端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的 ip 地址组合。这就是为什么通常服务器端在 listen 之前会调用 bind ()，而客户端就不会调用，而是在 connect () 时由系统随机生成一个。</p>\n<h3 id=\"网络字节序与主机字节序\"><a class=\"anchor\" href=\"#网络字节序与主机字节序\">#</a> 网络字节序与主机字节序</h3>\n<blockquote>\n<p>**** 主机字节序 **** 就是我们平常说的大端和小端模式：不同的 CPU 有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的 Big- <code>Endian</code>  和 <code>Little-Endian</code>  的定义如下：</p>\n<p>a)  <code>Little-Endian</code>  就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</p>\n<p>b)  <code>Big-Endian</code>  就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p>\n<p><em><strong>* 网络字节序 *</strong></em>：4 个字节的 32 bit 值以下面的次序传输：首先是 <code>0～7bit</code> ，其次 <code>8～15bit</code> ，然后 <code>16～23bit</code> ，最后是 <code>24~31bit</code> 。这种传输次序称作大端字节序。** 由于 <code>TCP/IP</code>  首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。** 字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。</p>\n<p>所以：在将一个地址绑定到 socket 的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是 <code>Big-Endian</code>  由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给 socket。</p>\n</blockquote>\n<h2 id=\"33-listen-connect函数\"><a class=\"anchor\" href=\"#33-listen-connect函数\">#</a> 3.3、listen ()、connect () 函数</h2>\n<p>如果作为一个服务器，在调用 socket ()、bind () 之后就会调用 listen () 来监听这个 socket，如果客户端这时调用 connect () 发出连接请求，服务器端就会接收到这个请求。</p>\n<pre><code>int listen(int sockfd, int backlog);\nint connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre>\n<p>listen 函数的第一个参数即为要监听的 socket 描述字，第二个参数为相应 socket 可以排队的最大连接个数。socket () 函数创建的 socket 默认是一个主动类型的，listen 函数将 socket 变为被动类型的，等待客户的连接请求。</p>\n<p>connect 函数的第一个参数即为客户端的 socket 描述字，第二参数为服务器的 socket 地址，第三个参数为 socket 地址的长度。客户端通过调用 connect 函数来建立与 TCP 服务器的连接。</p>\n<h2 id=\"34-accept函数\"><a class=\"anchor\" href=\"#34-accept函数\">#</a> 3.4、accept () 函数</h2>\n<p>TCP 服务器端依次调用 socket ()、bind ()、listen () 之后，就会监听指定的 socket 地址了。TCP 客户端依次调用 socket ()、connect () 之后就想 TCP 服务器发送了一个连接请求。TCP 服务器监听到这个请求之后，就会调用 accept () 函数取接收请求，这样连接就建立好了。之后就可以开始网络 I/O 操作了，即类同于普通文件的读写 I/O 操作。</p>\n<pre><code>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n</code></pre>\n<p>accept 函数的第一个参数为服务器的 socket 描述字，第二个参数为指向 struct sockaddr * 的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果 accpet 成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的 TCP 连接。</p>\n<p>注意：accept 的第一个参数为服务器的 socket 描述字，是服务器开始调用 socket () 函数生成的，称为监听 socket 描述字；而 accept 函数返回的是已连接的 socket 描述字。一个服务器通常通常仅仅只创建一个监听 socket 描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接 socket 描述字，当服务器完成了对某个客户的服务，相应的已连接 socket 描述字就被关闭。</p>\n<h2 id=\"35-read-write等函数\"><a class=\"anchor\" href=\"#35-read-write等函数\">#</a> 3.5、read ()、write () 等函数</h2>\n<p>万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络 I/O 进行读写操作了，即实现了网咯中不同进程之间的通信！网络 I/O 操作有下面几组：</p>\n<ul>\n<li>read()/write()</li>\n<li>recv()/send()</li>\n<li>readv()/writev()</li>\n<li>recvmsg()/sendmsg()</li>\n<li>recvfrom()/sendto()</li>\n</ul>\n<p>我推荐使用 recvmsg ()/sendmsg () 函数，这两个函数是最通用的 I/O 函数，实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：</p>\n<pre><code>       #include &lt;unistd.h&gt;\n\n       ssize_t read(int fd, void *buf, size_t count);\n       ssize_t write(int fd, const void *buf, size_t count);\n\n       #include &lt;sys/types.h&gt;\n       #include &lt;sys/socket.h&gt;\n\n       ssize_t send(int sockfd, const void *buf, size_t len, int flags);\n       ssize_t recv(int sockfd, void *buf, size_t len, int flags);\n\n       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,\n                      const struct sockaddr *dest_addr, socklen_t addrlen);\n       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,\n                        struct sockaddr *src_addr, socklen_t *addrlen);\n\n       ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);\n       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);\n</code></pre>\n<p>read 函数是负责从 <code>fd</code>  中读取内容。当读成功时，read 返回实际所读的字节数，如果返回的值是 0 表示已经读到文件的结束了，小于 0 表示出现了错误。如果错误为 <code>EINTR</code>  说明读是由中断引起的，如果是 <code>ECONNREST</code>  表示网络连接出了问题。</p>\n<p>write 函数将 <code>buf</code>  中的 <code>nbytes</code>  字节内容写入文件描述符 <code>fd</code> . 成功时返回写的字节数。失败时返回 - 1，并设置 <code>errno</code>  变量。 在网络程序中，当我们向套接字文件描述符写时有俩种可能。1) write 的返回值大于 0，表示写了部分或者是全部的数据。2) 返回的值小于 0，此时出现了错误。我们要根据错误类型来处理。如果错误为 <code>EINTR</code>  表示在写的时候出现了中断错误。如果为 <code>EPIPE</code>  表示网络连接出现了问题 (对方已经关闭了连接)。</p>\n<p>其它的我就不一一介绍这几对 I/O 函数了，具体参见 man 文档或者 baidu、Google，下面的例子中将使用到 send/recv。</p>\n<h2 id=\"36-close函数\"><a class=\"anchor\" href=\"#36-close函数\">#</a> 3.6、close () 函数</h2>\n<p>在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的 socket 描述字，好比操作完打开的文件要调用 fclose 关闭打开的文件。</p>\n<pre><code>#include &lt;unistd.h&gt;\nint close(int fd);\n</code></pre>\n<p>close 一个 TCP socket 的缺省行为时把该 socket 标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为 read 或 write 的第一个参数。</p>\n<p>注意：close 操作只是使相应 socket 描述字的引用计数 - 1，只有当引用计数为 0 的时候，才会触发 TCP 客户端向服务器发送终止连接请求。</p>\n<h1 id=\"4-socket中tcp的三次握手建立连接详解\"><a class=\"anchor\" href=\"#4-socket中tcp的三次握手建立连接详解\">#</a> 4、socket 中 TCP 的三次握手建立连接详解</h1>\n<p>我们知道 tcp 建立连接要进行 “三次握手”，即交换三个分组。大致流程如下：</p>\n<ul>\n<li>客户端向服务器发送一个 SYN J</li>\n<li>服务器向客户端响应一个 SYN K，并对 SYN J 进行确认 <code>ACK J+1</code></li>\n<li>客户端再想服务器发一个确认 <code>ACK K+1</code></li>\n</ul>\n<p>只有就完了三次握手，但是这个三次握手发生在 socket 的那几个函数中呢？请看下图：</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png\"><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157476286.png\" alt=\"image\" /></a></p>\n<p>图 1、socket 中发送的 TCP 三次握手</p>\n<p>从图中可以看出，当客户端调用 connect 时，触发了连接请求，向服务器发送了 SYN J 包，这时 connect 进入阻塞状态；服务器监听到连接请求，即收到 SYN J 包，调用 accept 函数接收请求向客户端发送 SYN K ， <code>ACK J+1</code> ，这时 accept 进入阻塞状态；客户端收到服务器的 SYN K ， <code>ACK J+1</code>  之后，这时 connect 返回，并对 SYN K 进行确认；服务器收到 <code>ACK K+1</code>  时，accept 返回，至此三次握手完毕，连接建立。</p>\n<blockquote>\n<p>总结：客户端的 connect 在三次握手的第二个次返回，而服务器端的 accept 在三次握手的第三次返回。</p>\n</blockquote>\n<h1 id=\"5-socket中tcp的四次握手释放连接详解\"><a class=\"anchor\" href=\"#5-socket中tcp的四次握手释放连接详解\">#</a> 5、socket 中 TCP 的四次握手释放连接详解</h1>\n<p>上面介绍了 socket 中 TCP 的三次握手建立过程，及其涉及的 socket 函数。现在我们介绍 socket 中的四次握手释放连接的过程，请看下图：</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157487616.png\"><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157494693.png\" alt=\"image\" /></a></p>\n<p>图 2、socket 中发送的 TCP 四次握手</p>\n<p>图示过程如下：</p>\n<ul>\n<li>某个应用进程首先调用 close 主动关闭连接，这时 TCP 发送一个 FIN M；</li>\n<li>另一端接收到 FIN M 之后，执行被动关闭，对这个 FIN 进行确认。它的接收也作为文件结束符传递给应用进程，因为 FIN 的接收意味着应用进程在相应的连接上再也接收不到额外数据；</li>\n<li>一段时间之后，接收到文件结束符的应用进程调用 close 关闭它的 socket。这导致它的 TCP 也发送一个 FIN N；</li>\n<li>接收到这个 FIN 的源发送端 TCP 对它进行确认。</li>\n</ul>\n<p>这样每个方向上都有一个 <code>FIN</code>  和 <code>ACK</code> 。</p>\n",
            "tags": [
                "教程",
                "编程",
                "编程",
                "socket"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/programming/socket-1/",
            "url": "https://wlp1231.cn/the-tutorial/programming/socket-1/",
            "title": "socket-1",
            "date_published": "2023-01-11T05:38:35.205Z",
            "content_html": "<h1 id=\"套接字\"><a class=\"anchor\" href=\"#套接字\">#</a> 套接字</h1>\n<h4 id=\"socket\"><a class=\"anchor\" href=\"#socket\">#</a> socket</h4>\n<p>所谓套接字 (Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。</p>\n<ul>\n<li>\n<p>中文名</p>\n<p>套接字</p>\n</li>\n<li>\n<p>外文名</p>\n<p>socket</p>\n</li>\n<li>\n<p>实  质</p>\n<p>两个网络各自通信连接中的端点</p>\n</li>\n<li>\n<p>类  型</p>\n<p>流式套接字、数据报套接字和原始套接字</p>\n</li>\n<li>\n<p>作  用</p>\n<p>完成两个应用程序之间的数据传输</p>\n</li>\n<li>\n<p>学  科</p>\n<p>计算机网络</p>\n</li>\n</ul>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<ol>\n<li>\n<p>1 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzE=\">简介</span></p>\n</li>\n<li>\n<p>2 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzI=\">表示方法</span></p>\n</li>\n<li>\n<p>3 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzM=\">主要类型</span></p>\n</li>\n<li>\n<p>4 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzQ=\">工作流程</span></p>\n</li>\n<li>\n<p>5 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzU=\">主要特点</span></p>\n</li>\n<li>\n<p>6 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTcvOTYzNzYwNj9mcm9tdGl0bGU9c29ja2V0JmFtcDtmcm9taWQ9MjgxMTUwJmFtcDtmcj1hbGFkZGluIzY=\">套接字的引入</span></p>\n</li>\n</ol>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>套接字是通信的基石，是支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9UQ1AlMkZJUCVFNSU4RCU4RiVFOCVBRSVBRS8yMTI5MTU=\"> TCP/IP 协议</span>的路通信的基本操作单元。可以将套接字看作不同主机间的进程进行双间通信的端点，它构成了单个主机内及整个网络间的编程界面。套接字存在于通信域中，通信域是为了处理一般的线程通过套接字通信而引进的一种抽象概念。套接字通常和同一个域中的套接字交换数据 (数据交换也可能穿越域的界限，但这时一定要执行某种解释程序)，各种进程使用这个相同的域互相之间用 Internet 协议簇来进行通信。</p>\n<p>Socket (套接字) 可以看成是两个网络应用程序进行通信时，各自通信连接中的端点，这是一个逻辑上的概念。它是网络环境中<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkYlOUIlRTclQTglOEIlRTklOTclQjQlRTklODAlOUElRTQlQkYlQTEvMTIzNTkyMw==\">进程间通信</span>的 <code>API</code>  (应用程序编程接口)，也是可以被命名和寻址的通信端点，使用中的每一个套接字都有其类型和一个与之相连进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 Socket 中，该 Socket 通过与<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTElRTclQkIlOUMlRTYlOEUlQTUlRTUlOEYlQTMlRTUlOEQlQTEvOTc2NDIzMA==\">网络接口卡</span> ( <code>NIC</code> ) 相连的传输介质将这段信息送到另外一台主机的 Socket 中，使对方能够接收到这段信息。 Socket 是由 <code>IP</code>  地址和端口结合的，提供向应用层进程传送数据包的机制  。</p>\n<h2 id=\"表示方法\"><a class=\"anchor\" href=\"#表示方法\">#</a> 表示方法</h2>\n<p>套接字 Socket=（ <code>IP</code>  地址：端口号），套接字的表示方法是点分十进制的 <code>lP</code>  地址后面写上端口号，中间用冒号或逗号隔开。每一个传输层连接唯一地被通信两端的两个端点（即两个套接字）所确定。例如：如果 <code>IP</code>  地址是 210.37.145.1，而端口号是 23，那么得到套接字就是 ( <code>210.37.145.1:23</code> )。</p>\n<h2 id=\"主要类型\"><a class=\"anchor\" href=\"#主要类型\">#</a> 主要类型</h2>\n<p><strong>1. 流套接字 (SOCK_STREAM)</strong></p>\n<p>流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkMlQTAlRTglQkUlOTMlRTYlOEUlQTclRTUlODglQjYlRTUlOEQlOEYlRTglQUUlQUUvOTcyNzc0MQ==\">传输控制协议</span>，即 TCP (The Transmission Control Protocol) 协议  。</p>\n<p><strong>2. 数据报套接字 ( <code>SOCK_DGRAM</code> )</strong></p>\n<p>数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性，数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。数据报套接字使用 <code>UDP</code> (  <code>User DatagramProtocol</code> ) 协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理  。</p>\n<p><strong>3. 原始套接字 (SOCK_RAW)</strong></p>\n<p>原始套接字与标准套接字 (标准套接字指的是前面介绍的流套接字和数据报套接字) 的区别在于：原始套接字可以读写内核没有处理的 <code>IP</code>  数据包，而流套接字只能读取 TCP 协议的数据，数据报套接字只能读取 <code>UDP</code>  协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接  。</p>\n<h2 id=\"工作流程\"><a class=\"anchor\" href=\"#工作流程\">#</a> 工作流程</h2>\n<p>要通过互联网进行通信，至少需要一对套接字，其中一个运行于客户端，我们称之为 Client Socket，另一个运行于服务器端，我们称之为 Server Socket 。</p>\n<p>根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤 ：</p>\n<p>(1) 服务器监听。</p>\n<p>(2) 客户端请求。</p>\n<p>(3) 连接确认 。</p>\n<p><strong>1. 服务器监听</strong></p>\n<p>所谓服务器监听，是指服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态 。</p>\n<p><strong>2. 客户端请求</strong></p>\n<p>所谓客户端请求，是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端接字提出连接请求 。</p>\n<p><strong>3. 连接确认</strong></p>\n<p>所谓连接确认，是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，就会响应客户端套接字的请求，建立一个新的线程，并把服务器端套接字的描述发送给客户端。一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，接收其他客户端套接字的连接请求 。</p>\n<h2 id=\"主要特点\"><a class=\"anchor\" href=\"#主要特点\">#</a> 主要特点</h2>\n<p>根据套接字的不同类型，可以将套接字调用分为面向连接服务和无连接服务 。</p>\n<p>面向连接服务的主要特点如下：</p>\n<p>(1) 数据传输过程必须经过建立连接、维护连接和释放连接 3 个阶段 ；</p>\n<p>(2) 在传输过程中，各分组不需要携带目的主机的地址  ；</p>\n<p>(3) 可靠性好，但由于协议复杂，通信效率不高 。</p>\n<p>面向无连接服务的主要特点如下：</p>\n<p>(1) 不需要连接的各个阶段  ；</p>\n<p>(2) 每个分组都携带完整的目的主机地址，在系统中独立传送  ；</p>\n<p>(3) 由于没有顺序控制，所以接收方的分组可能出现乱序、重复和丢失现象 ；</p>\n<p>(4) 通信效率高，但可靠性不能确保 。</p>\n",
            "tags": [
                "教程",
                "编程",
                "编程",
                "socket"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/programming/socket-2/",
            "url": "https://wlp1231.cn/the-tutorial/programming/socket-2/",
            "title": "socket-2",
            "date_published": "2023-01-11T05:38:35.205Z",
            "content_html": "<h4 id=\"socket简介\"><a class=\"anchor\" href=\"#socket简介\">#</a> socket 简介</h4>\n<p>​\t\t套接字 (Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议栈进行交互的接口。</p>\n<p>​\t\t套接字是通信的基石，是支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9UQ1AlMkZJUCVFNSU4RCU4RiVFOCVBRSVBRS8yMTI5MTU=\"> TCP/IP 协议</span>的路通信的基本操作单元。可以将套接字看作不同主机间的进程进行双间通信的端点，它构成了单个主机内及整个网络间的编程界面。套接字存在于通信域中，通信域是为了处理一般的线程通过套接字通信而引进的一种抽象概念。套接字通常和同一个域中的套接字交换数据 (数据交换也可能穿越域的界限，但这时一定要执行某种解释程序)，各种进程使用这个相同的域互相之间用 Internet 协议簇来进行通信。</p>\n<p>​\t\t套接字 (Socket) 可以看成是两个网络应用程序进行通信时，各自通信连接中的端点，这是一个逻辑上的概念。它是网络环境中<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkYlOUIlRTclQTglOEIlRTklOTclQjQlRTklODAlOUElRTQlQkYlQTEvMTIzNTkyMw==\">进程间通信</span>的 <code>API</code>  (应用程序编程接口)，也是可以被命名和寻址的通信端点，使用中的每一个套接字都有其类型和一个与之相连进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 Socket 中，该 Socket 通过与<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTElRTclQkIlOUMlRTYlOEUlQTUlRTUlOEYlQTMlRTUlOEQlQTEvOTc2NDIzMA==\">网络接口卡</span> ( <code>NIC</code> ) 相连的传输介质将这段信息送到另外一台主机的 Socket 中，使对方能够接收到这段信息。 Socket 是由 <code>IP</code>  地址和端口结合的，提供向应用层进程传送数据包的机制 。</p>\n<h4 id=\"表示方法\"><a class=\"anchor\" href=\"#表示方法\">#</a> 表示方法</h4>\n<p>​\t\t套接字 Socket=（ <code>IP</code>  地址：端口号），套接字的表示方法是点分十进制的 <code>lP</code>  地址后面写上端口号，中间用冒号或逗号隔开。每一个传输层连接唯一地被通信两端的两个端点（即两个套接字）所确定。例如：如果 <code>IP</code>  地址是 210.37.145.1，而端口号是 23，那么得到套接字就是 ( <code>210.37.145.1:23</code> )</p>\n<h4 id=\"主要类型\"><a class=\"anchor\" href=\"#主要类型\">#</a> 主要类型</h4>\n<h5 id=\"流套接字sock_stream\"><a class=\"anchor\" href=\"#流套接字sock_stream\">#</a> 流套接字（<strong>SOCK_STREAM</strong>）</h5>\n<p>​\t\t流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkMlQTAlRTglQkUlOTMlRTYlOEUlQTclRTUlODglQjYlRTUlOEQlOEYlRTglQUUlQUUvOTcyNzc0MQ==\">传输控制协议</span>，即 TCP (The Transmission Control Protocol) 协议</p>\n<h5 id=\"数据报套接字sock_dgram\"><a class=\"anchor\" href=\"#数据报套接字sock_dgram\">#</a> 数据报套接字（<strong> <code>SOCK_DGRAM</code> </strong>）</h5>\n<p>​\t\t数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性，数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。数据报套接字使用 <code>UDP( User DatagramProtocol)</code>  协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理</p>\n<h5 id=\"原始套接字sock_raw\"><a class=\"anchor\" href=\"#原始套接字sock_raw\">#</a> 原始套接字（<strong>SOCK_RAW</strong>）</h5>\n<p>​\t\t原始套接字与标准套接字 (标准套接字指的是前面介绍的流套接字和数据报套接字) 的区别在于：原始套接字可以读写内核没有处理的 IP 数据包，而流套接字只能读取 TCP 协议的数据，数据报套接字只能读取 UDP 协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接</p>\n<h4 id=\"工作流程\"><a class=\"anchor\" href=\"#工作流程\">#</a> 工作流程</h4>\n<p>​\t\t要通过互联网进行通信，至少需要一对套接字，其中一个运行于客户端，我们称之为 Client Socket，另一个运行于服务器端，我们称之为 Server Socket 。</p>\n<p>根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤  ：</p>\n<p>(1) 服务器监听。</p>\n<p>(2) 客户端请求。</p>\n<p>(3) 连接确认。</p>\n<h5 id=\"1服务器监听\"><a class=\"anchor\" href=\"#1服务器监听\">#</a> <strong>1. 服务器监听</strong></h5>\n<p>​\t\t所谓服务器监听，是指服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态 。</p>\n<h5 id=\"2客户端请求\"><a class=\"anchor\" href=\"#2客户端请求\">#</a> <strong>2. 客户端请求</strong></h5>\n<p>​\t\t所谓客户端请求，是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端接字提出连接请求 。</p>\n<h5 id=\"3连接确认\"><a class=\"anchor\" href=\"#3连接确认\">#</a> <strong>3. 连接确认</strong></h5>\n<p>​\t\t所谓连接确认，是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，就会响应客户端套接字的请求，建立一个新的线程，并把服务器端套接字的描述发送给客户端。一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，接收其他客户端套接字的连接请求</p>\n<h4 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h4>\n<h5 id=\"1创建一个socket\"><a class=\"anchor\" href=\"#1创建一个socket\">#</a> 1. 创建一个 socket</h5>\n<p>​\t\t<mark>创建函数</mark>： <code>int socket(int family, int type, int protocol)</code> ;<br />\n​\t\tsocket () 打开一个网络通讯端口，如果成功的话，就像 open () 一样返回一个文件描述符，应用程序可以像读写文件一样用 read/write 在网络上收发数据，<mark>如果 socket () 调用出错则返回 - 1</mark>。对于 <code>IPv4</code> ，family 参数指定为 <code>AF_INET</code> 。对于 TCP 协议，type 参数指定为 SOCK_STREAM，表示面向流的传输协议。如果是 <code>UDP</code>  协议，则 type 参数指定为 <code>SOCK_DGRAM</code> ，表示面向数据报的传输协议。protocol 参数的介绍从略，指定为 0 即可。</p>\n<h5 id=\"2绑定本机ip端口\"><a class=\"anchor\" href=\"#2绑定本机ip端口\">#</a> 2. 绑定本机 <code>IP</code>  端口</h5>\n<h5 id=\"3bind绑定\"><a class=\"anchor\" href=\"#3bind绑定\">#</a> 3. <code>bind()</code>  绑定</h5>\n<p>​\t\t<mark>bind () 函数</mark>： <code>int bind(int sockfd, const struct sockaddr *myaddr, socklen_t addrlen)</code> ;<br />\n​\t\t服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用 bind 绑定一个固定的网络地址和端口号。<mark>bind () 成功返回 0，失败返回 - 1</mark>。</p>\n<p>​\t\tbind () 的作用是将参数 <code>sockfd</code>  和 <code>myaddr</code>  绑定在一起，使 <code>sockfd</code>  这个用于网络通讯的文件描述符 (<mark>创建 socket 时的返回值</mark>) 监听 <code>myaddr</code>  所描述的<mark>地址和端口号</mark> (对结构体初始化时所赋值)。 <code>struct sockaddr</code>  * 是一个通用指针类型，<mark> <code>myaddr</code>  参数实际上可以接受多种协议的 <code>sockaddr</code>  结构体</mark>，而它们的长度各不相同，所以需要第三个参数 <code>addrlen</code> <mark> 指定结构体的长度</mark>。</p>\n<p>​\t\t程序中对 <code>myaddr</code>  参数是这样初始化的：</p>\n<pre><code class=\"language-c++\">memset(&amp;servaddr, 0, sizeof(servaddr));\nservaddr.sin_family = AF_INET;\nservaddr.sin_port = htons(5188);\nservaddr.sin_addr.s_addr = htonl(INADDR_ANY); \n</code></pre>\n<p>​\t\t首先将整个结构体清零（也可以用 <code>bzero</code>  函数），然后设置地址类型为 <code>AF_INET</code> ，网络地址为 <code>INADDR_ANY</code> ，这个宏表示本地的任意 <code>IP</code>  地址，因为服务器可能有多个网卡，每个网卡也可能绑定多个 <code>IP</code>  地址，这样设置可以在所有的 <code>IP</code>  地址上监听，直到与某个客户端建立了连接时才确定下来到底用哪个 <code>IP</code>  地址，端口号为 5188，可以自行定义，范围是从 1024 到 65535。</p>\n<h5 id=\"4等待客户端的连接接收客户端数据\"><a class=\"anchor\" href=\"#4等待客户端的连接接收客户端数据\">#</a> 4. 等待客户端的连接，接收客户端数据</h5>\n<p>​\t\t<mark>监听函数</mark>： <code>int listen(int sockfd, int backlog)</code> ;<br />\n​\t\t典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的 <code>accept()</code>  返回并接受这个连接，如果有大量的客户端发起连接而服务器来不及处理，尚未 <code>accept</code>  的客户端就处于连接等待状态，listen () 声明 <code>sockfd</code>  处于监听状态，并且最多允许有 <code>backlog</code>  个客户端处于连接等待状态，如果接收到更多的连接请求就忽略。 <code>listen()</code>  成功返回 0，失败返回 - 1。</p>\n<p>​\t\t<mark>接受连接</mark>： <code>int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen)</code> ;<br />\n​\t\t三方握手完成后，服务器调用 accept () 接受连接，如果服务器调用 <code>accept()</code>  时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。 <code>cliaddr</code>  是一个传出参数， <code>accept()</code>  返回时传出客户端的地址和端口号。 <code>addrlen</code>  参数是一个传入传出参数（ <code>value-result argument</code> ），传入的是调用者提供的缓冲区 <code>cliaddr</code>  的长度以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度（有可能没有占满调用者提供的缓冲区）。如果给 <code>cliaddr</code>  和 <code>addrlen</code>  参数传 NULL，表示不关心客户端的地址。</p>\n<h5 id=\"5数据接受与发送\"><a class=\"anchor\" href=\"#5数据接受与发送\">#</a> 5. 数据接受与发送</h5>\n<p>调用网络 I/O 进行读写操作：</p>\n<ul>\n<li>\n<p><code>read()/write()</code></p>\n</li>\n<li>\n<p><code>recv()/send()</code></p>\n</li>\n<li>\n<p><code>readv()/writev()</code></p>\n</li>\n<li>\n<p><code>recvmsg()/sendmsg()</code></p>\n</li>\n<li>\n<p><code>recvfrom()/sendto()</code></p>\n<p><code>recv()/send()</code>  详解</p>\n<p><mark>函数</mark>： <code>int recv( SOCKET s, char FAR *buf, int len, int flags )</code> ;</p>\n<p>不论是客户还是服务器应用程序都用 recv 函数从 TCP 连接的另一端接收数据。</p>\n<p>（1）第一个参数指定接收端套接字描述符；</p>\n<p>（2）第二个参数指明一个缓冲区，该缓冲区用来存放 recv 函数接收到的数据；</p>\n<p>（3）第三个参数指明 <code>buf</code>  的长度；</p>\n<p>（4）第四个参数一般置 0。</p>\n<p>​\t\t这里只描述同步 Socket 的 <code>recv</code>  函数的执行流程。当应用程序调用 <code>recv</code>  函数时， <code>recv</code>  先等待 s 的发送缓冲中的数据被协议传送完毕，如果协议在传送 s 的发送缓冲中的数据时出现网络错误，那么 <code>recv</code>  函数返回 SOCKET_ERROR，如果 s 的发送缓冲中没有数据或者数据被协议成功发送完毕后， <code>recv</code>  先检查套接字 s 的接收缓冲区，如果 s 接收缓冲区中没有数据或者协议正在接收数据，那么 <code>recv</code>  就一直等待，只到协议把数据接收完毕。当协议把数据接收完毕， <code>recv</code>  函数就把 s 的接收缓冲中的数据 copy 到 <code>buf</code>  中（注意协议接收到的数据可能大于 <code>buf</code>  的长度，所以在这种情况下要调用几次 <code>recv</code>  函数才能把 s 的接收缓冲中的数据 copy 完。 <code>recv</code>  函数仅仅是 copy 数据，真正的接收数据是协议来完成的）， <code>recv</code>  函数返回其实际 copy 的字节数。如果 <code>recv</code>  在 copy 时出错，那么它返回 SOCKET_ERROR；如果 <code>recv</code>  函数在等待协议接收数据时网络中断了，那么它返回 0。</p>\n<p><mark>函数</mark>： <code>int send( SOCKET s, const char FAR *buf, int len, int flags )</code> ;</p>\n<p>​\t\t不论是客户还是服务器应用程序都用 send 函数来向 TCP 连接的另一端发送数据。</p>\n<p>​\t\t客户程序一般用 send 函数向服务器发送请求，而服务器则通常用 send 函数来向客户程序发送应答。</p>\n<p>（1）第一个参数指定发送端<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlQTUlOTclRTYlOEUlQTUlRTUlQUQlOTc=\">套接字</span>描述符；</p>\n<p>（2）第二个参数指明一个存放应用程序要发送数据的缓冲区；</p>\n<p>（3）第三个参数指明实际要发送的数据的字节数；</p>\n<p>（4）第四个参数一般置 0。</p>\n<p>这里只描述同步 Socket 的 send 函数的执行流程。当调用该函数时，send 先比较待发送数据的长度 <code>len</code>  和套接字 s 的发送缓冲的长度， 如果 <code>len</code>  大于 s 的发送缓冲区的长度，该函数返回 SOCKET_ERROR；如果 <code>len</code>  小于或者等于 s 的发送缓冲区的长度，那么 send 先检查协议是否正在发送 s 的发送缓冲中的数据，如果是就等待协议把数据发送完，如果协议还没有开始发送 s 的发送缓冲中的数据或者 s 的发送缓冲中没有数据，那么 send 就比较 s 的发送缓冲区的剩余空间和 <code>len</code> ，如果 <code>len</code>  大于剩余空间大小 send 就一直等待协议把 s 的发送缓冲中的数据发送完，如果 <code>len</code>  小于剩余空间大小 send 就仅仅把 <code>buf</code>  中的数据 copy 到剩余空间里（注意并不是 send 把 s 的发送缓冲中的数据传到连接的另一端的，而是协议的，send 仅仅是把 <code>buf</code>  中的数据 copy 到 s 的发送缓冲区的剩余空间里）。</p>\n<p>如果 send 函数 copy 数据成功，就返回实际 copy 的字节数，如果 send 在 copy 数据时出现错误，那么 send 就返回 SOCKET_ERROR；如果 send 在等待协议传送数据时网络断开的话，那么 send 函数也返回 SOCKET_ERROR。</p>\n<p>要注意 send 函数把 <code>buf</code>  中的数据成功 copy 到 s 的发送缓冲的剩余空间里后它就返回了，但是此时这些数据并不一定马上被传到连接的另一端。如果协议在后续的传送过程中出现网络错误的话，那么下一个 Socket 函数就会返回 SOCKET_ERROR。（每一个除 send 外的 Socket 函数在执行的最开始总要先等待套接字的发送缓冲中的数据被协议传送完毕才能继续，如果在等待时出现网络错误，那么该 Socket 函数就返回 SOCKET_ERROR）。</p>\n<p>使用声明：</p>\n<pre><code class=\"language-c++\">#include \n\n       ssize_t read(int fd, void *buf, size_t count);\n       ssize_t write(int fd, const void *buf, size_t count);\n\n       #include \n       #include \n\n       ssize_t send(int sockfd, const void *buf, size_t len, int flags);\n       ssize_t recv(int sockfd, void *buf, size_t len, int flags);\n\n       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,\n                      const struct sockaddr *dest_addr, socklen_t addrlen);\n       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,\n                        struct sockaddr *src_addr, socklen_t *addrlen);\n\n       ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);\n       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);\n</code></pre>\n<p>​\t\tread 函数是负责从 <code>fd</code>  中读取内容。当读成功时，read 返回实际所读的字节数，如果返回的值是 0 表示已经读到文件的结束了，小于 0 表示出现了错误。如果错误为 <code>EINTR</code>  说明读是由中断引起的，如果是 <code>ECONNREST</code>  表示网络连接出了问题。</p>\n<p>​\t\twrite 函数将 <code>buf</code>  中的 <code>nbytes</code>  字节内容写入文件描述符 <code>fd.</code>  成功时返回写的字节 数。失败时返回 - 1，并设置 <code>errno</code>  变量。在网络程序中，当我们向套接字文件描述符写时有俩种可能。1) write 的返回值大于 0，表示写了部分或者是 全部的数据。2) 返回的值小于 0，此时出现了错误。我们要根据错误类型来处理。如果错误为 <code>EINTR</code>  表示在写的时候出现了中断错误。如果为 <code>EPIPE</code>  表示 网络连接出现了问题 (对方已经关闭了连接)。</p>\n</li>\n</ul>\n<h4 id=\"socket中tcp的三次握手建立连接详解\"><a class=\"anchor\" href=\"#socket中tcp的三次握手建立连接详解\">#</a> socket 中 TCP 的三次握手建立连接详解</h4>\n<p>tcp 建立连接要进行 “三次握手”，即交换三个分组。大致流程如下：</p>\n<ul>\n<li>客户端向服务器发送一个 <code>SYN J</code></li>\n<li>服务器向客户端响应一个 <code>SYN K</code> ，并对 SYN J 进行确认 <code>ACK J+1</code></li>\n<li>客户端再想服务器发一个确认 <code>ACK K+1</code></li>\n</ul>\n<p>只有就完了三次握手，但是这个三次握手发生在 socket 的那几个函数中呢？请看下图：</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png\"><img data-src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20vc2t5bmV0LzIwMTAxMi8yMDEwMTIxMjIxNTc0NzYyODYucG5n\" alt=\"image\" /></a></p>\n",
            "tags": [
                "教程",
                "编程",
                "编程",
                "socket"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/note/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/",
            "url": "https://wlp1231.cn/the-tutorial/note/socket%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/",
            "title": "socket通信机制详解",
            "date_published": "2023-01-11T05:38:35.200Z",
            "content_html": "<h1 id=\"socket通信机制详解\"><a class=\"anchor\" href=\"#socket通信机制详解\">#</a> socket 通信机制详解</h1>\n<p>我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页时，浏览器的进程怎么与 web 服务器通信的？当你用 <code>QQ</code>  聊天时， <code>QQ</code>  进程怎么与服务器或你好友所在的 <code>QQ</code>  进程通信？这些都得靠 socket？那什么是 socket？socket 的类型有哪些？还有 socket 的基本函数，这些都是本文想介绍的。本文的主要内容如下：</p>\n<ul>\n<li>1、网络中进程之间如何通信？</li>\n<li>2、Socket 是什么？</li>\n<li>3、socket 的基本操作\n<ul>\n<li>3.1、socket () 函数</li>\n<li>3.2、bind () 函数</li>\n<li>3.3、listen ()、connect () 函数</li>\n<li>3.4、accept () 函数</li>\n<li>3.5、read ()、write () 函数等</li>\n<li>3.6、close () 函数</li>\n</ul>\n</li>\n<li>4、socket 中 TCP 的三次握手建立连接详解</li>\n<li>5、socket 中 TCP 的四次握手释放连接详解</li>\n<li>6、一个例子（实践一下）</li>\n<li>7、留下一个问题，欢迎大家回帖回答！！！</li>\n</ul>\n<h1 id=\"1-网络中进程之间如何通信\"><a class=\"anchor\" href=\"#1-网络中进程之间如何通信\">#</a> 1、网络中进程之间如何通信？</h1>\n<p>本地的进程间通信（ <code>IPC</code> ）有很多种方式，但可以总结为下面 4 类：</p>\n<ul>\n<li>消息传递（管道、FIFO、消息队列）</li>\n<li>同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</li>\n<li>共享内存（匿名的和具名的）</li>\n<li>远程过程调用（ <code>Solaris</code>  门和 <code>Sun RPC</code> ）</li>\n</ul>\n<p>但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程 <code>PID</code>  唯一标识一个进程，但是在网络中这是行不通的。其实 <code>TCP/IP</code>  协议族已经帮我们解决了这个问题，网络层的 “ <code>**ip地址**”</code>  可以唯一标识网络中的主机，而传输层的 “<strong>协议 + 端口</strong>” 可以唯一标识主机中的应用程序（进程）。这样利用三元组（ <code>ip</code>  地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。</p>\n<p>使用 <code>TCP/IP</code>  协议的应用程序通常采用应用编程接口：UNIX BSD 的套接字（socket）和 UNIX System V 的 <code>TLI</code>  已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用 socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说 “一切皆 socket”。</p>\n<h1 id=\"2-什么是socket\"><a class=\"anchor\" href=\"#2-什么是socket\">#</a> 2、什么是 Socket？</h1>\n<p>上面我们已经知道网络中的进程是通过 socket 来通信的，那什么是 socket 呢？socket 起源于 Unix，而 Unix/Linux 基本哲学之一就是 “一切皆文件”，都可以用 “打开 open –&gt; 读写 write/read –&gt; 关闭 close” 模式来操作。我的理解就是 Socket 就是该模式的一个实现，socket 即是一种特殊的文件，一些 socket 函数就是对其进行的操作（读 / 写 IO、打开、关闭），这些函数我们在后面进行介绍。</p>\n<blockquote>\n<h3 id=\"socket一词的起源\"><a class=\"anchor\" href=\"#socket一词的起源\">#</a> socket 一词的起源</h3>\n<p>在组网领域的首次使用是在 1970 年 2 月 12 日发布的文献<span class=\"exturl\" data-url=\"aHR0cDovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9yZmMzMy8=\"> IETF RFC33</span> 中发现的，撰写者为 Stephen Carr、Steve Crocker 和 <code>Vint </code> Cerf。根据美国计算机历史博物馆的记载， <code>Croker</code>  写道：“命名空间的元素都可称为套接字接口。一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。” 计算机历史博物馆补充道：“这比 BSD 的套接字接口定义早了大约 12 年。”</p>\n</blockquote>\n<h1 id=\"3-socket的基本操作\"><a class=\"anchor\" href=\"#3-socket的基本操作\">#</a> 3、socket 的基本操作</h1>\n<p>既然 socket 是 “open—write/read—close” 模式的一种实现，那么 socket 就提供了这些操作对应的函数接口。下面以 TCP 为例，介绍几个基本的 socket 接口函数。</p>\n<h2 id=\"31-socket函数\"><a class=\"anchor\" href=\"#31-socket函数\">#</a> 3.1、socket () 函数</h2>\n<pre><code>int socket(int domain, int type, int protocol);\n</code></pre>\n<p>socket 函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而 ****socket ()**** 用于创建一个 socket 描述符（socket descriptor），它唯一标识一个 socket。这个 socket 描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p>\n<p>正如可以给 fopen 的传入不同参数值，以打开不同的文件。创建 socket 的时候，也可以指定不同的参数创建不同的 socket 描述符，socket 函数的三个参数分别为：</p>\n<ul>\n<li>domain：即协议域，又称为协议族（family）。常用的协议族有， <code>AF_INET、AF_INET6、AF_LOCAL</code> （或称 AF_UNIX，Unix 域 socket）、AF_ROUTE 等等。协议族决定了 socket 的地址类型，在通信中必须采用对应的地址，如 <code>AF_INET</code>  决定了要用 <code>ipv4</code>  地址（32 位的）与端口号（16 位的）的组合、AF_UNIX 决定了要用一个绝对路径名作为地址。</li>\n<li>type：指定 socket 类型。常用的 socket 类型有， <code>SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET</code>  等等（socket 的类型有哪些？）。</li>\n<li>protocol：故名思意，就是指定协议。常用的协议有， <code>IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC</code>  等，它们分别对应 TCP 传输协议、 <code>UDP</code>  传输协议、 <code>STCP</code>  传输协议、 <code>TIPC</code>  传输协议（这个协议我将会单独开篇讨论！）。</li>\n</ul>\n<p>注意：并不是上面的 type 和 protocol 可以随意组合的，如 SOCK_STREAM 不可以跟 <code>IPPROTO_UDP</code>  组合。当 protocol 为 0 时，会自动选择 type 类型对应的默认协议。</p>\n<p>当我们调用 ****socket**** 创建一个 socket 时，返回的 socket 描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用 bind () 函数，否则就当调用 connect ()、listen () 时系统会自动随机分配一个端口。</p>\n<h2 id=\"32-bind函数\"><a class=\"anchor\" href=\"#32-bind函数\">#</a> 3.2、bind () 函数</h2>\n<p>正如上面所说 bind () 函数把一个地址族中的特定地址赋给 socket。例如对应 <code>AF_INET</code> 、 <code>AF_INET6</code>  就是把一个 <code>ipv4</code>  或 <code>ipv6</code>  地址和端口号组合赋给 socket。</p>\n<pre><code>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre>\n<p>函数的三个参数分别为：</p>\n<ul>\n<li>\n<p>sockfd：即 socket 描述字，它是通过 socket () 函数创建了，唯一标识一个 socket。bind () 函数就是将给这个描述字绑定一个名字。</p>\n</li>\n<li>\n<p>addr：一个</p>\n<p>const</p>\n<p>struct</p>\n<p>sockaddr * 指针，指向要绑定给 sockfd 的协议地址。这个地址结构根据地址创建 socket 时的地址协议族的不同而不同，如 ipv4 对应的是：</p>\n<pre><code>struct sockaddr_in &#123;\n    sa_family_t    sin_family; /* address family: AF_INET */\n    in_port_t      sin_port;   /* port in network byte order */\n    struct in_addr sin_addr;   /* internet address */\n&#125;;\n\n/* Internet address. */\nstruct in_addr &#123;\n    uint32_t       s_addr;     /* address in network byte order */\n&#125;;\n</code></pre>\n<p>ipv6 对应的是：</p>\n<pre><code>struct sockaddr_in6 &#123; \n    sa_family_t     sin6_family;   /* AF_INET6 */ \n    in_port_t       sin6_port;     /* port number */ \n    uint32_t        sin6_flowinfo; /* IPv6 flow information */ \n    struct in6_addr sin6_addr;     /* IPv6 address */ \n    uint32_t        sin6_scope_id; /* Scope ID (new in 2.4) */ \n&#125;;\n\nstruct in6_addr &#123; \n    unsigned char   s6_addr[16];   /* IPv6 address */ \n&#125;;\n</code></pre>\n<p>Unix 域对应的是：</p>\n<pre><code>#define UNIX_PATH_MAX    108\n\nstruct sockaddr_un &#123; \n    sa_family_t sun_family;               /* AF_UNIX */ \n    char        sun_path[UNIX_PATH_MAX];  /* pathname */ \n&#125;;\n</code></pre>\n</li>\n<li>\n<p>addrlen：对应的是地址的长度。</p>\n</li>\n</ul>\n<p>通常服务器在启动的时候都会绑定一个众所周知的地址（如 ip 地址 + 端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的 ip 地址组合。这就是为什么通常服务器端在 listen 之前会调用 bind ()，而客户端就不会调用，而是在 connect () 时由系统随机生成一个。</p>\n<h3 id=\"网络字节序与主机字节序\"><a class=\"anchor\" href=\"#网络字节序与主机字节序\">#</a> 网络字节序与主机字节序</h3>\n<blockquote>\n<p>**** 主机字节序 **** 就是我们平常说的大端和小端模式：不同的 CPU 有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的 Big- <code>Endian</code>  和 <code>Little-Endian</code>  的定义如下：</p>\n<p>a)  <code>Little-Endian</code>  就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</p>\n<p>b)  <code>Big-Endian</code>  就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p>\n<p><em><strong>* 网络字节序 *</strong></em>：4 个字节的 32 bit 值以下面的次序传输：首先是 <code>0～7bit</code> ，其次 <code>8～15bit</code> ，然后 <code>16～23bit</code> ，最后是 <code>24~31bit</code> 。这种传输次序称作大端字节序。** 由于 <code>TCP/IP</code>  首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。** 字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。</p>\n<p>所以：在将一个地址绑定到 socket 的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是 <code>Big-Endian</code>  由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给 socket。</p>\n</blockquote>\n<h2 id=\"33-listen-connect函数\"><a class=\"anchor\" href=\"#33-listen-connect函数\">#</a> 3.3、listen ()、connect () 函数</h2>\n<p>如果作为一个服务器，在调用 socket ()、bind () 之后就会调用 listen () 来监听这个 socket，如果客户端这时调用 connect () 发出连接请求，服务器端就会接收到这个请求。</p>\n<pre><code>int listen(int sockfd, int backlog);\nint connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n</code></pre>\n<p>listen 函数的第一个参数即为要监听的 socket 描述字，第二个参数为相应 socket 可以排队的最大连接个数。socket () 函数创建的 socket 默认是一个主动类型的，listen 函数将 socket 变为被动类型的，等待客户的连接请求。</p>\n<p>connect 函数的第一个参数即为客户端的 socket 描述字，第二参数为服务器的 socket 地址，第三个参数为 socket 地址的长度。客户端通过调用 connect 函数来建立与 TCP 服务器的连接。</p>\n<h2 id=\"34-accept函数\"><a class=\"anchor\" href=\"#34-accept函数\">#</a> 3.4、accept () 函数</h2>\n<p>TCP 服务器端依次调用 socket ()、bind ()、listen () 之后，就会监听指定的 socket 地址了。TCP 客户端依次调用 socket ()、connect () 之后就想 TCP 服务器发送了一个连接请求。TCP 服务器监听到这个请求之后，就会调用 accept () 函数取接收请求，这样连接就建立好了。之后就可以开始网络 I/O 操作了，即类同于普通文件的读写 I/O 操作。</p>\n<pre><code>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n</code></pre>\n<p>accept 函数的第一个参数为服务器的 socket 描述字，第二个参数为指向 struct sockaddr * 的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果 accpet 成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的 TCP 连接。</p>\n<p>注意：accept 的第一个参数为服务器的 socket 描述字，是服务器开始调用 socket () 函数生成的，称为监听 socket 描述字；而 accept 函数返回的是已连接的 socket 描述字。一个服务器通常通常仅仅只创建一个监听 socket 描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接 socket 描述字，当服务器完成了对某个客户的服务，相应的已连接 socket 描述字就被关闭。</p>\n<h2 id=\"35-read-write等函数\"><a class=\"anchor\" href=\"#35-read-write等函数\">#</a> 3.5、read ()、write () 等函数</h2>\n<p>万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络 I/O 进行读写操作了，即实现了网咯中不同进程之间的通信！网络 I/O 操作有下面几组：</p>\n<ul>\n<li>read()/write()</li>\n<li>recv()/send()</li>\n<li>readv()/writev()</li>\n<li>recvmsg()/sendmsg()</li>\n<li>recvfrom()/sendto()</li>\n</ul>\n<p>我推荐使用 recvmsg ()/sendmsg () 函数，这两个函数是最通用的 I/O 函数，实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：</p>\n<pre><code>       #include &lt;unistd.h&gt;\n\n       ssize_t read(int fd, void *buf, size_t count);\n       ssize_t write(int fd, const void *buf, size_t count);\n\n       #include &lt;sys/types.h&gt;\n       #include &lt;sys/socket.h&gt;\n\n       ssize_t send(int sockfd, const void *buf, size_t len, int flags);\n       ssize_t recv(int sockfd, void *buf, size_t len, int flags);\n\n       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,\n                      const struct sockaddr *dest_addr, socklen_t addrlen);\n       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,\n                        struct sockaddr *src_addr, socklen_t *addrlen);\n\n       ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);\n       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);\n</code></pre>\n<p>read 函数是负责从 <code>fd</code>  中读取内容。当读成功时，read 返回实际所读的字节数，如果返回的值是 0 表示已经读到文件的结束了，小于 0 表示出现了错误。如果错误为 <code>EINTR</code>  说明读是由中断引起的，如果是 <code>ECONNREST</code>  表示网络连接出了问题。</p>\n<p>write 函数将 <code>buf</code>  中的 <code>nbytes</code>  字节内容写入文件描述符 <code>fd</code> . 成功时返回写的字节数。失败时返回 - 1，并设置 <code>errno</code>  变量。 在网络程序中，当我们向套接字文件描述符写时有俩种可能。1) write 的返回值大于 0，表示写了部分或者是全部的数据。2) 返回的值小于 0，此时出现了错误。我们要根据错误类型来处理。如果错误为 <code>EINTR</code>  表示在写的时候出现了中断错误。如果为 <code>EPIPE</code>  表示网络连接出现了问题 (对方已经关闭了连接)。</p>\n<p>其它的我就不一一介绍这几对 I/O 函数了，具体参见 man 文档或者 baidu、Google，下面的例子中将使用到 send/recv。</p>\n<h2 id=\"36-close函数\"><a class=\"anchor\" href=\"#36-close函数\">#</a> 3.6、close () 函数</h2>\n<p>在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的 socket 描述字，好比操作完打开的文件要调用 fclose 关闭打开的文件。</p>\n<pre><code>#include &lt;unistd.h&gt;\nint close(int fd);\n</code></pre>\n<p>close 一个 TCP socket 的缺省行为时把该 socket 标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为 read 或 write 的第一个参数。</p>\n<p>注意：close 操作只是使相应 socket 描述字的引用计数 - 1，只有当引用计数为 0 的时候，才会触发 TCP 客户端向服务器发送终止连接请求。</p>\n<h1 id=\"4-socket中tcp的三次握手建立连接详解\"><a class=\"anchor\" href=\"#4-socket中tcp的三次握手建立连接详解\">#</a> 4、socket 中 TCP 的三次握手建立连接详解</h1>\n<p>我们知道 tcp 建立连接要进行 “三次握手”，即交换三个分组。大致流程如下：</p>\n<ul>\n<li>客户端向服务器发送一个 SYN J</li>\n<li>服务器向客户端响应一个 SYN K，并对 SYN J 进行确认 <code>ACK J+1</code></li>\n<li>客户端再想服务器发一个确认 <code>ACK K+1</code></li>\n</ul>\n<p>只有就完了三次握手，但是这个三次握手发生在 socket 的那几个函数中呢？请看下图：</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png\"><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157476286.png\" alt=\"image\" /></a></p>\n<p>图 1、socket 中发送的 TCP 三次握手</p>\n<p>从图中可以看出，当客户端调用 connect 时，触发了连接请求，向服务器发送了 SYN J 包，这时 connect 进入阻塞状态；服务器监听到连接请求，即收到 SYN J 包，调用 accept 函数接收请求向客户端发送 SYN K ， <code>ACK J+1</code> ，这时 accept 进入阻塞状态；客户端收到服务器的 SYN K ， <code>ACK J+1</code>  之后，这时 connect 返回，并对 SYN K 进行确认；服务器收到 <code>ACK K+1</code>  时，accept 返回，至此三次握手完毕，连接建立。</p>\n<blockquote>\n<p>总结：客户端的 connect 在三次握手的第二个次返回，而服务器端的 accept 在三次握手的第三次返回。</p>\n</blockquote>\n<h1 id=\"5-socket中tcp的四次握手释放连接详解\"><a class=\"anchor\" href=\"#5-socket中tcp的四次握手释放连接详解\">#</a> 5、socket 中 TCP 的四次握手释放连接详解</h1>\n<p>上面介绍了 socket 中 TCP 的三次握手建立过程，及其涉及的 socket 函数。现在我们介绍 socket 中的四次握手释放连接的过程，请看下图：</p>\n<p><a href=\"http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157487616.png\"><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/201012122157494693.png\" alt=\"image\" /></a></p>\n<p>图 2、socket 中发送的 TCP 四次握手</p>\n<p>图示过程如下：</p>\n<ul>\n<li>某个应用进程首先调用 close 主动关闭连接，这时 TCP 发送一个 FIN M；</li>\n<li>另一端接收到 FIN M 之后，执行被动关闭，对这个 FIN 进行确认。它的接收也作为文件结束符传递给应用进程，因为 FIN 的接收意味着应用进程在相应的连接上再也接收不到额外数据；</li>\n<li>一段时间之后，接收到文件结束符的应用进程调用 close 关闭它的 socket。这导致它的 TCP 也发送一个 FIN N；</li>\n<li>接收到这个 FIN 的源发送端 TCP 对它进行确认。</li>\n</ul>\n<p>这样每个方向上都有一个 <code>FIN</code>  和 <code>ACK</code> 。</p>\n<p>jio</p>\n",
            "tags": [
                "教程",
                "note",
                "note",
                "教程"
            ]
        },
        {
            "id": "https://wlp1231.cn/the-tutorial/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "url": "https://wlp1231.cn/the-tutorial/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/",
            "title": "博客搭建教程",
            "date_published": "2023-01-11T05:38:35.196Z",
            "content_html": "<h3 id=\"博客搭建\"><a class=\"anchor\" href=\"#博客搭建\">#</a> 博客搭建</h3>\n<h5 id=\"框架\"><a class=\"anchor\" href=\"#框架\">#</a> 框架：</h5>\n<p>Hexo 是高效的静态站点生成框架，它基于 Node.js。通过 Hexo，你可以直接使用 Markdown 语法来撰写博客。</p>\n<h4 id=\"环境安装\"><a class=\"anchor\" href=\"#环境安装\">#</a> 环境安装</h4>\n<h5 id=\"nodejs安装\"><a class=\"anchor\" href=\"#nodejs安装\">#</a> Node.js 安装</h5>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1cWl5dW4vcC84MTMzOTA0Lmh0bWw=\">参考文章</span></p>\n<h6 id=\"全局环境配置\"><a class=\"anchor\" href=\"#全局环境配置\">#</a> 全局环境配置</h6>\n<ol>\n<li>\n<p>安装的文件夹下创建两个文件夹【node_global】及【node_cache】</p>\n</li>\n<li>\n<p>管理员权限下打开终端执行</p>\n<p><code>npm config set prefix &quot;D:\\Nodejs\\node_global&quot;</code></p>\n<p><code>npm config set cache &quot;D:\\Nodejs\\node_cache&quot;</code></p>\n</li>\n<li>\n<p>在【系统变量】下新建【NODE_PATH】</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107142918673.png\" alt=\"image-20230107142918673\" /></p>\n<p>将【用户变量】下的【Path】修改为【D:\\Nodejs\\node_global】</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143013364.png\" alt=\"image-20230107143013364\" /></p>\n<p>在【系统变量】下的【Path】新建添加 node 全局文件夹【D:\\Nodejs\\node_global】</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143118535.png\" alt=\"image-20230107143118535\" /></p>\n</li>\n</ol>\n<h5 id=\"git安装\"><a class=\"anchor\" href=\"#git安装\">#</a> Git 安装</h5>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHVld2Vpc3VveW9uZy9wLzExOTE0MDQ1Lmh0bWw=\">参考文章</span></p>\n<h6 id=\"下载git-git-downloads-git-scmcom\"><a class=\"anchor\" href=\"#下载git-git-downloads-git-scmcom\">#</a> 下载 Git <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">Git - Downloads (git-scm.com)</span></h6>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143455455.png\" alt=\"image-20230107143455455\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143543775.png\" alt=\"image-20230107143543775\" /></p>\n<h6 id=\"安装git\"><a class=\"anchor\" href=\"#安装git\">#</a> 安装 Git</h6>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143703388.png\" alt=\"image-20230107143703388\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143734295.png\" alt=\"image-20230107143734295\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143855795.png\" alt=\"image-20230107143855795\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143911133.png\" alt=\"image-20230107143911133\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107143949585.png\" alt=\"image-20230107143949585\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144034041.png\" alt=\"image-20230107144034041\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144046740.png\" alt=\"image-20230107144046740\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144123237.png\" alt=\"image-20230107144123237\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144135211.png\" alt=\"image-20230107144135211\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144146185.png\" alt=\"image-20230107144146185\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144159086.png\" alt=\"image-20230107144159086\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144213513.png\" alt=\"image-20230107144213513\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144229929.png\" alt=\"image-20230107144229929\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144243337.png\" alt=\"image-20230107144243337\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230107144258178.png\" alt=\"image-20230107144258178\" /></p>\n<h5 id=\"vscode安装\"><a class=\"anchor\" href=\"#vscode安装\">#</a> Vscode 安装</h5>\n<p>开源、免费、轻量的代码编辑器，可以通过安装插件增强功能，几乎支持任何语言代码的编写。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">https://code.visualstudio.com/</span></p>\n<p>支持平台：Windows、macOS、Linux</p>\n<h5 id=\"typora安装\"><a class=\"anchor\" href=\"#typora安装\">#</a> Typora 安装</h5>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHlwb3JhLm5ldC8=\">https://www.typora.net/</span></p>\n<p>支持平台：Windows、macOS、Linux</p>\n<p>Mac 免费激活：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90LnpzeHEuY29tL0JxZllueUI=\">https://t.zsxq.com/BqfYnyB</span></p>\n<p>Win 免费激活：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90LnpzeHEuY29tLzA0YVl6anVyUg==\">https://t.zsxq.com/04aYzjurR</span></p>\n<p>Linux 免费激活：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90LnpzeHEuY29tLzA0YVl6anVyUg==\">https://t.zsxq.com/04aYzjurR</span></p>\n<p>Markdown 写作教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90LnpzeHEuY29tL1FKUUptZVU=\">https://t.zsxq.com/QJQJmeU</span></p>\n<p>主题包：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90LnpzeHEuY29tLzA0aXFOM2ppRQ==\">https://t.zsxq.com/04iqN3jiE</span></p>\n<h5 id=\"github加速器vpn\"><a class=\"anchor\" href=\"#github加速器vpn\">#</a> Github 加速器（VPN）</h5>\n<p>一元机场，低价</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tNGdxNjJmNTJnZHNzLmNvbS8jL3JlZ2lzdGVyP2NvZGU9dWpmYktOaGk=\">注册链接</span></p>\n<h5 id=\"github\"><a class=\"anchor\" href=\"#github\">#</a> Github</h5>\n<p>打开 https://github.com/ ，新建一个项目。输入自己的项目名字，后面一定要加 <code>.github.io</code>  后缀，README 初始化可选可不选，名称一定要和你的 github 名字完全一样，比如你 github 名字叫 <code>abc</code> ，那么仓库名字一定要是 <code>abc.github.io</code> 。最后选择 Create 创建，项目就建成功了</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/image-20230111125334123.png\" alt=\"image-20230111125334123\" /></p>\n<h4 id=\"hexo搭建与部署\"><a class=\"anchor\" href=\"#hexo搭建与部署\">#</a> Hexo 搭建与部署</h4>\n<h5 id=\"安装hexo\"><a class=\"anchor\" href=\"#安装hexo\">#</a> 安装 Hexo</h5>\n<ul>\n<li>\n<p>在你的电脑上任意位置，新建一个文件夹，用来存放自己的博客文件，比如 D:\\blog 目录下。</p>\n<ul>\n<li>这里最好按照一级目录创建文件夹，然后将项目放里面，如果是二级目录注意后面配置路由的格式即可</li>\n<li>还有目录路径最好全英文，不要出现特殊符号和中文</li>\n</ul>\n</li>\n<li>\n<p>在该目录下，鼠标右击，选择 <code>Git Bash Here</code> ，打开 git 的控制台窗口 或者 vscode ，输入命令进行安装并启动，后续 <code>hexo init</code>  需要执行生产 ssh keys 后执行</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm i hexo<span class=\"token operator\">-</span>cli <span class=\"token operator\">-</span>g</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo init</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm install</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo server</pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"生成ssh-keys\"><a class=\"anchor\" href=\"#生成ssh-keys\">#</a> 生成 ssh keys</h5>\n<ul>\n<li>\n<p>在任意文件夹位置，打开 cmd</p>\n</li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加 github 信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"yourname\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"youremail\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 查看信息是否正确</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>git config user<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>git config user<span class=\"token punctuation\">.</span>email</pre></td></tr></table></figure></li>\n<li>\n<p>生成 ssh keys：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh<span class=\"token operator\">-</span>keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span><span class=\"token class-name\">C</span> “你注册时的邮件地址user<span class=\"token punctuation\">.</span>email”</pre></td></tr></table></figure><p>总共需要敲四次回车。这个时候它会告诉你已经生成了.ssh 的文件夹。在你的电脑中找到这个文件夹。</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1663855670162.png\" alt=\"uTools_1663855670162\" /></p>\n</li>\n<li>\n<p>ssh，简单来讲，就是一个秘钥，其中， <code>id_rsa</code>  是你这台电脑的私人秘钥，不能给别人看的， <code>id_rsa.pub</code>  是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接 GitHub 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git 上传你的文件到 GitHub 上。而后在 GitHub 的 setting 中，找到 SSH keys 的设置选项，点击 <code>New SSH key</code> ， 把你的 <code>id_rsa.pub</code>  里面的信息复制进去。</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1663855830037.png\" alt=\"uTools_1663855830037\" /></p>\n</li>\n<li>\n<p>在 G it bash 中，查看是否成功</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh <span class=\"token operator\">-</span><span class=\"token class-name\">T</span> git<span class=\"token annotation punctuation\">@github.com</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"将hexo部署到github\"><a class=\"anchor\" href=\"#将hexo部署到github\">#</a> 将 hexo 部署到 Github</h5>\n<p>这一步，我们就可以将 hexo 和 GitHub 关联起来，也就是将 hexo 生成的文章部署到 GitHub 上，打开站点配置文件  <code>_config.yml</code> ，翻到最后，修改 <code>deploy</code>  部分代码。repo 部分为你 GitHub 仓库链接地址</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deploy<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  type<span class=\"token operator\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  repo<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token class-name\">YourgithubName</span><span class=\"token operator\">/</span><span class=\"token class-name\">YourgithubName</span><span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  branch<span class=\"token operator\">:</span> main</pre></td></tr></table></figure><p>这个时候需要先安装 deploy-git ，也就是部署的命令，这样你才能用命令部署到 GitHub。在博客文件下打开 cmd 或 gitbash</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install hexo<span class=\"token operator\">-</span>deployer<span class=\"token operator\">-</span>git <span class=\"token operator\">--</span>save</pre></td></tr></table></figure><p>生成界面</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo generate <span class=\"token comment\">// 可缩写为 hexo g</span></pre></td></tr></table></figure><p>上传文件到 GitHub</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo deploy <span class=\"token comment\">// 可缩写为 hexo d</span></pre></td></tr></table></figure><h4 id=\"博客文件夹\"><a class=\"anchor\" href=\"#博客文件夹\">#</a> 博客文件夹</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1663920168029.png\" alt=\"uTools_1663920168029\" /></p>\n<ul>\n<li><code>_config.yml</code> ：站点配置文件</li>\n<li><code>node_modules</code> : 存储 Hexo 插件的文件，可以实现各种扩展功能。</li>\n<li><code>package.json</code> ：</li>\n<li><code>scaffolds</code> ：模板文件夹，里面的 <code>post.md</code>  文件可以设置每一篇博客的模板。</li>\n<li><code>source</code> ：非常重要</li>\n<li><code>themes</code> ：主题文件夹，可以从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\"> Hexo 主题官网</span>下载各种各样的主题</li>\n</ul>\n<p>接下来重点介绍 <code>source</code>  文件夹。新建的博客中， <code>source</code>  文件夹下默认只有一个子文件夹 ——&gt; <code>_posts</code> 。我们写的博客都放在这个子文件夹里面。我们还可以在 <code>source</code>  里面新建各种子文件夹满足自己的个性化需求，对初学者而言，我们先把精力放在主线任务上，然后再来搞这些细节。</p>\n<h4 id=\"网页的简单美化hexo-shoka主题\"><a class=\"anchor\" href=\"#网页的简单美化hexo-shoka主题\">#</a> 网页的简单美化 ——Hexo-Shoka 主题</h4>\n<p>有关主题功能基本介绍的详情，请前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\">→優萌初華主页</span>查看</p>\n<h4 id=\"markdown文档相关注意事项自用\"><a class=\"anchor\" href=\"#markdown文档相关注意事项自用\">#</a> markdown 文档相关注意事项 —— 自用</h4>\n<ol>\n<li>\n<p>文章置顶</p>\n<p>在文章的 Front Matter 设置 sticky: true ，则该文章将显示在首页最上方的 置顶文章 列。 多篇文章按照发布时间倒序排列，不分页。</p>\n<hr />\n<p>title：置顶文章</p>\n<p>sticky：true</p>\n<hr />\n</li>\n<li>\n<p>精选分类</p>\n<ul>\n<li>\n<p>修改站点配置： 找到 category_map: ，配置每个分类对应的英文映射，比如：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">计算机科学</span><span class=\"token punctuation\">:</span> computer<span class=\"token punctuation\">-</span>science</pre></td></tr></table></figure></li>\n<li>\n<p>在 /source/_posts 文件夹相应的目录里，存放封面图</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"搜索功能\"><a class=\"anchor\" href=\"#搜索功能\">#</a> 搜索功能</h4>\n<ol>\n<li>\n<p>Algolia 官网完成注册，进入 welcome 页面→点击 API keys，在 All API Keys 页面处点击 New API key 并填写相关信息，新建好 API key 之后，在 hexo 根目录的 _config.yml 文件中配置 algolia 相关参数 (可在 Algolia 官网页面→API Keys 页面→(Your API Keys | All API Keys) 页面中查看)</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Application ID对应码\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"API Keys页面的All API Keys中刚刚新建的API key的对应码\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Admin API Key对应码\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你填写的Indices部分\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">-</span> title </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token punctuation\">-</span> path</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">-</span> categories</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span> strip<span class=\"token punctuation\">:</span>truncate<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token punctuation\">-</span> gallery</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token punctuation\">-</span> photos</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token punctuation\">-</span> tags</pre></td></tr></table></figure></li>\n<li>\n<p>配置好后，在 hexo 根目录右键点击 Git Bash Here ，输入 hexo clean &amp;&amp; hexo g &amp;&amp; hexo algolia 即可 注意 ，每当有新文章发布，都需输入 hexo g 与 hexo algolia 指令</p>\n</li>\n</ol>\n",
            "tags": [
                "教程",
                "hexo",
                "Hexo",
                "教程"
            ]
        },
        {
            "id": "https://wlp1231.cn/ROS/Ubuntu/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F/",
            "url": "https://wlp1231.cn/ROS/Ubuntu/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F/",
            "title": "机器人仿真",
            "date_published": "2023-01-11T05:38:35.189Z",
            "content_html": "<h1 id=\"机器人仿真\"><a class=\"anchor\" href=\"#机器人仿真\">#</a> 机器人仿真</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdXRvbGFib3IuY29tLmNuL2Jvb2svUk9TVHV0b3JpYWxzLw==\">课件</span></p>\n<h2 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h2>\n<ul>\n<li>能够使用 URDF 创建机器人模型，并在 Rviz (感知环境) 和 Gazebo (创建仿真环境) 分别显示</li>\n<li>能够使用 Gazebo 搭建仿真环境</li>\n<li>能够使用机器人模型中的传感器 (雷达、摄像头...) 获取仿真环境参数</li>\n</ul>\n<h2 id=\"工具介绍\"><a class=\"anchor\" href=\"#工具介绍\">#</a> 工具介绍</h2>\n<ul>\n<li>\n<p><strong>URDF</strong>：URDF 是 Unified Robot Description Format 的首字母缩写，直译为<strong>统一 (标准化) 机器人描述格式</strong>，可以以一种 XML 的方式描述机器人的部分结构，比如底盘、摄像头、激光雷达、机械臂以及不同关节的自由度....., 该文件可以被 C++ 内置的解释器转换成可视化的机器人模型，是 ROS 中实现机器人仿真的重要组件</p>\n</li>\n<li>\n<p><strong>Rviz</strong>:RViz 是 ROS Visualization Tool 的首字母缩写，直译为<strong> ROS 的三维可视化工具</strong>。它的主要目的是以三维方式显示 ROS 消息，可以将 数据进行可视化表达。例如：可以显示机器人模型，可以无需编程就能表达激光测距仪（LRF）传感器中的传感 器到障碍物的距离，RealSense、Kinect 或 Xtion 等三维距离传感器的点云数据（PCD， Point Cloud Data），从相机获取的图像值等</p>\n<p>以 “ros- [ROS_DISTRO] -desktop-full” 命令安装 ROS 时，RViz 会默认被安装。</p>\n<p>运行使用命令 <code>rviz</code>  或 <code>rosrun rviz rviz</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt install ros<span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>ROS_DISTRO<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>rviz</pre></td></tr></table></figure></li>\n<li>\n<p><strong>Gazebo</strong>：Gazebo 是一款 3D 动态模拟器，用于显示机器人模型并创建仿真环境，能够在复杂的室内和室外环境中准确有效地模拟机器人。与游戏引擎提供高保真度的视觉模拟类似，Gazebo 提供高保真度的物理模拟，其提供一整套传感器模型，以及对用户和程序非常友好的交互方式。</p>\n<p>以 “ros- [ROS_DISTRO] -desktop-full” 命令安装 ROS 时，gzebo 会默认被安装。</p>\n<p>运行使用命令 <code>gazebo</code>  或 <code>rosrun gazebo_ros gazebo</code></p>\n</li>\n</ul>\n<h2 id=\"urdf语法\"><a class=\"anchor\" href=\"#urdf语法\">#</a> URDF 语法</h2>\n<h3 id=\"robot\"><a class=\"anchor\" href=\"#robot\">#</a> robot</h3>\n<ul>\n<li>\n<p>robot:urdf 中为了保证 xml 语法的完整性，使用了 <code>robot</code>  标签作为根标签，所有的 link 和 joint 以及其他标签都必须包含在 robot 标签内，在该标签内可以通过 name 属性设置机器人模型的名称</p>\n</li>\n<li>\n<p>name: 指定机器人模型的名称</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>robot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mycar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ......</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ......</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>robot</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"link\"><a class=\"anchor\" href=\"#link\">#</a> link</h3>\n<ul>\n<li>\n<p>liink：urdf 中的 link 标签用于描述机器人某个部件 (也即刚体部分) 的外观和物理属性，比如：机器人底座、轮子、激光雷达、摄像头... 每一个部件都对应一个 link, 在 link 标签内，可以设计该部件的形状、尺寸、颜色、惯性矩阵、碰撞参数等一系列属性</p>\n</li>\n<li>\n<p>name ---&gt; 为连杆命名 (配对出现)</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base_link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>子标签</p>\n<ul>\n<li>visual ---&gt; 描述外观 (对应的数据是可视的)\n<ul>\n<li>geometry 设置连杆的形状\n<ul>\n<li>标签 1: box (盒状)\n<ul>\n<li>属性:size = 长 (x) 宽 (y) 高 (z)=abc</li>\n</ul>\n</li>\n<li>标签 2: cylinder (圆柱)\n<ul>\n<li>属性:radius = 半径， length = 高度</li>\n</ul>\n</li>\n<li>标签 3: sphere (球体)\n<ul>\n<li>属性:radius = 半径</li>\n</ul>\n</li>\n<li>标签 4: mesh (为连杆添加皮肤)\n<ul>\n<li>属性: filename = 资源路径 (格式:<strong>package://<packagename>/<path>/ 文件</strong>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>origin 设置偏移量与倾斜弧度\n<ul>\n<li>属性 1: xyz=x 偏移 y 偏移 z 偏移</li>\n<li>属性 2: rpy=x 翻滚 y 俯仰 z 偏航 (单位是弧度)</li>\n</ul>\n</li>\n<li>metrial 设置材料属性 (颜色)\n<ul>\n<li>属性: name</li>\n<li>标签: color\n<ul>\n<li>属性: rgba = 红绿蓝权重值与透明度 (每个权重值以及透明度取值 [0,1])</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>collision ---&gt; 连杆的碰撞属性</li>\n<li>Inertial ---&gt; 连杆的惯性矩阵</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"joint\"><a class=\"anchor\" href=\"#joint\">#</a> joint</h3>\n<ul>\n<li>\n<p>joint:urdf 中的 joint 标签用于描述机器人关节的运动学和动力学属性，还可以指定关节运动的安全极限，机器人的两个部件 (分别称之为 parent link 与 child link) 以 &quot;关节&quot; 的形式相连接，不同的关节有不同的运动形式：旋转、滑动、固定、旋转速度、旋转角度限制...., 比如：安装在底座上的轮子可以 360 度旋转，而摄像头则可能是完全固定在底座上。joint 标签对应的数据在模型中是不可见的</p>\n</li>\n<li>\n<p>name ---&gt; 为关节命名</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>joint</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1_joint<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>joint</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>type ---&gt; 关节运动形式</p>\n<ul>\n<li>continuous: 旋转关节，可以绕单轴无限旋转</li>\n<li>revolute: 旋转关节，类似于 continues, 但是有旋转角度限制</li>\n<li>prismatic: 滑动关节，沿某一轴线移动的关节，有位置极限</li>\n<li>planer: 平面关节，允许在平面正交方向上平移或旋转</li>\n<li>floating: 浮动关节，允许进行平移、旋转运动</li>\n<li>fixed: 固定关节，不允许运动的特殊关节</li>\n</ul>\n</li>\n<li>\n<p>子标签</p>\n<ul>\n<li>\n<p>parent (必需)</p>\n<p>parent link 的名字是一个强制的属性：</p>\n<ul>\n<li>link: 父级连杆的名字，是这个 link 在机器人结构树中的名字。</li>\n</ul>\n</li>\n<li>\n<p>child (必需)</p>\n<p>child link 的名字是一个强制的属性：</p>\n<ul>\n<li>link: 子级连杆的名字，是这个 link 在机器人结构树中的名字。</li>\n</ul>\n</li>\n<li>\n<p>origin</p>\n<ul>\n<li>属性: xyz = 各轴线上的偏移量 rpy = 各轴线上的偏移弧度。</li>\n</ul>\n</li>\n<li>\n<p>axis</p>\n<ul>\n<li>属性: xyz 用于设置围绕哪个关节轴运动。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"urdf与rviz初步配置\"><a class=\"anchor\" href=\"#urdf与rviz初步配置\">#</a> URDF 与 Rviz 初步配置</h2>\n<ul>\n<li>\n<p>安装功能包</p>\n<p><code>catkin_create_pkg urdf01_rviz urdf xacro</code></p>\n</li>\n<li>\n<p>在当前功能包新建目录</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz1.png\" alt=\"wode\" /></p>\n</li>\n<li>\n<p>在 urdf 子文件新建 01.urdf 文档并输入</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>robot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mycar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base_link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>visual</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>geometry</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>box</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.5 0.2 0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>geometry</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>visual</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>robot</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在 launch 目录下新建 01.launch 文档并输入</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>launch</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 设置参数 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>robot_description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">textfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(find 包名)/urdf/urdf/urdf01_HelloWorld.urdf<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 启动 rviz --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>node</span> <span class=\"token attr-name\">pkg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rviz<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rviz<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rviz<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>launch</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!-- 包名：urdf01_rviz --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!-- urdf01_HelloWorld:01 , 根据 1 自己的文档名 --></span>？</pre></td></tr></table></figure></li>\n<li>\n<p>运行 Rviz 后 add——robotmodel，axes</p>\n</li>\n<li>\n<p>将当前配置保存到 config 目录下，命名为 show_mycar.rviz，之后更改 launch 文档的内容</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>launch</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>robot_description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">textfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(find 包名)/urdf/urdf/01.urdf<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>node</span> <span class=\"token attr-name\">pkg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rviz<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rviz<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rviz<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">args</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-d $(find 包名)/config/rviz/show_mycar.rviz<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>launch</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>启动</p>\n<p><code>source ./devel/setup.bash</code></p>\n<p><code>roslaunch urdf01_rviz 01.launch</code></p>\n</li>\n</ul>\n<h2 id=\"xacro\"><a class=\"anchor\" href=\"#xacro\">#</a> xacro</h2>\n<p>在 urdf/xacro 目录下进行</p>\n<ul>\n<li>\n<p>编写 Xacro 文件，以变量的方式封装属性 (常量半径、高度、车轮半径...)，以函数的方式封装重复实现 (车轮的添加)</p>\n</li>\n<li>\n<p>命令行进入 xacro 文件 所属目录，执行: <code>rosrun xacro xacro xxx.xacro &gt; xxx.urdf</code> , 会将 xacro 文件解析为 urdf 文件</p>\n<p><code>rosrun xacro xacro 03_car_base.urdf.xacro &gt; 03_car_base.urdf</code></p>\n</li>\n<li>\n<p>检查代码是否正确</p>\n<p><code>check_urdf 文件名.urdf</code></p>\n</li>\n<li>\n<p>小车实现 (仅实现)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz2.png\" alt=\"wode\" /></p>\n</li>\n<li>\n<p>添加雷达和摄像头</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz3.png\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h2 id=\"urdf与gazebo学习\"><a class=\"anchor\" href=\"#urdf与gazebo学习\">#</a> URDF 与 Gazebo 学习</h2>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo2.png\" alt=\"wode\" /></p>\n<ul>\n<li>\n<p>创建功能包，添加依赖</p>\n<p><code>urdf xacro gazebo_ros gazebo_ros_control gazebo_plugins</code></p>\n</li>\n<li>\n<p>建立相关目录，如 rviz</p>\n</li>\n<li>\n<p>在 urdf 子文件新建 11.urdf 文档并输入</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    创建一个机器人模型 (盒状即可，box)，显示在 Gazebo 中 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>robot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mycar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base_link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 可视化部分 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>visual</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 几何标签 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>geometry</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>box</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.5 0.2 0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>geometry</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 使用默认值 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>origin</span> <span class=\"token attr-name\">xyz</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.0 0.0 0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rpy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.0 0.0 0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 颜色标签，子标签 color 中第四个为透明度，在 gazebo 中不再生效 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>material</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yellow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>color</span> <span class=\"token attr-name\">rgba</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.5 0.3 0.0 1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>material</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>visual</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 设置碰撞参数，如果是标准几何体，代码同上 --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collision</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>geometry</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>box</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.5 0.2 0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>geometry</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>origin</span> <span class=\"token attr-name\">xyz</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.0 0.0 0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rpy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.0 0.0 0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collision</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 设置惯性矩阵 --></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>inertial</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>origin</span> <span class=\"token attr-name\">xyz</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  <span class=\"token comment\">&lt;!-- 重心的偏移 --></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mass</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>   <span class=\"token comment\">&lt;!-- 质量 --></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>inertia</span> <span class=\"token attr-name\">ixx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ixy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ixz</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">iyy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">iyz</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">izz</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  <span class=\"token comment\">&lt;!-- 不同空间维度的惯性参数 --></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>inertial</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">&lt;!-- gazebo 自己的颜色设置，大写 --></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gazebo</span> <span class=\"token attr-name\">reference</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base_link<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 应用与哪部分连杆 --></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>material</span><span class=\"token punctuation\">></span></span>Gazebo/Black<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>material</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gazebo</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>robot</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在 launch 目录下新建 11.launch 文档并输入</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>launch</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 将 Urdf 文件的内容加载到参数服务器 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>robot_description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">textfile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(find urdf11_gazebo)/urdf/11.urdf<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 启动 gazebo，不做任何修改 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span> <span class=\"token attr-name\">file</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(find gazebo_ros)/launch/empty_world.launch<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 在 gazebo 中显示机器人模型，下面命令行的固定 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>node</span> <span class=\"token attr-name\">pkg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gazebo_ros<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>spawn_model<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>model<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">args</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-urdf -model mycar -param robot_description<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>launch</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>运行命令</p>\n<p><code>rosrun gazebo_ros spawn_model -urdf -model car -param robot_description</code></p>\n<p><code>roslaunch urdf11_gazebo 11.launch</code></p>\n</li>\n</ul>\n<h2 id=\"构造机器人模型仅在电脑上实现运行\"><a class=\"anchor\" href=\"#构造机器人模型仅在电脑上实现运行\">#</a> 构造机器人模型 (仅在电脑上实现运行)</h2>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo3.png\" alt=\"wode\" /></p>\n<p>launch 文件夹内容</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%96%87%E4%BB%B62.png\" alt=\"wode\" /></p>\n<p>urdf 文件夹内容</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%96%87%E4%BB%B61.png\" alt=\"wide\" /></p>\n<h2 id=\"机器人运动控制\"><a class=\"anchor\" href=\"#机器人运动控制\">#</a> 机器人运动控制</h2>\n<h3 id=\"arbotix\"><a class=\"anchor\" href=\"#arbotix\">#</a> Arbotix</h3>\n<p>Arbotix 是一款控制电机、舵机的控制板，<strong>并提供相应的 ros 功能包</strong>，这个功能包的功能不仅可以驱动真实的 Arbotix 控制板，它还提供一个差速控制器，通过接受速度控制指令更新机器人的 joint 状态，从而帮助我们实现机器人在 rviz 中的运动。这个差速控制器在 arbotix_python 程序包中，完整的 arbotix 程序包还包括多种控制器，分别对应 dynamixel 电机、多关节机械臂以及不同形状的夹持器。</p>\n<h4 id=\"实现流程\"><a class=\"anchor\" href=\"#实现流程\">#</a> 实现流程</h4>\n<ol>\n<li>\n<p>安装 Arbotix   noetic (rviz)</p>\n<p><code>git clone https://github.com/vanadiumlabs/arbotix_ros.git</code></p>\n</li>\n<li>\n<p>创建新功能包，准备机器人 urdf、xacro 文件</p>\n</li>\n<li>\n<p>添加 Arbotix 配置文件 control.yaml</p>\n</li>\n<li>\n<p>编写 launch 文件配置 Arbotix</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>node</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arbotix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pkg</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arbotix_python<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arbotix_driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">output</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screen<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rosparam</span> <span class=\"token attr-name\">file</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(find my_urdf05_rviz)/config/hello.yaml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">command</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>load<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sim<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>node</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>启动 launch 文件并控制机器人模型运动</p>\n</li>\n</ol>\n<p>​    <img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/rviz4.png\" alt=\"wode\" /></p>\n<h3 id=\"gazebo下流程\"><a class=\"anchor\" href=\"#gazebo下流程\">#</a> gazebo 下流程</h3>\n<ol>\n<li>\n<p>已经创建完毕的机器人模型，编写一个单独的 xacro 文件，为机器人模型添加传动装置以及控制器</p>\n<p>下 urdf 目录下新建 gazebo 目录，新建 move.xacro 文档，输入代码</p>\n</li>\n<li>\n<p>将此文件集成进 xacro 文件</p>\n<p>在集合总代码中加入 move.xacro 的路径</p>\n</li>\n<li>\n<p>启动 Gazebo 并发布 /cmd_vel 消息控制机器人运动</p>\n</li>\n</ol>\n<p>安装 Generic keyboard teleop for twist robots.</p>\n<p><code>sudo apt-get install ros-noetic-teleop-twist-keyboard</code></p>\n<p>键盘控制</p>\n<p><code>rosrun teleop_twist_keyboard teleop_twist_keyboard.py </code></p>\n<p><code>rosrun teleop_twist_keyboard teleop_twist_keyboard.py  _speed:=0.3 _turn:=0.5</code>  更改速度</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo5.png\" alt=\"wode\" /></p>\n<p>话题控制</p>\n<p><code>rostopic pub -r 10 /cmd_vel geometry_msgs/Twist &quot;linear</code></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/gazebo4.png\" alt=\"wode\" /></p>\n<h2 id=\"a1激光雷达\"><a class=\"anchor\" href=\"#a1激光雷达\">#</a> a1 激光雷达</h2>\n<ol>\n<li>\n<p>下载功能包的方法：在你的终端中输入如下命令<br />\n <code>cd ~/catkin_ws/src</code>   //catkin_ws 为你的工作空间名称<br />\n <code>git clone  https://github.com/Slamtec/rplidar_ros.git</code> <br />\n <code>cd ..</code> /  // 返回上层空间<br />\n <code>catkin_make</code>    // 编译工作空间，或直接访问 github 下载 rplidar_ros 文件后放到 src 文件夹下</p>\n</li>\n<li>\n<p>usb 外接雷达</p>\n</li>\n<li>\n<p><code>ls -l /dev/ttyUSB*    </code>    查看雷达信息</p>\n</li>\n<li>\n<p><code>sudo chmod 666 /dev/ttyUSB0</code>        赋予权限</p>\n</li>\n<li>\n<p><code>roslaunch rplidar_ros view_rplidar.launch</code>      进入 rviz</p>\n</li>\n</ol>\n<h5 id=\"chmod\"><a class=\"anchor\" href=\"#chmod\">#</a> chmod：</h5>\n<p>若用 chmod 4755 filename 可使此程序具有 root 的权限</p>\n<p>sudo chmod 600 ××× （只有所有者有读和写的权限）</p>\n<p>sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）</p>\n<p>sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）</p>\n<p>sudo chmod 666 ××× （每个人都有读和写的权限）</p>\n<p>sudo chmod 777 ××× （每个人都有读和写以及执行的权限）</p>\n<p>安装 ros_arduino_bridge 功能包</p>\n<p>访问<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hicm9ib3RpY3Mvcm9zX2FyZHVpbm9fYnJpZGdl\"> hbrobotics/ros_arduino_bridge: ROS + Arduino = Robot (github.com)</span> 下载相关文件</p>\n<p>编译</p>\n<p>安装 tianbot 的 github 中的 lubot_slam 功能包</p>\n<p>访问<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RpYW5ib3QvbHVib3Rfc2xhbQ==\"> tianbot/lubot_slam: 使用 Arduino 作为 BaseController 配合 ROS 机器人操作系统，构建具备 SLAM 能力的 luBot 自主导航机器人，也许还有点弱智能（机器视觉与深度学习）。 (github.com)</span></p>\n<p>编译</p>\n<p>安装</p>\n<p>gamapping 功能包<br />\n navigation 功能包</p>\n<p><code>cd ~/catkin_ws/src</code> <br />\n <code>git clone https://github.com/ros-planning/navigation.git</code> <br />\n <code>git clone https://github.com/ros-perception/openslam_gmapping.git </code> <br />\n <code>git clone https://github.com/ros-perception/slam_gmapping.git</code> <br />\n <code>git init</code> <br />\n <code>git checkout -b kinetic-devel</code></p>\n<p>若克隆连接失败，将 https 改为 git</p>\n<p><code>sudo apt-get install libbullet-dev</code> <br />\n <code>sudo apt-get install libsdl1.2-dev</code> <br />\n <code>sudo apt-get install libsdl-image1.2-dev</code> <br />\n <code>sudo apt-get install ros-kinetic-geometry2</code> <br />\n <code>sudo apt-get install ros-kinetic-nav-msgs</code></p>\n<p>若报错：E：定位软件包失败</p>\n<p>如 geometry2</p>\n<p>在 github 中搜索找到 geometry2</p>\n<p>复制对应网址<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Jvcy9nZW9tZXRyeTI=\"> ros/geometry2: A set of ROS packages for keeping track of coordinate transforms. (github.com)</span></p>\n<p>打开终端，进入要放置的位置，输入 <code>git clone git://github.com/ros/geometry2.git</code></p>\n<p>继续上述操作</p>\n<p>编译 <code>catkin_make</code></p>\n<h4 id=\"nfs详解\"><a class=\"anchor\" href=\"#nfs详解\">#</a> NFS 详解</h4>\n<h3 id=\"ssh通信\"><a class=\"anchor\" href=\"#ssh通信\">#</a> ssh 通信</h3>\n<h4 id=\"连接准备\"><a class=\"anchor\" href=\"#连接准备\">#</a> 连接准备</h4>\n<ul>\n<li><code>ifconfig</code>  查看 ip 地址，如 192.168.43.128</li>\n<li>用于连接的两台电脑处于同一局域网内，手机热点</li>\n<li>查看主机名，终端输入 <code>hostname</code></li>\n<li>终端输入 <code>sudo gedit /etc/hosts</code> , 在文件中第三行输入本机 ip 地址和主机名，第四行输入待连机 ip 地址和主机名（忽略）</li>\n<li><code>sudo /ect/init.d/networking restart</code> , 若报错，在 /etc/init.d 中找到 network 文件，将之替换 networking。仍然报错，将 /etc/init.d 改为 service，还报错，hosts 中 ip 地址写错，检查</li>\n</ul>\n<h4 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h4>\n<ul>\n<li>\n<p>安装 chrony 包和 ssh 服务器</p>\n<p><code>sudo apt-get install chrony</code>   <code>sudo apt-get install openssh-server</code></p>\n</li>\n<li>\n<p><code>ping 待连机ip地址或主机名</code> ，建议 ip 地址</p>\n</li>\n<li>\n<p><code>ssh 待连机用户名@待连机主机名或ip地址</code></p>\n</li>\n<li>\n<p>连接成功</p>\n</li>\n</ul>\n<h4 id=\"删除冲突ip\"><a class=\"anchor\" href=\"#删除冲突ip\">#</a> 删除冲突 IP</h4>\n<p><code>ssh-keygen -f &quot;/home/wlp/.ssh/known_hosts&quot; -R &quot;joul&quot;</code></p>\n<p>查看系统是否已经安装 ssh 客户端或者服务端：dpkg -l | grep ssh。<br />\n启动 ssh 服务：sudo /etc/init.d/ssh start<br />\n 关闭 ssh 服务：sudo /etc/init.d/ssh stop<br />\n 重启 ssh 服务：sudo /etc/init.d/ssh restart</p>\n<h2 id=\"连接控制mini小车1804密码raspberry使用wheeltec系列小车\"><a class=\"anchor\" href=\"#连接控制mini小车1804密码raspberry使用wheeltec系列小车\">#</a> 连接控制 mini 小车（18.04 密码：raspberry，使用 wheeltec 系列小车）</h2>\n<ul>\n<li>\n<p>打开终端，通过 ssh 连接到小车上的树莓派，192.168.0.100</p>\n<p><code>ssh -Y wheeltec@192.168.0.100</code></p>\n<p>密码：dongguan</p>\n<p>注：没有 - Y，图形化等功能无法使用</p>\n</li>\n<li>\n<p>远程登录后： <code>roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch</code></p>\n</li>\n<li>\n<p>远程登录后： <code>roslaunch wheeltec_robot_rc keyboard_teleop.launch</code></p>\n</li>\n</ul>\n<p>通过上述操作可以键盘控制小车移动</p>\n<h3 id=\"启动雷达\"><a class=\"anchor\" href=\"#启动雷达\">#</a> 启动雷达</h3>\n<ul>\n<li>\n<p><code>roslaunch rplidar_ros rplidar.launch</code></p>\n</li>\n<li>\n<p>查看雷达发布的话题</p>\n<p><code>rostopic list</code></p>\n</li>\n<li>\n<p>查看数据类型</p>\n<p><code>rosmsg show sensor_msgs/LaserScan </code></p>\n</li>\n</ul>\n<h2 id=\"控制小车雷达建图\"><a class=\"anchor\" href=\"#控制小车雷达建图\">#</a> 控制小车雷达建图</h2>\n<ul>\n<li>\n<p>终端 ssh 连接</p>\n</li>\n<li>\n<p>终端输入 <code>roslaunch turn_on_wheeltec_robot mapping.launch </code></p>\n</li>\n<li>\n<p>新终端输入 <code>rviz</code> , 使用远程终端较卡，使用本机终端</p>\n<p>.bushrc 文件加入</p>\n<p>export ROS_MASTER_URI=http://192.168.0.100:11311<br />\nexport ROS_HOSTNAME=192.168.0.136</p>\n</li>\n<li>\n<p>控制小车走完全场，完成建图</p>\n</li>\n<li>\n<p>保存图形:</p>\n<p>一键保存： <code>roslaunch turn_on_wheeltec_robot map_saver.launch</code></p>\n<p>打开地图路径： <code>cd /home/wheeltec/wheeltec_robot/src/turn_on_wheeltec_robot/map</code></p>\n<p>保存地图： <code>rosrun map_server map_saver -f 地图名</code></p>\n</li>\n<li>\n<p>查看图形：将远程文件挂载到本机 <code>sudo mount -t nfs 192.168.0.100:/home/wheeltec/wheeltec_robot /mnt</code></p>\n<p>打开 mnt 文件查看，保存路径在保存图形时终端有显示</p>\n</li>\n<li>\n<p>建图<br />\n mapping.launch<br />\n 小车初始化节点：turn_on_wheeltec_robot.launch<br />\n 雷达节点：rplidar.launch<br />\ngmapping 建图节点：algorithm_gmapping.launch</p>\n</li>\n</ul>\n<h4 id=\"建图算法切换\"><a class=\"anchor\" href=\"#建图算法切换\">#</a> 建图算法切换</h4>\n<ol>\n<li>修改 mapping.launch 文件开头 <code>&lt;arg name=&quot;mapping_node&quot; default=&quot;gmapping&quot; doc=&quot;opt:gmapping,hector,cartographer,karto&quot;/&gt;</code></li>\n</ol>\n<h4 id=\"雷达跟随\"><a class=\"anchor\" href=\"#雷达跟随\">#</a> 雷达跟随</h4>\n<p><code>roslaunch simple_follower laser_follower.launch</code></p>\n<h2 id=\"sublimetext\"><a class=\"anchor\" href=\"#sublimetext\">#</a> SublimeText</h2>\n<ul>\n<li>\n<p>小车开机，连接 WIFI，密码：dongguan。</p>\n</li>\n<li>\n<p>NFS 挂载 (passoni 密码：raspberry)： <code> </code></p>\n</li>\n<li>\n<p>ssh 登录到服务端，并修改服务端系统时间为现在： <code>sudo date -s &quot;2021-7-7 00:00:00&quot; </code> 精确到分即可</p>\n<p>这一步是因为树莓派 / Nano/TX2/NX/ 工控机的系统时间在没有连接互联网 时，系统时间可能会混乱。同时我们程序修改是需要编译后才能生效的，而编译 规则是只编译最新时间的修改，同时修改时间在未来即大于当前系统时间的不编译。</p>\n<p>上一次修改时间 &gt; 此次修改时间：不编译</p>\n<p>此次修改时间 &gt; 当前系统时间：不编译</p>\n</li>\n<li>\n<p>指定编译编译单个功能包：</p>\n<p>catkin_make -DCATKIN_WHITELIST_PACKAGES=&quot;功能包名&quot;</p>\n<p>解除指定功能包编译：</p>\n<p>catkin_make -DCATKIN_WHITELIST_PACKAGES=&quot;&quot;</p>\n</li>\n</ul>\n<h2 id=\"源\"><a class=\"anchor\" href=\"#源\">#</a> 源</h2>\n<p>export ROS_MASTER_URI=http://192.168.0.100:11311<br />\nexport ROS_HOSTNAME=192.168.0.136</p>\n<h3 id=\"自主导航\"><a class=\"anchor\" href=\"#自主导航\">#</a> 自主导航</h3>\n<ul>\n<li>\n<p>运行导航节点</p>\n<p><code>roslaunch turn_on_wheeltec_robot navigation.launch</code></p>\n</li>\n<li>\n<p>启动 rviz</p>\n</li>\n<li>\n<p>查看里程计传感器（odom）</p>\n<p><code>rostopic echo /odom </code></p>\n</li>\n</ul>\n<h3 id=\"摄像头\"><a class=\"anchor\" href=\"#摄像头\">#</a> 摄像头</h3>\n<ol>\n<li>\n<p>实现功能</p>\n<ul>\n<li>\n<p>视觉巡线</p>\n</li>\n<li>\n<p>物体识别</p>\n</li>\n<li>\n<p>3D 建图</p>\n</li>\n<li>\n<p>颜色跟踪</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>lsusb</code>  查看摄像头</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1.png\" alt=\"wodde\" /></p>\n<p>0502：rgb 摄像头</p>\n<p>0403：深度摄像头</p>\n</li>\n<li>\n<p>开启摄像头</p>\n<p>rgb 摄像头： <code>roslaunch usb_cam usb_cam-test.launch </code></p>\n<p>深度摄像头： <code>roslaunch astra_camera astra.launch</code></p>\n<p>都打开： <code>roslaunch astra_camera astrapro.launch</code></p>\n</li>\n</ol>\n<h4 id=\"色块跟踪\"><a class=\"anchor\" href=\"#色块跟踪\">#</a> 色块跟踪</h4>\n<ol>\n<li>\n<p>根据要跟踪色块颜色，在 visualTracker.launch 更改，shv 格式</p>\n</li>\n<li>\n<p>运行 <code>roalaunch simple_follower visual_follower.launch</code></p>\n</li>\n<li>\n<p>远程登陆查看话题 <code>rostpic list</code></p>\n<p><code>rostopic echo /.......</code></p>\n</li>\n</ol>\n<h4 id=\"视觉巡线\"><a class=\"anchor\" href=\"#视觉巡线\">#</a> 视觉巡线</h4>\n<p><code>roslaunch simple_follower line_follower.launch</code></p>\n<h3 id=\"3d建图导航\"><a class=\"anchor\" href=\"#3d建图导航\">#</a> 3D 建图导航</h3>\n<ol>\n<li>\n<p>安装 rtabmap</p>\n<p><code>sudo apt-get update </code> (更新软件列表)<br />\n <code>sudo apt-get install ros-noetic-rtabmap-ros</code> （安装 rtabmap）</p>\n</li>\n<li>\n<p>跑官方测试包（可选，远程端）</p>\n<p><code>roslaunch rtabmap_ros demo_robot_mapping.launch rviz:=true rtabmapviz:=false</code>  （官方测试例程）</p>\n<p><code>rosbag play --clock demo_mapping.bag </code> （官方测试包，在 /home/wheeltec/ 的路径下执行）</p>\n</li>\n<li>\n<p>建图<br />\n <code>roslaunch turn_on_wheeltec_robot 3d_mapping.launch</code> （启动 3d 建图）<br />\n <code>roslaunch wheeltec_robot_rc keyboard_teleop.launch</code>   （启动键盘控制节点）</p>\n</li>\n<li>\n<p>导航<br />\n <code>roslaunch  turn_on_wheeltec_robot 3d_navigation.launch</code> （启动 3d 导航）</p>\n</li>\n</ol>\n<h3 id=\"纯视觉见图导航\"><a class=\"anchor\" href=\"#纯视觉见图导航\">#</a> 纯视觉见图导航</h3>\n<p>建图：</p>\n<p><code>roslaunch  turn_on_wheeltec_robot pure3d_mapping.launch</code></p>\n<p>导航：</p>\n<p><code>roslaunch  turn_on_wheeltec_robot pure3d_navigation.launch</code></p>\n<h3 id=\"kcf跟踪\"><a class=\"anchor\" href=\"#kcf跟踪\">#</a> KCF 跟踪</h3>\n<p><code>roslaunch kcf_tracker.launch</code></p>\n<h3 id=\"自主建图\"><a class=\"anchor\" href=\"#自主建图\">#</a> 自主建图</h3>\n<p><code>roslaunch turn_on_wheeltec_robot rrt_slam.launch</code></p>\n<h2 id=\"tf坐标\"><a class=\"anchor\" href=\"#tf坐标\">#</a> TF 坐标</h2>\n<h3 id=\"ros坐标管理系统\"><a class=\"anchor\" href=\"#ros坐标管理系统\">#</a> ros 坐标管理系统</h3>\n<h3 id=\"tf坐标的基本概念\"><a class=\"anchor\" href=\"#tf坐标的基本概念\">#</a> TF 坐标的基本概念</h3>\n<ul>\n<li>\n<p>TF 树：rqt 可视化工具插件，查看所有 tf 坐标之间的链接关系</p>\n<p>安装 rqt：</p>\n<ul>\n<li><code>sudo apt-get install ros-%YOUR_ROS_DISTRO%-rqt ros-%YOUR_ROS_DISTRO%-rqt-common-plugins</code></li>\n<li><code>sudo apt-get install ros-%YOUR_ROS_DISTRO%-rqt-robot-plugins</code></li>\n<li><code>sudo apt-get install ros-%YOUR_ROS_DISTRO%-rqt-pr2-dashboard (only when you need PR2 dashboard feature) </code></li>\n<li><code>sudo apt-get update</code></li>\n<li><code>sudo apt-get dist-upgrade</code></li>\n</ul>\n</li>\n<li>\n<p>TF 的 brosdcsster：两个坐标的索引关系</p>\n</li>\n<li>\n<p>TF 的 frame_id</p>\n</li>\n<li>\n<p>TF 的基坐标：如 map</p>\n</li>\n<li>\n<p>TF 的消息数据类型</p>\n</li>\n</ul>\n<h3 id=\"ar标签识别\"><a class=\"anchor\" href=\"#ar标签识别\">#</a> AR 标签识别</h3>\n<p><code>roslaunch turn_on_wheeltec_robot ar_label.launch</code></p>\n<p>生成 ar 标签</p>\n<ul>\n<li>相应功能包下 <code>rosrun ar_track_alvar createMarker -s 5 0</code></li>\n</ul>\n",
            "tags": [
                "ROS",
                "Ubuntu",
                "ROS",
                "Ubuntu"
            ]
        },
        {
            "id": "https://wlp1231.cn/ROS/Ubuntu/%E6%96%B0%E5%BB%BAUbuntu%E8%AF%A6%E8%A7%A3/",
            "url": "https://wlp1231.cn/ROS/Ubuntu/%E6%96%B0%E5%BB%BAUbuntu%E8%AF%A6%E8%A7%A3/",
            "title": "Ubuntu安装教程",
            "date_published": "2023-01-11T05:38:35.188Z",
            "content_html": "<h3 id=\"ubuntu安装教程\"><a class=\"anchor\" href=\"#ubuntu安装教程\">#</a> Ubuntu 安装教程</h3>\n<h4 id=\"安装vmware\"><a class=\"anchor\" href=\"#安装vmware\">#</a> 安装 VMware</h4>\n<h4 id=\"安装ubuntu1804\"><a class=\"anchor\" href=\"#安装ubuntu1804\">#</a> 安装 Ubuntu18.04</h4>\n<h5 id=\"更新源\"><a class=\"anchor\" href=\"#更新源\">#</a> 更新源</h5>\n<p>在设置找到软件与更新，全选，点击下载自，选择中国，选择清华源</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%BA%901.png\" alt=\"\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E6%BA%902.png\" alt=\"\" /></p>\n<p><code>ctrl+alt+t</code>  打开终端，输入 <code>sudo apt-get updata</code>  更新源</p>\n<h5 id=\"设置中文及输入法\"><a class=\"anchor\" href=\"#设置中文及输入法\">#</a> 设置中文及输入法</h5>\n<p>在终端中直接输入命令 ibus 会出现下图所示界面，说明 Jetson Nano 已经自带了 ibus 输入法环境了。</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%871.png\" alt=\"\" /></p>\n<p>下面为 ibus 下载拼音输入法，输入命令：</p>\n<p><code>sudo apt-get install ibus-pinyin</code></p>\n<p>安装完成后进入系统配置 System Settings 界面，选择语言支持选项 Language Support ，如下图所示:</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%872.png\" alt=\"\" /></p>\n<p>然后选择 “添加或删除语言” 界面，会系统选择语言支持，如下图所示：</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%873.png\" alt=\"\" /></p>\n<pre><code>  此处选择“中文简体”然后单击Apply即可。这个Apply过程会安装一系列中文语言包，如下图所示：\n</code></pre>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%874.png\" alt=\"\" /></p>\n<p>安装完成后在语言支持界面将汉语调整到最前面，如下图所示：选中汉语向上拖</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%875.png\" alt=\"\" /></p>\n<p>然后单击 “应用到整个系统”。最后将 “键盘输入法系统” 改为 iBus 即可。</p>\n<p>重新启动系统（很重要！！！），然后在终端中输入下述命令进入 ibus 配置界面：</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%876.png\" alt=\"\" /></p>\n<p><code>ibus-setup</code> <br />\n 在配置界面中单击 “添加” 按钮，然后展开 “汉语” 选项，选择 Intelligent Pinyin。这里如果找不到 “汉语” 选项则可以先关机重启，再重新查找。</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%877.png\" alt=\"\" /></p>\n<p>添加完成后输入下面的命令重启 ibus 即可。</p>\n<p><code>ibus restart</code> <br />\n 最后，将桌面顶任务栏中将输入法切成拼音输入法 Pi，如下图所示：</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%879.png\" alt=\"\" /></p>\n<p>此时就可以使用中文输入了。</p>\n<p>如果没有图标，在设置里更改</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/%E4%B8%AD%E6%96%878.png\" alt=\"\" /></p>\n<h5 id=\"安装可切割终端\"><a class=\"anchor\" href=\"#安装可切割终端\">#</a> 安装可切割终端</h5>\n<p><code>sudo apt install terminator</code></p>\n<h5 id=\"安装python\"><a class=\"anchor\" href=\"#安装python\">#</a> 安装 python</h5>\n<h6 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h6>\n<ol>\n<li>\n<p>下载想要的 Python 版本，本次安装的版本为 Python-3.10.3，下载网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvc291cmNlLw==\">https://www.python.org/downloads/source/</span></p>\n</li>\n<li>\n<p>解压，放在指定的目录当中，本次的安装目录为  <code>/usr/local/python</code> , 将 <code>Python-3.10.3</code>  放在上述的目录当中，可以用 cp 命令复制 <code>Python-3.10.3</code>  到该文件夹中 <code>sudo cp -r Python-3.10.3 /usr/local/python</code></p>\n</li>\n<li>\n<p>进入目录 <code>cd /usr/local/python</code> , 运行 configure 文件 <code> sudo ./configure</code></p>\n<p>出现报错</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>checking build system type<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> x86_64<span class=\"token operator\">-</span>pc<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>checking host system type<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> x86_64<span class=\"token operator\">-</span>pc<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>checking <span class=\"token keyword\">for</span> python3<span class=\"token punctuation\">.</span><span class=\"token number\">10.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> no</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>checking <span class=\"token keyword\">for</span> python3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> python3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>checking <span class=\"token keyword\">for</span> <span class=\"token operator\">--</span>enable<span class=\"token operator\">-</span>universalsdk<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> no</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>checking <span class=\"token keyword\">for</span> <span class=\"token operator\">--</span>with<span class=\"token operator\">-</span>universal<span class=\"token operator\">-</span>archs<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> no</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>checking MACHDEP<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"linux\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>checking <span class=\"token keyword\">for</span> gcc<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> no</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>checking <span class=\"token keyword\">for</span> cc<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> no</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>checking <span class=\"token keyword\">for</span> cl<span class=\"token punctuation\">.</span>exe<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> no</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>configure<span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> in `<span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>python'<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>configure<span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> no acceptable C compiler found in $PATH</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>See `config<span class=\"token punctuation\">.</span>log' <span class=\"token keyword\">for</span> more details</pre></td></tr></table></figure><p>解决方法为安装 gcc</p>\n<p><code>sudo apt-get update</code></p>\n<p><code>sudo apt-get install gcc</code></p>\n</li>\n<li>\n<p>安装我们想要的 Python 版本</p>\n<p>运行 configure 文件 <code>sudo ./configure</code></p>\n</li>\n<li>\n<p>运行下面的命令安装</p>\n<p><code>sudo make</code></p>\n<p>若出现报错： <code>sudo: make：找不到命令</code></p>\n<p>执行： <code>sudo apt-get install make</code> , 再重复 <code>sudo make</code></p>\n<p>再执行 <code>sudo make install</code></p>\n<p>若出现 <code>ModuleNotFoundError: No module named ‘_ctypes</code>  的错误，用下面的方法解决：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo apt<span class=\"token operator\">-</span>get update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sudo apt<span class=\"token operator\">-</span>get upgrade</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sudo apt<span class=\"token operator\">-</span>get dist<span class=\"token operator\">-</span>upgrade</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sudo apt<span class=\"token operator\">-</span>get install build<span class=\"token operator\">-</span>essential python<span class=\"token operator\">-</span>dev python<span class=\"token operator\">-</span>setuptools python<span class=\"token operator\">-</span>pip python<span class=\"token operator\">-</span>smbus build<span class=\"token operator\">-</span>essential libncursesw5<span class=\"token operator\">-</span>dev libgdbm<span class=\"token operator\">-</span>dev libc6<span class=\"token operator\">-</span>dev zlib1g<span class=\"token operator\">-</span>dev libsqlite3<span class=\"token operator\">-</span>dev tk<span class=\"token operator\">-</span>dev libssl<span class=\"token operator\">-</span>dev openssl libffi<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><p>再执行 <code>sudo make install</code></p>\n<p>若出现报错</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>python<span class=\"token operator\">/</span>Modules<span class=\"token operator\">/</span>_cursesmodule<span class=\"token punctuation\">.</span>c<span class=\"token operator\">:</span> In function ‘_curses_setupterm_impl’<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>python<span class=\"token operator\">/</span>Modules<span class=\"token operator\">/</span>_cursesmodule<span class=\"token punctuation\">.</span>c<span class=\"token operator\">:</span><span class=\"token number\">3392</span><span class=\"token operator\">:</span><span class=\"token number\">35</span><span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> implicit declaration of function ‘setupterm’<span class=\"token punctuation\">;</span> did you mean ‘set_term’<span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>Werror<span class=\"token operator\">=</span>implicit<span class=\"token operator\">-</span>function<span class=\"token operator\">-</span>declaration<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>initialised_setupterm <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setupterm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>term<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                   <span class=\"token operator\">^</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                   set_term</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cc1<span class=\"token operator\">:</span> some warnings being treated as errors</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>building <span class=\"token char\">'_curses_panel'</span> extension</pre></td></tr></table></figure><p>执行</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sudo sed <span class=\"token operator\">-</span>i <span class=\"token string\">\"s/Werror=implicit-function-declaration/Wno-error/g\"</span> configure</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sudo make clean</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sudo make</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sudo make install</pre></td></tr></table></figure><p>可能会有警告，忽略即可。</p>\n</li>\n<li>\n<p>将 python3 链接到 python，使在终端输入 pyhton 可打开 python3</p>\n<p>打开终端，输入 <code>sudo gedit .bashrc</code></p>\n<p>在末尾加上 <code>alias python=python3</code></p>\n</li>\n</ol>\n<h5 id=\"安装ros\"><a class=\"anchor\" href=\"#安装ros\">#</a> 安装 ros</h5>\n<p>挂上代理，按照官网教程步骤即可。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kucm9zLm9yZy9yb3NidWlsZA==\">rosbuild - ROS Wiki</span></p>\n<h5 id=\"安装opencv\"><a class=\"anchor\" href=\"#安装opencv\">#</a> 安装 opencv</h5>\n<h6 id=\"1安装依赖环境\"><a class=\"anchor\" href=\"#1安装依赖环境\">#</a> 1. 安装依赖环境</h6>\n<p><strong> <code>sudo apt install cmake</code> </strong></p>\n<p><strong> <code>sudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libatlas-base-dev gfortran libgtk2.0-dev libjpeg-dev libpng-dev mlocate</code> </strong></p>\n<h6 id=\"2下载opencv-451\"><a class=\"anchor\" href=\"#2下载opencv-451\">#</a> 2. 下载 opencv 4.5.1</h6>\n<p>下载 Sources</p>\n<p>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5jdi9vcGVuY3YuZ2l0\">https://github.com/opencv/opencv.git</span></p>\n<p>或直接在官网下载压缩包</p>\n<h6 id=\"3编译安装\"><a class=\"anchor\" href=\"#3编译安装\">#</a> 3. 编译安装</h6>\n<ol>\n<li>\n<p>将 opencv-4.5.1.zip 拖拽入虚拟机中，并解压</p>\n</li>\n<li>\n<p>打开解压后的文件夹，并新建文件夹 build</p>\n</li>\n<li>\n<p>打开终端，进入 build 目录下</p>\n</li>\n<li>\n<p>输入命令</p>\n<p><strong> <code>cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local .. -DOPENCV_GENERATE_PKGCONFIG=ON</code> </strong></p>\n<p><strong> <code>sudo make </code> </strong></p>\n<p><strong> <code>sudo make install</code> </strong></p>\n</li>\n</ol>\n<h6 id=\"4配置环境\"><a class=\"anchor\" href=\"#4配置环境\">#</a> 4. 配置环境</h6>\n<ol>\n<li></li>\n</ol>\n<p><strong> <code>sudo gedit /etc/ld.so.conf.d/opencv.conf</code> </strong></p>\n<p>在文档中追加</p>\n<p>/usr/local/lib</p>\n<p>并保存退出</p>\n<ol start=\"2\">\n<li>\n<p>更新动态链接库 ** <code>sudo ldconfig</code> **</p>\n</li>\n<li>\n<p><strong> <code>sudo gedit /etc/bash.bashrc</code> </strong></p>\n<p>在文档中追加</p>\n<p>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig</p>\n<p>export PKG_CONFIG_PATH</p>\n<p>并保存退出</p>\n</li>\n<li>\n<p>更新环境</p>\n<p><strong> <code>source /etc/bash.bashrc</code> </strong></p>\n<p><strong> <code>sudo updatedb</code> </strong></p>\n</li>\n<li>\n<p><strong> <code>sudo gedit /etc/profile</code> </strong></p>\n<p>在文档中追加</p>\n<p>export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH</p>\n<p>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib</p>\n<p>并保存退出</p>\n</li>\n<li></li>\n</ol>\n<p>更新环境</p>\n<p><strong> <code>source /etc/profile</code> </strong></p>\n<h6 id=\"5验证安装\"><a class=\"anchor\" href=\"#5验证安装\">#</a> 5. 验证安装</h6>\n<p><strong> <code>pkg-config opencv4 --modversion</code> </strong></p>\n<p><strong> <code>opencv_version</code> </strong></p>\n<h6 id=\"6链接python\"><a class=\"anchor\" href=\"#6链接python\">#</a> 6. 链接 python</h6>\n<ol>\n<li><strong> <code>sudo apt install python3-pip</code> </strong></li>\n<li><strong> <code>pip3 install numpy matplotlib</code> </strong></li>\n<li><strong> <code>pip3 install opencv-python</code> </strong></li>\n<li><strong> <code>pip3 install opencv-contrib-python</code> </strong></li>\n</ol>\n<h6 id=\"7验证安装\"><a class=\"anchor\" href=\"#7验证安装\">#</a> 7. 验证安装</h6>\n<p>打开终端，输入 python3，进入 python 的 shell 环境</p>\n<p>依次输入</p>\n<p>import cv2</p>\n<p>print(cv2.<strong>version</strong>)</p>\n<h5 id=\"安装vscode\"><a class=\"anchor\" href=\"#安装vscode\">#</a> 安装 VScode</h5>\n<p>vscode 下载:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcz9zdGFydD10cnVl\">https://code.visualstudio.com/docs?start=true</span></p>\n<p>vscode 安装与卸载</p>\n<p>** 方式 1:** 双击安装即可 (或右击选择安装)</p>\n<p><strong>方式 2:</strong> <code>sudo dpkg -i xxxx.deb</code></p>\n<p>卸载</p>\n<p><code>sudo dpkg --purge  code</code></p>\n<p>在左下角 “显示应用程序里找到 “vscode，收藏</p>\n<p>插件安装</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs1.png\" alt=\"\" /></p>\n<p>更改字体间距</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs2.png\" alt=\"\" /></p>\n<p>在文件首选项里打开设置</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs3.png\" alt=\"\" /></p>\n<p>找到字体，随便选择一个</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/vs4.png\" alt=\"\" /></p>\n<pre><code>sudo docker run -it \\\n-v /tmp/.X11-unix:/tmp/.X11-unix \\\n-v /home/wlp/skyeye-workspace/:/home/skyeye-workspace \\\n--restart=always \\\n-e DISPLAY=$DISPLAY \\\n-e GDK_SCALE \\\n-e GDK_DPI_SCALE \\\n-e PATH=&quot;/home/skyeye-workspace/opt/skyeye/bin:$PATH&quot; \\\n--name skyeye skyeyehub/dev:v1 /bin/bash\n</code></pre>\n<pre><code>sudo docker exec -it skyeye /bin/bash\n</code></pre>\n<pre><code>sudo chown -R $(id -u):$(id -g) /home/wlp/skyeye-workspace\n</code></pre>\n",
            "tags": [
                "ROS",
                "Ubuntu",
                "ROS",
                "Ubuntu"
            ]
        },
        {
            "id": "https://wlp1231.cn/ROS/Ubuntu/%E5%85%A8%E5%90%91%E8%BD%AE%E5%B0%8F%E8%BD%A6/",
            "url": "https://wlp1231.cn/ROS/Ubuntu/%E5%85%A8%E5%90%91%E8%BD%AE%E5%B0%8F%E8%BD%A6/",
            "title": "全向轮小车",
            "date_published": "2023-01-11T05:38:35.187Z",
            "content_html": "<h1 id=\"全向轮小车\"><a class=\"anchor\" href=\"#全向轮小车\">#</a> 全向轮小车</h1>\n<h2 id=\"ssh通信\"><a class=\"anchor\" href=\"#ssh通信\">#</a> ssh 通信</h2>\n<h3 id=\"连接准备\"><a class=\"anchor\" href=\"#连接准备\">#</a> 连接准备</h3>\n<ul>\n<li><code>ifconfig</code>  查看 ip 地址，如 192.168.43.128</li>\n<li>用于连接的两台电脑处于同一局域网内，手机热点</li>\n<li>查看主机名，终端输入 <code>hostname</code></li>\n<li>终端输入 <code>sudo gedit /etc/hosts</code> , 在文件中第三行输入本机 ip 地址和主机名，第四行输入待连机 ip 地址和主机名（忽略）</li>\n<li><code>sudo /ect/init.d/networking restart</code> , 若报错，在 /etc/init.d 中找到 network 文件，将之替换 networking。仍然报错，将 /etc/init.d 改为 service，还报错，hosts 中 ip 地址写错，检查</li>\n</ul>\n<h3 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h3>\n<ul>\n<li>\n<p>安装 chrony 包和 ssh 服务器</p>\n<p><code>sudo apt-get install chrony</code>   <code>sudo apt-get install openssh-server</code></p>\n</li>\n<li>\n<p><code>ping 待连机ip地址或主机名</code> ，建议 ip 地址</p>\n</li>\n<li>\n<p><code>ssh 待连机用户名@待连机主机名或ip地址</code></p>\n</li>\n<li>\n<p>连接成功</p>\n</li>\n</ul>\n<h3 id=\"删除冲突ip\"><a class=\"anchor\" href=\"#删除冲突ip\">#</a> 删除冲突 IP</h3>\n<p><code>ssh-keygen -f &quot;/home/wlp/.ssh/known_hosts&quot; -R &quot;joul&quot;</code></p>\n<p>查看系统是否已经安装 ssh 客户端或者服务端：dpkg -l | grep ssh。<br />\n启动 ssh 服务：sudo /etc/init.d/ssh start<br />\n 关闭 ssh 服务：sudo /etc/init.d/ssh stop<br />\n 重启 ssh 服务：sudo /etc/init.d/ssh restart</p>\n<h2 id=\"连接控制mini小车1804密码raspberry\"><a class=\"anchor\" href=\"#连接控制mini小车1804密码raspberry\">#</a> 连接控制 mini 小车（18.04 密码：raspberry）</h2>\n<ul>\n<li>\n<p>打开终端，通过 ssh 连接到小车上的树莓派，192.168.0.100</p>\n<p><code>ssh -Y wheeltec@192.168.0.100</code></p>\n<p>密码：dongguan</p>\n<p>注：没有 - Y，图形化等功能无法使用</p>\n</li>\n<li>\n<p>远程登录后： <code>roslaunch turn_on_wheeltec_robot turn_on_wheeltec_robot.launch</code></p>\n</li>\n<li>\n<p>远程登录后： <code>roslaunch wheeltec_robot_rc keyboard_teleop.launch</code></p>\n</li>\n</ul>\n<p>通过上述操作可以键盘控制小车移动</p>\n<h3 id=\"启动雷达\"><a class=\"anchor\" href=\"#启动雷达\">#</a> 启动雷达</h3>\n<ul>\n<li>\n<p><code>roslaunch rplidar_ros rplidar.launch</code></p>\n</li>\n<li>\n<p>查看雷达发布的话题</p>\n<p><code>rostopic list</code></p>\n</li>\n<li>\n<p>查看数据类型</p>\n<p><code>rosmsg show sensor_msgs/LaserScan </code></p>\n</li>\n</ul>\n<h2 id=\"控制小车雷达建图\"><a class=\"anchor\" href=\"#控制小车雷达建图\">#</a> 控制小车雷达建图</h2>\n<ul>\n<li>\n<p>终端 ssh 连接</p>\n</li>\n<li>\n<p>终端输入 <code>roslaunch turn_on_wheeltec_robot mapping.launch </code></p>\n</li>\n<li>\n<p>新终端输入 <code>rviz</code> , 使用远程终端较卡，使用本机终端</p>\n<p>.bushrc 文件加入</p>\n<p>export ROS_MASTER_URI=http://192.168.0.100:11311<br />\nexport ROS_HOSTNAME=192.168.0.136</p>\n</li>\n<li>\n<p>控制小车走完全场，完成建图</p>\n</li>\n<li>\n<p>保存图形:</p>\n<p>一键保存： <code>roslaunch turn_on_wheeltec_robot map_saver.launch</code></p>\n<p>打开地图路径： <code>cd /home/wheeltec/wheeltec_robot/src/turn_on_wheeltec_robot/map</code></p>\n<p>保存地图： <code>rosrun map_server map_saver -f 地图名</code></p>\n</li>\n<li>\n<p>查看图形：将远程文件挂载到本机 <code>sudo mount -t nfs 192.168.0.100:/home/wheeltec/wheeltec_robot /mnt</code></p>\n<p>打开 mnt 文件查看，保存路径在保存图形时终端有显示</p>\n</li>\n<li>\n<p>建图<br />\n mapping.launch<br />\n 小车初始化节点：turn_on_wheeltec_robot.launch<br />\n 雷达节点：rplidar.launch<br />\ngmapping 建图节点：algorithm_gmapping.launch</p>\n</li>\n</ul>\n<h3 id=\"建图算法切换\"><a class=\"anchor\" href=\"#建图算法切换\">#</a> 建图算法切换</h3>\n<ol>\n<li>修改 mapping.launch 文件开头 <code>&lt;arg name=&quot;mapping_node&quot; default=&quot;gmapping&quot; doc=&quot;opt:gmapping,hector,cartographer,karto&quot;/&gt;</code></li>\n</ol>\n<h3 id=\"雷达跟随\"><a class=\"anchor\" href=\"#雷达跟随\">#</a> 雷达跟随</h3>\n<p><code>roslaunch simple_follower laser_follower.launch</code></p>\n<h2 id=\"源bashrc文件本机终端使用rviz\"><a class=\"anchor\" href=\"#源bashrc文件本机终端使用rviz\">#</a> 源（.bashrc 文件，本机终端使用 rviz）</h2>\n<p>export ROS_MASTER_URI=http://192.168.0.100:11311<br />\nexport ROS_HOSTNAME=192.168.0.136</p>\n<h3 id=\"自主导航\"><a class=\"anchor\" href=\"#自主导航\">#</a> 自主导航</h3>\n<ul>\n<li>\n<p>运行导航节点</p>\n<p><code>roslaunch turn_on_wheeltec_robot navigation.launch</code></p>\n</li>\n<li>\n<p>启动 rviz</p>\n</li>\n<li>\n<p>查看里程计传感器（odom）</p>\n<p><code>rostopic echo /odom </code></p>\n</li>\n</ul>\n<h3 id=\"3d建图导航\"><a class=\"anchor\" href=\"#3d建图导航\">#</a> 3D 建图导航</h3>\n<ol>\n<li>\n<p>安装 rtabmap</p>\n<p><code>sudo apt-get update </code> (更新软件列表)<br />\n <code>sudo apt-get install ros-noetic-rtabmap-ros</code> （安装 rtabmap）</p>\n</li>\n<li>\n<p>跑官方测试包（可选，远程端）</p>\n<p><code>roslaunch rtabmap_ros demo_robot_mapping.launch rviz:=true rtabmapviz:=false</code>  （官方测试例程）</p>\n<p><code>rosbag play --clock demo_mapping.bag </code> （官方测试包，在 /home/wheeltec/ 的路径下执行）</p>\n</li>\n<li>\n<p>建图<br />\n <code>roslaunch turn_on_wheeltec_robot 3d_mapping.launch</code> （启动 3d 建图）<br />\n <code>roslaunch wheeltec_robot_rc keyboard_teleop.launch</code>   （启动键盘控制节点）</p>\n</li>\n<li>\n<p>导航<br />\n <code>roslaunch  turn_on_wheeltec_robot 3d_navigation.launch</code> （启动 3d 导航）</p>\n</li>\n</ol>\n<h3 id=\"纯视觉建图导航\"><a class=\"anchor\" href=\"#纯视觉建图导航\">#</a> 纯视觉建图导航</h3>\n<p>建图：</p>\n<p><code>roslaunch  turn_on_wheeltec_robot pure3d_mapping.launch</code></p>\n<p>导航：</p>\n<p><code>roslaunch  turn_on_wheeltec_robot pure3d_navigation.launch</code></p>\n<h3 id=\"自主建图\"><a class=\"anchor\" href=\"#自主建图\">#</a> 自主建图</h3>\n<p><code>roslaunch turn_on_wheeltec_robot rrt_slam.launch</code></p>\n<h2 id=\"导航参数设置\"><a class=\"anchor\" href=\"#导航参数设置\">#</a> 导航参数设置</h2>\n<p>如图所示的这些文件定义了一系列导航相关参数，包括膨胀半径、机器人的尺寸、机器人的最大最小速度、加速度等</p>\n<p>![wode](C:\\Users\\wlp\\Pictures\\Camera Roll\\ 出征 - 初试 \\QQ 截图 20211013231448.png)</p>\n<p>![wode](C:\\Users\\wlp\\Pictures\\Camera Roll\\ 出征 - 初试 \\QQ 截图 20211013231503.png)</p>\n",
            "tags": [
                "ROS",
                "Ubuntu",
                "ROS",
                "Ubuntu"
            ]
        },
        {
            "id": "https://wlp1231.cn/ROS/Ubuntu/%E5%8F%8C%E7%9B%AET265%E4%BD%BF%E7%94%A8/",
            "url": "https://wlp1231.cn/ROS/Ubuntu/%E5%8F%8C%E7%9B%AET265%E4%BD%BF%E7%94%A8/",
            "title": "双目T265使用",
            "date_published": "2023-01-11T05:38:35.187Z",
            "content_html": "<h1 id=\"双目t265使用github\"><a class=\"anchor\" href=\"#双目t265使用github\">#</a> 双目 T265 使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0ludGVsUmVhbFNlbnNlL2xpYnJlYWxzZW5zZS9ibG9iL2RldmVsb3BtZW50L2RvYy9kaXN0cmlidXRpb25fbGludXgubWQjaW5zdGFsbGluZy10aGUtcGFja2FnZXM=\"> github</span></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>\n<p>realsense T265 传感器输出的数据</p>\n</li>\n<li>\n<p>双目摄像头可以采集到 848X800 分辨率下 30FPS 的鱼眼图像数据；</p>\n</li>\n<li>\n<p>IMU 数据（包括 6DoF 的 Pose，3DoF 的加速度计，3DoF 的陀螺仪）<br />\n而且以上数据的出厂时全都进行了标定，并且都保存在传感器中，你可以通过传感器的输出很容易获得内部的标定数据。</p>\n</li>\n</ul>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>建议按照 github 上的安装</p>\n<ul>\n<li>\n<p><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE</code></p>\n<p>若运行后出现公匙问题，则运行 <code>sudo gedit /etc/apt/sources.list</code>  更新下载源 [源](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnVzdGMuZWR1LmNuL3JlcG9nZW4v\">LUG's repo file generator (ustc.edu.cn)</span>)</p>\n</li>\n<li>\n<p>ubuntu16   <code>sudo add-apt-repository &quot;deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo xenial main&quot; -u</code></p>\n</li>\n<li>\n<p>ubuntu18   <code>sudo add-apt-repository &quot;deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo bionic main&quot; -u</code></p>\n</li>\n<li>\n<p><code>sudo apt-get install librealsense2-dkms librealsense2-utils librealsense2-dev librealsense2-dbg</code></p>\n</li>\n<li>\n<p>第五步安装成功了，将你的 realsense T265 连接到电脑 USB（至少 USB3.0）口上，然后终端中输入以下命令就能看到传感器输出的数据了。 <code>realsense-viewer</code></p>\n</li>\n</ul>\n<h2 id=\"编程使用realsense-t265\"><a class=\"anchor\" href=\"#编程使用realsense-t265\">#</a> 编程使用 realsense T265</h2>\n<ul>\n<li>\n<p>通过 IMU 积分出位姿<br />\n当你按照上述 2 中的方法进行了必要程序安装之后，你就已经成功的把 realsense T265 传感器所要用的库文件和头文件都安装到系统中了。所以我们直接编程使用就行了。下面我向你介绍一下如何通过传感器输出的 IMU 信息，计算传感器运动的轨迹。其实就是通过 IMU 的速度和加速度信息积分产生位姿（位置和角度）信息。不废话，直接上代码。</p>\n<pre><code class=\"language-c++\">// License: Apache 2.0. See LICENSE file in root directory.\n// Copyright(c) 2019 Intel Corporation. All Rights Reserved.\n#include &lt;librealsense2/rs.hpp&gt;\n#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;chrono&gt;\n#include &lt;thread&gt;\n#include &lt;mutex&gt;\n\n#include &lt;math.h&gt;\n#include &lt;float.h&gt;\n\n//欧拉角转四元数，两种不同的旋转表示方法之间转换\n//（如果你不懂的话，不必深究，这里慢慢来，你一时半会估计很难理解啥是四元数）\ninline rs2_quaternion quaternion_exp(rs2_vector v)\n&#123;\n    float x = v.x/2, y = v.y/2, z = v.z/2, th2, th = sqrtf(th2 = x*x + y*y + z*z);\n    float c = cosf(th), s = th2 &lt; sqrtf(120*FLT_EPSILON) ? 1-th2/6 : sinf(th)/th;\n    rs2_quaternion Q = &#123; s*x, s*y, s*z, c &#125;;\n    return Q;\n&#125;\n\n//两个四元素之间进行“乘法”,相当于是旋转之后再旋转\ninline rs2_quaternion quaternion_multiply(rs2_quaternion a, rs2_quaternion b)\n&#123;\n    rs2_quaternion Q = &#123;\n        a.x * b.w + a.w * b.x - a.z * b.y + a.y * b.z,\n        a.y * b.w + a.z * b.x + a.w * b.y - a.x * b.z,\n        a.z * b.w - a.y * b.x + a.x * b.y + a.w * b.z,\n        a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z,\n    &#125;;\n    return Q;\n&#125;\n\n//通过离散欧拉积分计算出位姿（旋转和位置）\nrs2_pose predict_pose(rs2_pose &amp; pose, float dt_s)\n&#123;\n    rs2_pose P = pose;\n    P.translation.x = dt_s * (dt_s/2 * pose.acceleration.x + pose.velocity.x) + pose.translation.x;\n    P.translation.y = dt_s * (dt_s/2 * pose.acceleration.y + pose.velocity.y) + pose.translation.y;\n    P.translation.z = dt_s * (dt_s/2 * pose.acceleration.z + pose.velocity.z) + pose.translation.z;\n    rs2_vector W = &#123;\n            dt_s * (dt_s/2 * pose.angular_acceleration.x + pose.angular_velocity.x),\n            dt_s * (dt_s/2 * pose.angular_acceleration.y + pose.angular_velocity.y),\n            dt_s * (dt_s/2 * pose.angular_acceleration.z + pose.angular_velocity.z),\n    &#125;;\n    P.rotation = quaternion_multiply(quaternion_exp(W), pose.rotation);\n    return P;\n&#125;\n\nint main(int argc, char * argv[]) try\n&#123;\n  \t//声明一个realsense传感器设备\n    rs2::pipeline pipe;\n    // 创建一个配置信息\n    rs2::config cfg;\n    //告诉配置信息，我需要传感器的POSE和6DOF IMU数据\n    cfg.enable_stream(RS2_STREAM_POSE, RS2_FORMAT_6DOF);\n\n    \n    std::mutex mutex;\n    //回调函数\n    auto callback = [&amp;](const rs2::frame&amp; frame)\n    &#123;\n        std::lock_guard&lt;std::mutex&gt; lock(mutex);\n        if (rs2::pose_frame fp = frame.as&lt;rs2::pose_frame&gt;()) &#123;\n            rs2_pose pose_data = fp.get_pose_data();\n            auto now = std::chrono::system_clock::now().time_since_epoch();\n            double now_ms = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(now).count();\n            double pose_time_ms = fp.get_timestamp();\n            float dt_s = static_cast&lt;float&gt;(std::max(0., (now_ms - pose_time_ms)/1000.));\n            rs2_pose predicted_pose = predict_pose(pose_data, dt_s);\n            std::cout &lt;&lt; &quot;Predicted &quot; &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; dt_s*1000 &lt;&lt; &quot;ms &quot; &lt;&lt;\n                    &quot;Confidence: &quot; &lt;&lt; pose_data.tracker_confidence &lt;&lt; &quot; T: &quot; &lt;&lt;\n                    predicted_pose.translation.x &lt;&lt; &quot; &quot; &lt;&lt;\n                    predicted_pose.translation.y &lt;&lt; &quot; &quot; &lt;&lt;\n                    predicted_pose.translation.z &lt;&lt; &quot; (meters)   \\r&quot;;\n        &#125;\n    &#125;;\n\n    //开始接收数据，接收数据之后进入回调函数进行处理\n    rs2::pipeline_profile profiles = pipe.start(cfg, callback);\n    std::cout &lt;&lt; &quot;started thread\\n&quot;;\n    while(true) &#123;\n        std::this_thread::sleep_for(std::chrono::milliseconds(100));\n    &#125;\n\n    return EXIT_SUCCESS;\n&#125;\ncatch (const rs2::error &amp; e)\n&#123;\n    std::cerr &lt;&lt; &quot;RealSense error calling &quot; &lt;&lt; e.get_failed_function() &lt;&lt; &quot;(&quot; &lt;&lt; e.get_failed_args() &lt;&lt; &quot;):\\n    &quot; &lt;&lt; e.what() &lt;&lt; std::endl;\n    return EXIT_FAILURE;\n&#125;\ncatch (const std::exception&amp; e)\n&#123;\n    std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;\n    return EXIT_FAILURE;\n&#125;\n\n</code></pre>\n</li>\n<li>\n<p>源文件中牵扯到一些数学，不必深究看过就算过。有了源文件我们还需要 <code>CMakeLists.txt</code>  文件，这里你直接复制我写的就可以运行。</p>\n<pre><code class=\"language-c++\">cmake_minimum_required(VERSION 3.1.0)\nproject(test)\nset(CMAKE_BUILD_TYPE &quot;release&quot;)\n\nadd_executable(test main.cpp) #通过main.cpp编译生成可执行文件test\ntarget_link_libraries(test realsense2) #将realsense2的库文件链接给test\n</code></pre>\n</li>\n<li>\n<p>将源文件 <code>main.cpp</code>  和 <code>CMakeLists.txt</code>  放在同一个文件夹下，然后顺序执行以下命令就可以编译生成可执行文件了。</p>\n</li>\n<li>\n<p>最后将 realsense T265 连接上电脑（至少 USB3.0），然后运行刚刚生成的程序 <code>test</code> ，移动移动传感器，就可以得到位姿信息了。</p>\n</li>\n<li>\n<p>如果你运行的时候报错：error while loading shared libraries: librealsense2.so.2.34: cannot open shared object file: no such file or directory，那你需要将 CMakeLists.txt 中的 librealsense2 的链接方式改为如下方式：</p>\n<pre><code class=\"language-c++\">find_package(realsense2 REQUIRED)\ninclude_directories(  $&#123;realsense2_INCLUDE_DIR&#125; )\ntarget_link_libraries(test $&#123;realsense2_LIBRARY&#125; )\n</code></pre>\n</li>\n</ul>\n<h2 id=\"用opencv显示双目摄像头的数据\"><a class=\"anchor\" href=\"#用opencv显示双目摄像头的数据\">#</a> 用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/ZnJvbT1wY19ibG9nX2hpZ2hsaWdodCZhbXA7cT1vcGVuY3Y=\"> opencv</span> 显示双目摄像头的数据</h2>\n<ul>\n<li>\n<p>有了 3.1 的基础，这里我就直接上代码了。</p>\n<pre><code class=\"language-c++\">#include &lt;librealsense2/rs.hpp&gt;\n#include &lt;opencv2/opencv.hpp&gt;\n\nint main()&#123;\n\n    rs2::config cfg;\n    cfg.enable_stream(RS2_STREAM_FISHEYE,1, RS2_FORMAT_Y8);\n    cfg.enable_stream(RS2_STREAM_FISHEYE,2, RS2_FORMAT_Y8);\n    rs2::pipeline pipe;\n    pipe.start(cfg);\n\n    rs2::frameset data;\n\n    while (1)&#123;\n        data = pipe.wait_for_frames();\n        rs2::frame image_left = data.get_fisheye_frame(1);\n        rs2::frame image_right = data.get_fisheye_frame(2);\n\n        if (!image_left || !image_right)\n            break;\n\n        cv::Mat cv_image_left(cv::Size(848, 800), CV_8U, (void*)image_left.get_data(), cv::Mat::AUTO_STEP);\n        cv::Mat cv_image_right(cv::Size(848, 800), CV_8U, (void*)image_right.get_data(), cv::Mat::AUTO_STEP);\n\n        cv::imshow(&quot;left&quot;, cv_image_left);\n        cv::imshow(&quot;right&quot;, cv_image_right);\n        cv::waitKey(1);\n    &#125;\n\n    return 0;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>对应的 <code>CMakeLists.txt</code>  文件内容如下：</p>\n<pre><code class=\"language-c++\">cmake_minimum_required(VERSION 3.1.0)\nproject(test)\nset(CMAKE_BUILD_TYPE &quot;release&quot;)\n\nfind_package(OpenCV)\n\ninclude_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)\n\nadd_executable(test main.cpp)\ntarget_link_libraries(test\n        realsense2\n        $&#123;OpenCV_LIBS&#125;\n)\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "ROS",
                "Ubuntu",
                "ROS",
                "Ubuntu"
            ]
        },
        {
            "id": "https://wlp1231.cn/ROS/Ubuntu/ros%E7%AE%80%E4%BB%8B/",
            "url": "https://wlp1231.cn/ROS/Ubuntu/ros%E7%AE%80%E4%BB%8B/",
            "title": "ROS",
            "date_published": "2023-01-11T05:38:35.186Z",
            "content_html": "<h1 id=\"ros\"><a class=\"anchor\" href=\"#ros\">#</a> ros</h1>\n<h2 id=\"ros发展\"><a class=\"anchor\" href=\"#ros发展\">#</a> ROS 发展</h2>\n<h2 id=\"ros核心概念\"><a class=\"anchor\" href=\"#ros核心概念\">#</a> ros 核心概念</h2>\n<h3 id=\"节点与节点管理器\"><a class=\"anchor\" href=\"#节点与节点管理器\">#</a> 节点与节点管理器</h3>\n<ul>\n<li>\n<p>节点 (node)—— 执行单元</p>\n</li>\n<li>\n<p>节点管理器 (ROS Master)—— 控制中心</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/F4CAF53D748FB9C1BC00BFA845E8137D.jpg\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h3 id=\"话题通讯\"><a class=\"anchor\" href=\"#话题通讯\">#</a> 话题通讯</h3>\n<ul>\n<li>\n<p>话题 (Topic)—— 异步通讯机制</p>\n</li>\n<li>\n<p>消息 (Message)—— 话题数据</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/DA5B5437595A7C45C4094F420A34B6E8.jpg\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h3 id=\"服务通讯\"><a class=\"anchor\" href=\"#服务通讯\">#</a> 服务通讯</h3>\n<ul>\n<li>\n<p>服务 (Service)—— 同步通讯机制</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/198CF5D08B32B6501ED1B27215D2C60B.jpg\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<ul>\n<li>\n<p>参数 (Parameter)—— 全局共享字典</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/F84FDE814DC582200E9F6A6E314D328C.jpg\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h3 id=\"文件系统\"><a class=\"anchor\" href=\"#文件系统\">#</a> 文件系统</h3>\n<ul>\n<li>\n<p>功能包 (Package)</p>\n</li>\n<li>\n<p>功能包清单 (Package manifest)</p>\n</li>\n<li>\n<p>元功能包 (Meta Packages)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1322E943259F5DEDF02695BF03BE17C1.jpg\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h2 id=\"ros命令行工具使用\"><a class=\"anchor\" href=\"#ros命令行工具使用\">#</a> ROS 命令行工具使用</h2>\n<h3 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h3>\n<h3 id=\"运行小海龟\"><a class=\"anchor\" href=\"#运行小海龟\">#</a> 运行小海龟</h3>\n<ul>\n<li>roscore</li>\n<li>\n<ol>\n<li>rosrun turtlesim 双击 tab</li>\n<li>rosrun turtlesim turtlesim_node</li>\n</ol>\n</li>\n<li>rosrun turtlesim turtle_teleop_key</li>\n</ul>\n<h3 id=\"命令行控制小海龟\"><a class=\"anchor\" href=\"#命令行控制小海龟\">#</a> 命令行控制小海龟</h3>\n<ul>\n<li>\n<p>rqt_graph</p>\n</li>\n<li>\n<p>rosnode</p>\n</li>\n<li>\n<p>rosnode info /turtlesim</p>\n</li>\n<li>\n<p>rostopic</p>\n</li>\n<li>\n<p>rostopic pub /turtle1/cmd_vel geometry_msgs/Twist (双击 tab)</p>\n<p>海龟绕 z 轴转</p>\n</li>\n<li>\n<p>rosmsg show geometry_msgs/Twist</p>\n</li>\n<li>\n<p>rosservice</p>\n</li>\n<li>\n<p>rosservice call /spawn (双击 tab，新加一只海龟)</p>\n</li>\n<li>\n<p>rosbag record -a -O cmd_record (保存运行数据)</p>\n</li>\n<li>\n<p>rosbag play cmd_record.bag (按上次数据运行)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2010-01-56%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2010-00-40%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-32-43%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-38-42%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-39-23%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-39-34%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/2021-04-24%2011-39-46%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h2 id=\"创建工作空间与功能包\"><a class=\"anchor\" href=\"#创建工作空间与功能包\">#</a> 创建工作空间与功能包</h2>\n<h3 id=\"功能空间\"><a class=\"anchor\" href=\"#功能空间\">#</a> 功能空间</h3>\n<ul>\n<li>\n<p>src (代码空间)</p>\n</li>\n<li>\n<p>build (编译空间)</p>\n</li>\n<li>\n<p>devel (开发空间)</p>\n</li>\n<li>\n<p>install (安装空间)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/84D8CBC11E2562F75491728479EB1A0D.jpg\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h3 id=\"创建工作空间\"><a class=\"anchor\" href=\"#创建工作空间\">#</a> 创建工作空间</h3>\n<h4 id=\"创建工作空间-2\"><a class=\"anchor\" href=\"#创建工作空间-2\">#</a> 创建工作空间</h4>\n<ul>\n<li>mkdir -p ~/catkin_ws/src</li>\n<li>cd ~/catkin_ws/src</li>\n<li>catkin_init_workspace</li>\n</ul>\n<h4 id=\"编译工作空间\"><a class=\"anchor\" href=\"#编译工作空间\">#</a> 编译工作空间</h4>\n<ul>\n<li>cd ~/catkin_ws/</li>\n<li>catkin_make</li>\n</ul>\n<h4 id=\"设置环境变量\"><a class=\"anchor\" href=\"#设置环境变量\">#</a> 设置环境变量</h4>\n<ul>\n<li>source devel/setup.bash</li>\n</ul>\n<h4 id=\"检查环境变量\"><a class=\"anchor\" href=\"#检查环境变量\">#</a> 检查环境变量</h4>\n<ul>\n<li>echo $ROS_PACKAGE_PATH</li>\n</ul>\n<h3 id=\"创建功能包\"><a class=\"anchor\" href=\"#创建功能包\">#</a> 创建功能包</h3>\n<h4 id=\"创建功能包-2\"><a class=\"anchor\" href=\"#创建功能包-2\">#</a> 创建功能包</h4>\n<ul>\n<li>cd ~/catkin_ws/src</li>\n<li>catkin_create_pkg test_pkg std_msgs roscpp rospy</li>\n<li><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/5AD81B88DDB3E851DFEEA2D62E81144D.jpg\" alt=\"wode\" /></li>\n</ul>\n<h4 id=\"编译功能包\"><a class=\"anchor\" href=\"#编译功能包\">#</a> 编译功能包</h4>\n<ul>\n<li>cd ~catkin_ws</li>\n<li>catkin_make</li>\n<li>source ~/catkin_ws/devel/setup.bash</li>\n</ul>\n<h2 id=\"发布者publisher的编程实现\"><a class=\"anchor\" href=\"#发布者publisher的编程实现\">#</a> 发布者 Publisher 的编程实现</h2>\n<ul>\n<li>\n<p>创建功能包</p>\n</li>\n<li>\n<p>在功能包的 src 中创建文档，输入代码 (touch 文档名)</p>\n</li>\n<li>\n<p>配置发布者代码编译规则 (插入到 CM。。。.txt 中 Install 前)</p>\n<p>add_executable(velocity</p>\n<p>_publisher src/velocity_publisher.cpp)</p>\n<p>target_link_libraries(velocity_publisher ${catkin_LIBRARIES})</p>\n</li>\n<li>\n<p>回到工作空间根目录进行 ——catkin_make</p>\n</li>\n<li>\n<p>设置环境变量 ——source delel/setup.bash (ctrl+h, 找到隐藏文件，固定)</p>\n</li>\n<li>\n<p>重启终端，启动 ros，海龟，第三个终端 ——rosrun 功能包名</p>\n</li>\n</ul>\n<h2 id=\"订阅者subscriber的编程实现\"><a class=\"anchor\" href=\"#订阅者subscriber的编程实现\">#</a> 订阅者 Subscriber 的编程实现</h2>\n<ul>\n<li>\n<p>在功能包的 src 中创建文档，输入代码</p>\n</li>\n<li>\n<p>配置发布者代码编译规则 (插入到 CM。。。.txt 中 Install 前)</p>\n<p>add_executable(pose_subscriber src/pose_subscriber.cpp)<br />\ntarget_link_libraries(pose_subscriber ${catkin_LIBRARIES})</p>\n</li>\n<li>\n<p>回到工作空间根目录进行 ——catkin_make</p>\n</li>\n<li>\n<p>设置环境变量 ——source delel/setup.bash (发布者过程以固定，可忽略)</p>\n</li>\n<li>\n<p>重启终端，启动 ros，海龟，第三个终端 ——rosrun 功能包名 文档名</p>\n</li>\n</ul>\n<h2 id=\"话题消息的定义与使用\"><a class=\"anchor\" href=\"#话题消息的定义与使用\">#</a> 话题消息的定义与使用</h2>\n<h3 id=\"自定义话题消息\"><a class=\"anchor\" href=\"#自定义话题消息\">#</a> 自定义话题消息</h3>\n<h4 id=\"定义msg文件\"><a class=\"anchor\" href=\"#定义msg文件\">#</a> 定义 msg 文件</h4>\n<ul>\n<li>\n<p>touch Person.msg</p>\n</li>\n<li>\n<p>数据接口的定义</p>\n<p>string name<br />\nuint8 sex<br />\nuint8 age</p>\n<p>uint8 unknown = 0<br />\nuint8 male = 1<br />\nuint8 female = 2</p>\n</li>\n</ul>\n<h4 id=\"在packagexml中添加功能包依赖\"><a class=\"anchor\" href=\"#在packagexml中添加功能包依赖\">#</a> 在 package.xml 中添加功能包依赖</h4>\n<p>&lt;build_depend&gt;message_generation&lt;/build_depend&gt;<br />\n&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</p>\n<h4 id=\"在cmakeliststxt添加编译选项\"><a class=\"anchor\" href=\"#在cmakeliststxt添加编译选项\">#</a> 在 CMakeLists.txt 添加编译选项</h4>\n<ul>\n<li>\n<p>find_package( …… message_generation)</p>\n</li>\n<li>\n<p>add_message_files(FILES Person.msg)<br />\ngenerate_messages(DEPENDENCIES std_msgs)</p>\n</li>\n<li>\n<p>catkin_package(…… message_runtime)</p>\n</li>\n</ul>\n<h4 id=\"编译生成相关语言文件\"><a class=\"anchor\" href=\"#编译生成相关语言文件\">#</a> 编译生成相关语言文件</h4>\n<h4 id=\"配置代码编译规则\"><a class=\"anchor\" href=\"#配置代码编译规则\">#</a> 配置代码编译规则</h4>\n<p>*/add_executable(person_publisher src/person_publisher.cpp)<br />\n*/target_link_libraries(person_publisher ${catkin_LIBRARIES})<br />\n*/add_dependencies(person_publisher ${PROJECT_NAME}_generate_messages_cpp)</p>\n<p>*/add_executable(person_subscriber src/person_subscriber.cpp)<br />\n*/target_link_libraries(person_subscriber ${catkin_LIBRARIES})<br />\n*/add_dependencies(person_subscriber ${PROJECT_NAME}_generate_messages_cpp)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425094112.png\" alt=\"wode\" /></p>\n<h2 id=\"客户端client的编程实现\"><a class=\"anchor\" href=\"#客户端client的编程实现\">#</a> 客户端 Client 的编程实现</h2>\n<h3 id=\"创建功能包-3\"><a class=\"anchor\" href=\"#创建功能包-3\">#</a> 创建功能包</h3>\n<p>catkin_create_pkg learning_service roscpp rospy std_msgs geometry_msgs turtlesim</p>\n<h3 id=\"创建客户端代码\"><a class=\"anchor\" href=\"#创建客户端代码\">#</a> 创建客户端代码</h3>\n<h3 id=\"配置客户端代码编译规则c\"><a class=\"anchor\" href=\"#配置客户端代码编译规则c\">#</a> 配置客户端代码编译规则 (c++)</h3>\n<p>add_executable(turtle_spawn src/turtle_spawn.cpp)<br />\ntarget_link_libraries(turtle_spawn ${catkin_LIBRARIES})</p>\n<h3 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h3>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425094547.png\" alt=\"wode\" /></p>\n<h2 id=\"服务端service的编程实现\"><a class=\"anchor\" href=\"#服务端service的编程实现\">#</a> 服务端 Service 的编程实现</h2>\n<h3 id=\"创建代码并配置编译规则\"><a class=\"anchor\" href=\"#创建代码并配置编译规则\">#</a> 创建代码并配置编译规则</h3>\n<p>add_executable(turtle_command_server src/turtle_command_server.cpp)<br />\ntarget_link_libraries(turtle_command_server ${catkin_LIBRARIES})</p>\n<h3 id=\"编译并运行服务器\"><a class=\"anchor\" href=\"#编译并运行服务器\">#</a> 编译并运行服务器</h3>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095204.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425120556.png\" alt=\"wode\" /></p>\n<h2 id=\"服务数据的定义与使用\"><a class=\"anchor\" href=\"#服务数据的定义与使用\">#</a> 服务数据的定义与使用</h2>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095447.png\" alt=\"wode\" /></p>\n<h3 id=\"自定义服务数据\"><a class=\"anchor\" href=\"#自定义服务数据\">#</a> 自定义服务数据</h3>\n<h4 id=\"定义srv文件\"><a class=\"anchor\" href=\"#定义srv文件\">#</a> 定义 srv 文件</h4>\n<h4 id=\"在packagexml中添加功能包依赖-2\"><a class=\"anchor\" href=\"#在packagexml中添加功能包依赖-2\">#</a> 在 package.xml 中添加功能包依赖</h4>\n<p>&lt;build_depend&gt;message_generation&lt;/build_depend&gt;<br />\n&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</p>\n<h4 id=\"在cmakeliststxt添加编译选项-2\"><a class=\"anchor\" href=\"#在cmakeliststxt添加编译选项-2\">#</a> 在 CMakeLists.txt 添加编译选项</h4>\n<ul>\n<li>\n<p>find_package(...... message_generation)</p>\n</li>\n<li>\n<p>add_service_files(FILES Person.srv)<br />\ngenerates_message(DEPENDENCIES std_msgs)</p>\n</li>\n<li>\n<p>catkin_package(...... message_runtime)</p>\n</li>\n</ul>\n<h4 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h4>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095458.png\" alt=\"wode\" /></p>\n<h3 id=\"创建服务端代码\"><a class=\"anchor\" href=\"#创建服务端代码\">#</a> 创建服务端代码</h3>\n<h3 id=\"创建客户端代码-2\"><a class=\"anchor\" href=\"#创建客户端代码-2\">#</a> 创建客户端代码</h3>\n<h3 id=\"配置编译规则\"><a class=\"anchor\" href=\"#配置编译规则\">#</a> 配置编译规则</h3>\n<p>add_executable(person_server src/person_server.cpp)<br />\ntarget_link_libraries(person_server ${catkin_LIBRARIES})<br />\nadd_dependencies(person_server ${PROJECT_NAME}_gencpp)</p>\n<p>add_executable(person_client src/person_client.cpp)<br />\ntarget_link_libraries(person_client ${catkin_LIBRARIES})<br />\nadd_dependencies(person_client ${PROJECT_NAME}_gencpp)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425095516.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425123046.png\" alt=\"wode\" /></p>\n<h2 id=\"参数的使用与编程方法\"><a class=\"anchor\" href=\"#参数的使用与编程方法\">#</a> 参数的使用与编程方法</h2>\n<h3 id=\"参数模型\"><a class=\"anchor\" href=\"#参数模型\">#</a> 参数模型</h3>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425105408.png\" alt=\"wode\" /></p>\n<h3 id=\"创建功能包-4\"><a class=\"anchor\" href=\"#创建功能包-4\">#</a> 创建功能包</h3>\n<p>catkin_create_pkg learning_parameter roscpp rospy std_srvs</p>\n<h3 id=\"参数命令行使用\"><a class=\"anchor\" href=\"#参数命令行使用\">#</a> 参数命令行使用</h3>\n<h4 id=\"rosparam\"><a class=\"anchor\" href=\"#rosparam\">#</a> rosparam</h4>\n<ul>\n<li>\n<p>列出当前多有参数</p>\n<p>$ rosparam list</p>\n</li>\n<li>\n<p>显示某个参数值</p>\n<p>$ rosparam get param_key</p>\n</li>\n<li>\n<p>设置某个参数值</p>\n<p>$ rosparam set param_key param_value</p>\n</li>\n<li>\n<p>保存参数到文件</p>\n<p>$ rosparam dumo file_name</p>\n</li>\n<li>\n<p>从文件读取参数</p>\n<p>$ rosparam delete param_key</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425123758.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425124156.png\" alt=\"wode\" /></p>\n</li>\n</ul>\n<h3 id=\"编程方法\"><a class=\"anchor\" href=\"#编程方法\">#</a> 编程方法</h3>\n<h3 id=\"配置代码编译规则-2\"><a class=\"anchor\" href=\"#配置代码编译规则-2\">#</a> 配置代码编译规则</h3>\n<p>add_executable(parameter_config src/parameter_config.cpp)</p>\n<p>target_link_libraries(parameter_config ${catkin_LISRARAIES})</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210425110535.png\" alt=\"wode\" /></p>\n<h3 id=\"编译并运行\"><a class=\"anchor\" href=\"#编译并运行\">#</a> 编译并运行</h3>\n",
            "tags": [
                "ROS",
                "Ubuntu",
                "ROS",
                "Ubuntu"
            ]
        },
        {
            "id": "https://wlp1231.cn/ROS/Ubuntu/Clash%E6%95%99%E7%A8%8B/",
            "url": "https://wlp1231.cn/ROS/Ubuntu/Clash%E6%95%99%E7%A8%8B/",
            "title": "Clash教程",
            "date_published": "2023-01-11T05:38:35.183Z",
            "content_html": "<h3 id=\"clash教程\"><a class=\"anchor\" href=\"#clash教程\">#</a> Clash 教程</h3>\n<h4 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h4>\n<p>由于最近在 <code>Ubuntu</code>  下编程，但是要用到 Google 搜索，毕竟我是面向浏览器编程，所以解决问题全都要 Google, 而且进入 <code>github</code>  也需要翻墙.</p>\n<h4 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h4>\n<p>使用的是 clash, 个人觉得这个软件比较好用</p>\n<ol>\n<li>\n<p>执行  <code>cd &amp;&amp; mkdir clash</code>  在用户目录下创建 clash 文件夹。</p>\n<p>下载适合的 Clash 二进制文件并解压重命名为  <code>clash</code></p>\n<p>一般个人的 64 位电脑下载  <code>clash-linux-amd64.tar.gz </code> 即可。</p>\n<p>下载 clash <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RvcmVhbW9uLWRlc2lnbi9jbGFzaC9yZWxlYXNlcw==\">Releases · doreamon-design/clash (github.com)</span></p>\n</li>\n<li>\n<p>解压并运行它代码如下</p>\n</li>\n</ol>\n<pre><code>sudo gunzip clash-linux-arm64-v1.4.2.gz   \nmv clash-linux-arm64-v1.4.2 clash\nchmod +x clash\n</code></pre>\n<p>对以上代码解释:</p>\n<p>第一行：解压 <code>gz</code>  文件</p>\n<p>第二行：给文件改名为 clash, 文件名太长很麻烦</p>\n<p>第三行：给文件权限</p>\n<ol>\n<li>\n<p>在终端  <code>cd</code>  到 Clash 二进制文件所在的目录，执行</p>\n<pre><code>wget -O config.yml 订阅链接\nwget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb\n</code></pre>\n<p>注：</p>\n<ul>\n<li>\n<p>若 <code>Country.mmdb</code>  连接失败，可在 Windows 下打开网址下载后复制粘贴</p>\n</li>\n<li>\n<p>订阅链接获取：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tNGdxNjJmNTJnZHNzLmNvbS8jL3JlZ2lzdGVyP2NvZGU9dWpmYktOaGk=\">一元机场</span>，一年 11</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tZ21xejgzYXdqaC5jby9hdXRoL3JlZ2lzdGVyP2NvZGU9NDFzbA==\">少数人</span>，略贵</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>此时会在 clash 文件下生成 <code>config.yml</code>  文件，这是配置文件</p>\n<ol>\n<li></li>\n</ol>\n<pre><code>rm config.yaml\n</code></pre>\n<p>即删除它自动生成的 <code>config.yaml</code>  配置文件</p>\n<p>再把原来商家给你下载的 <code>config.yml</code>  文件改名为 <code>config.yaml</code></p>\n<pre><code>mv config.yml config.yaml\n</code></pre>\n<p>此时只有三个文件，即 clash 和 <code>config.yaml</code>  和 <code>Country.mmdb</code></p>\n<ol start=\"2\">\n<li>\n<p>在系统设置里面设置网络代理，改为手动 改成下图所演示</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/uTools_1665752805487.png\" alt=\"uTools_1665752805487\" /></p>\n</li>\n<li>\n<p>接着再在管理员权限下执行</p>\n<pre><code>sudo ./clash -d .\n</code></pre>\n</li>\n<li>\n<p>打开浏览器，输入 <code>clash.razord.top</code>  在这里可以测速，和修改节点代理.</p>\n</li>\n</ol>\n<p>如果不想代理就把网络代理设置为” 已禁用”.</p>\n",
            "tags": [
                "ROS",
                "Ubuntu",
                "ROS",
                "Ubuntu"
            ]
        },
        {
            "id": "https://wlp1231.cn/ROS/Linux/linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/",
            "url": "https://wlp1231.cn/ROS/Linux/linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/",
            "title": "linux初步学习",
            "date_published": "2023-01-11T05:38:35.180Z",
            "content_html": "<h1 id=\"linux初步学习\"><a class=\"anchor\" href=\"#linux初步学习\">#</a> linux 初步学习</h1>\n<h2 id=\"linux系统结构\"><a class=\"anchor\" href=\"#linux系统结构\">#</a> linux 系统结构</h2>\n<ul>\n<li>linux 是一个倒树型结构，最大的目录是 '/'(根目录)</li>\n</ul>\n<h3 id=\"linux系统中的二级目录\"><a class=\"anchor\" href=\"#linux系统中的二级目录\">#</a> linux 系统中的二级目录</h3>\n<ul>\n<li>\n<p>/bin              ## 二进制可执行文件，系统常规命令</p>\n</li>\n<li>\n<p>/boot           ## 启动目录，存放系统自动启动文件，内核，初始化程序</p>\n</li>\n<li>\n<p>/dev             ## 系统设备管理文件</p>\n</li>\n<li>\n<p>/etc              ## 大多数系统配置文件存放路径</p>\n</li>\n<li>\n<p>/home          ## 普通用户家目录</p>\n</li>\n<li>\n<p>/lib                ## 函数库（系统内部定义的类似变量的库）</p>\n</li>\n<li>\n<p>/lib64/          ##64 位函数库</p>\n</li>\n<li>\n<p>/media         ## 临时挂载点</p>\n</li>\n<li>\n<p>/mnt              ## 临时挂载点</p>\n</li>\n<li>\n<p>/run               ## 自动临时设备挂载点</p>\n</li>\n<li>\n<p>/opt               ## 第三方软件安装路径</p>\n</li>\n<li>\n<p>/proc             ## 系统硬件信息和系统进程信息</p>\n</li>\n<li>\n<p>/root              ## 超级用户家目录</p>\n</li>\n<li>\n<p>/sbin              ## 系统管理命令，通常只有 root 可以执行</p>\n</li>\n<li>\n<p>/srv                ## 系统数据目录</p>\n</li>\n<li>\n<p>/var                ## 系统数据目录</p>\n</li>\n<li>\n<p>/sys               ## 内核相关数据</p>\n</li>\n<li>\n<p>/tmp              ## 临时文件产生目录</p>\n</li>\n<li>\n<p>/usr/               ## 用户相关信息数据</p>\n</li>\n</ul>\n<h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<h3 id=\"快捷键rm\"><a class=\"anchor\" href=\"#快捷键rm\">#</a> 快捷键 rm</h3>\n<ul>\n<li>打开终端的快捷键： Ctrl + Alt + T</li>\n<li>停止终端的快捷键： Ctrl + C</li>\n<li>关闭终端的快捷键： Ctrl + D</li>\n</ul>\n<h3 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令</h3>\n<h4 id=\"1-新建文件夹\"><a class=\"anchor\" href=\"#1-新建文件夹\">#</a> 1.  新建文件夹</h4>\n<p>mkdir + 文件名</p>\n<p>mkdir -p + 文件名 1 / 文件名 2 / 文件名 3 (建立递归目录)</p>\n<p>mkdir text_cpp cd text_cpp/</p>\n<p>vim hello.cpp (新建源文件并写入代码，: 按 Esc 后输入：wq 保存并退出)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE2021.png\" alt=\"wode\" /></p>\n<p>g++ hello.cpp -o hello (编译，gcc 无法使用)</p>\n<p>ls (查询)</p>\n<p>./hello (不能存在空格)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20210415000648.png\" alt=\"wode\" /></p>\n<pre><code>rm - r hwllo.cpp(删除), -r表示递归删除，也就是删除目录本身和里面的所有内容\n</code></pre>\n<p>rm -r -f  (或 rm -rf)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE20.png\" alt=\"wode\" /></p>\n<h4 id=\"2-新建文件\"><a class=\"anchor\" href=\"#2-新建文件\">#</a> 2. 新建文件</h4>\n<p>touch + 文档名</p>\n<p>stat + 文档名 (查询时间)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/QQ%E6%88%AA%E5%9B%BE2.png\" alt=\"wode\" /></p>\n<p>rm + 文档名 (删除文档)</p>\n<p>rm -f + 文档名 (删除文档，无提示)</p>\n<h4 id=\"3-gedit图形文本编辑器\"><a class=\"anchor\" href=\"#3-gedit图形文本编辑器\">#</a> 3. gedit 图形文本编辑器 (???????)</h4>\n<p>gedit file</p>\n<p>ctrl+s 保存</p>\n<p>ctrl+n 打开新的编辑界面</p>\n<p>ctrl+o 打开新文件</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/123.png\" alt=\"wode\" /></p>\n<h4 id=\"4-查看文件内容\"><a class=\"anchor\" href=\"#4-查看文件内容\">#</a> 4. 查看文件内容</h4>\n<p>cat + 文件名</p>\n<p>cat -b + 文件名 (显示行号)</p>\n<p>less + 文件名 (分页浏览)</p>\n<ul>\n<li>\n<p>用法：</p>\n<p>上 | 下 (逐行移动)</p>\n<p>pageup|pagedown (逐行移动)</p>\n<p>/+ 关键字 (高量显示关键字，n 向下匹配，N 向上匹配)</p>\n<p>v (进入 vim 模式 在 vim 模式中按：wq 退回到 less 模式) --&gt; 实测出现问题，进入 vim 模式就无法退出，需用 ctrl + 命令字母</p>\n<p>q (退出)</p>\n</li>\n</ul>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/cat.png\" alt=\"\" /></p>\n<h4 id=\"5-查询\"><a class=\"anchor\" href=\"#5-查询\">#</a> 5. 查询</h4>\n<ol>\n<li>\n<p>ls</p>\n</li>\n<li>\n<p>ls -l + 文件名 (文件属性)</p>\n</li>\n<li>\n<p>ls + 目录名 (目录中包含的内容)</p>\n</li>\n<li>\n<p>ls -d + 目录名 (目录本身)</p>\n</li>\n<li>\n<p>ls -a + 目录名 (所有文件包含隐藏的)</p>\n</li>\n<li>\n<p>ls -S + 目录名 (查看并按照大小排序)</p>\n</li>\n<li>\n<p>ls -R + 目录名 (查看递归文件目录下所有文件)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/987.png\" alt=\"wode\" /></p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/1.png\" alt=\"1\" /></p>\n</li>\n</ol>\n<h4 id=\"6切换路径\"><a class=\"anchor\" href=\"#6切换路径\">#</a> 6. 切换路径</h4>\n<p>cd  + 目录名 (进入指定目录中)</p>\n<p>cd -  + 目录名 (当前目录和当前目录之前所在目录之间的切换)</p>\n<p>cd ~  + 目录名 (进入当前用户家目录)</p>\n<p>cd ～user (进入 user 家目录)</p>\n<p>cd ..  (进入当前目录的上集目录)</p>\n<h4 id=\"7-文件大小统计\"><a class=\"anchor\" href=\"#7-文件大小统计\">#</a> 7. 文件大小统计</h4>\n<p>wc + 文件名 (显示行数 / 单词数 / 字节数)</p>\n<p>wc -l + 文件名 (行数)</p>\n<p>wc -w + 文件名 (单词数)</p>\n<p>wc -m + 文件名 (字符数)</p>\n<p>wc -c + 文件名 (字节数，udf-8 1 个中文 3 个字节，gb2312 1 个中文 2 个字节)</p>\n<p><img data-src=\"https://wlp1231-1316469392.cos.ap-chongqing.myqcloud.com/bolg/999.png\" alt=\"wode\" /></p>\n",
            "tags": [
                "ROS",
                "Linux",
                "Linux",
                "ROS"
            ]
        }
    ]
}